syntax = "proto3";

message AceAntiDataPush {
	bytes AntiData = 140;
}

message AceAntiDataNotify {
	bytes AntiData = 178;
}

enum MSG_ROUTE_ENUM {
	MSG_ROUTE_ENUM_RouteNone = 0;
	MSG_ROUTE_ENUM_Gateway = 1;
	MSG_ROUTE_ENUM_GameServer = 2;
}

enum EMsgFunction {
	EMsgFunction_FunctionNone = 0;
	EMsgFunction_BattleInfo = 1;
}

message AchievementProgress {
	int32 CurProgress = 1;
	int32 TotalProgress = 2;
}

message AchievementEntry {
	int32 Id = 1;
	uint32 FinishTime = 2;
	bool IsReceive = 3;
	AchievementProgress Progress = 4;
}

message AchievementGroupEntry {
	int32 Id = 1;
	uint32 FinishTime = 2;
	bool IsReceive = 3;
}

message AchievementGroupInfo {
	AchievementGroupEntry AchievementGroupEntry = 1;
	repeated AchievementEntry AchievementEntryList = 2;
}

message AchievementInfoRequest {
}

message AchievementInfoResponse {
	repeated AchievementGroupInfo AchievementGroupInfoList = 59;
}

message AchievementReceiveRequest {
	bool IsGroupId = 186;
	int32 Id = 223;
}

message AchievementReceiveResponse {
	int32 ErrorCode = 26;
	repeated string ErrorParams = 212;
	map<int32, int32> ItemMap = 172;
}

message AchievementProgressNotify {
	AchievementEntry AchievementEntry = 30;
}

message AchievementListProgressNotify {
	repeated AchievementEntry AchievementEntryList = 105;
}

message AchievementGroupProgressNotify {
	AchievementGroupEntry AchievementGroupEntry = 25;
}

message AchievementFinishRequest {
	int32 Id = 13;
}

message AchievementFinishResponse {
	int32 ErrorCode = 49;
}

enum ErrorCode {
	ErrorCode_Success = 0;
	ErrorCode_RequestParamError = 1;
	ErrorCode_InternalError = 2;
	ErrorCode_UnKnownError = 3;
	ErrorCode_ServerNotReady = 4;
	ErrorCode_ServerFullLoad = 5;
	ErrorCode_InvalidUserId = 6;
	ErrorCode_InvalidToken = 7;
	ErrorCode_InvalidRequest = 8;
	ErrorCode_GmFail = 9;
	ErrorCode_GmParamError = 10;
	ErrorCode_GmException = 11;
	ErrorCode_NotEnableGm = 12;
	ErrorCode_NotElegantName = 13;
	ErrorCode_ContainsDirtyWord = 14;
	ErrorCode_DirtyWordServerError = 15;
	ErrorCode_DirtyWordServerReturnEmpty = 16;
	ErrorCode_DirtyWordCheckException = 17;
	ErrorCode_ComponentNotExist = 18;
	ErrorCode_ServerFullLoadGame = 19;
	ErrorCode_ServerFullLoadGate = 20;
	ErrorCode_PlayerLoggingInFlag = 21;
	ErrorCode_GateLoginException = 22;
	ErrorCode_GateLoginSeverSelectErr = 23;
	ErrorCode_GateTokenAccessErr = 24;
	ErrorCode_GateTokenAccessException = 25;
	ErrorCode_GateLoginUserIdErr = 26;
	ErrorCode_GateLoginNodeIdErr = 27;
	ErrorCode_GateLoginCreateCharacterErr = 28;
	ErrorCode_GateCreateCharacterException = 29;
	ErrorCode_GateEnterGameAddressNotFound = 30;
	ErrorCode_GateEnterGameException = 31;
	ErrorCode_GateEnterGameCreatePlayerErr = 32;
	ErrorCode_GateEnterGameAddPlayerErr = 33;
	ErrorCode_GameGateNodeNotFound = 34;
	ErrorCode_GamePlayerAdminExist = 35;
	ErrorCode_GameReloginGateNodeNotFound = 36;
	ErrorCode_GameReloginPlayerNotFound = 37;
	ErrorCode_ServerNotOpen = 38;
	ErrorCode_ServerMaintenance = 39;
	ErrorCode_InvalidLoginType = 40;
	ErrorCode_InvalidGateway = 41;
	ErrorCode_SDKServerError = 42;
	ErrorCode_TokenNotAuthrized = 43;
	ErrorCode_HadBan = 44;
	ErrorCode_NotInUserIdWhiteList = 45;
	ErrorCode_NoHealthyGamesvr = 46;
	ErrorCode_NoHealthyGateway = 47;
	ErrorCode_GarFailed = 48;
	ErrorCode_GarSdkCheckFail = 49;
	ErrorCode_GarNoneUserInfo = 50;
	ErrorCode_GarQueryUserInfoError = 51;
	ErrorCode_GarNoRegion = 52;
	ErrorCode_InternalExceptionCode = 53;
	ErrorCode_DecodeExceptionCode = 54;
	ErrorCode_EncodeExceptionCode = 55;
	ErrorCode_InvalidRequestExceptionCode = 56;
	ErrorCode_MessageOutOfLimitExceptionCode = 57;
	ErrorCode_MessageNoHandler = 58;
	ErrorCode_EncryptionNoCreate = 59;
	ErrorCode_DecryptFail = 60;
	ErrorCode_PlayerNotInTheScene = 61;
	ErrorCode_NonReentrantExceptionCode = 62;
	ErrorCode_PlayerLoggedOut = 63;
	ErrorCode_MsgFunctionClose = 64;
	ErrorCode_SeqNoError = 65;
	ErrorCode_InvalidMessageType = 66;
	ErrorCode_InvalidMessageHeader = 67;
	ErrorCode_InvalidSeqNo = 68;
	ErrorCode_InvalidMessageId = 69;
	ErrorCode_ProtobufDecodeFailed = 70;
	ErrorCode_ErrProtoSeedCheck = 71;
	ErrorCode_ClosedRegister = 100000;
	ErrorCode_RegisterOutOfLimit = 100001;
	ErrorCode_HaveNoCharacter = 100002;
	ErrorCode_InvalidCharacterName = 100003;
	ErrorCode_CreateCharacterFailed = 100004;
	ErrorCode_CreateCharacterDuplicateKey = 100005;
	ErrorCode_PlayerAlreadyLogin = 100006;
	ErrorCode_PlayerLoggingIn = 100007;
	ErrorCode_ErrLoginGWReconnecting = 100008;
	ErrorCode_LoginRetry = 100009;
	ErrorCode_QueryPlayerDataFailed = 100010;
	ErrorCode_CheckPlayerDataFailed = 100011;
	ErrorCode_CheckPlayerDataFailedDebug = 100012;
	ErrorCode_LogoutUnknownError = 100013;
	ErrorCode_AccountLoggedInElsewhere = 100014;
	ErrorCode_AccountIsBlocked = 100015;
	ErrorCode_DataOverflow = 100016;
	ErrorCode_AccountBeKick = 100017;
	ErrorCode_AppVersionNotMatch = 100018;
	ErrorCode_LauncherVersionIsTooLow = 100019;
	ErrorCode_ResourceVersionIsTooLow = 100020;
	ErrorCode_CloseConnection = 100021;
	ErrorCode_ErrAcquirePlayerLockFailed = 100022;
	ErrorCode_ErrPlayerLoggingOut = 100023;
	ErrorCode_MessageChecksumFailed = 100024;
	ErrorCode_LoginTimeout = 100025;
	ErrorCode_ErrWeaponDefault = 200000;
	ErrorCode_ErrWeaponLevelLimit = 200001;
	ErrorCode_ErrWeaponBreachLimit = 200002;
	ErrorCode_ErrWeaponConsumeInvalid = 200003;
	ErrorCode_ErrWeaponPkgFull = 200004;
	ErrorCode_ErrRoleNoConfig = 200005;
	ErrorCode_ErrRoleIsActive = 200006;
	ErrorCode_ErrRoleNotActive = 200007;
	ErrorCode_ErrRoleOverNotEnough = 200008;
	ErrorCode_ErrRoleLevelNotEnough = 200009;
	ErrorCode_ErrRoleException = 200010;
	ErrorCode_ErrRoleNotExchange = 200011;
	ErrorCode_ErrRoleResonNotActive = 200012;
	ErrorCode_ErrRoleResonIsActive = 200013;
	ErrorCode_ErrRoleConfigNotRight = 200014;
	ErrorCode_ErrRoleLevelMax = 200015;
	ErrorCode_ErrRolePerResonNotActive = 200016;
	ErrorCode_ErrRoleConditionNotFind = 200017;
	ErrorCode_ErrRoleConditionNoEnough = 200018;
	ErrorCode_ErrRoleInvalidNameLength = 200019;
	ErrorCode_ErrRoleExpInvalid = 200020;
	ErrorCode_ErrRoleActiveNeedNoEnough = 200021;
	ErrorCode_ErrRoleResonMaxLevel = 200022;
	ErrorCode_ErrRoleProtoError = 200023;
	ErrorCode_ErrRoleItemListEmpty = 200024;
	ErrorCode_ErrRoleItemListCountOutRange = 200025;
	ErrorCode_ErrRoleItemExpError = 200026;
	ErrorCode_ErrRolePhantPosError = 200027;
	ErrorCode_ErrRolePhantSameError = 200028;
	ErrorCode_ErrRolePhantEmptyError = 200029;
	ErrorCode_ErrRoleItemListNoEnough = 200030;
	ErrorCode_ErrRoleGetSkillByIdFailed = 200031;
	ErrorCode_ErrRoleFavorLevelNotEnough = 200032;
	ErrorCode_ErrRolSkillNodeType = 200033;
	ErrorCode_ErrRolSkillNodeTypeActive = 200034;
	ErrorCode_ErrRolSkillNodeTypeUlock = 200035;
	ErrorCode_ErrRolSkillPointsNotEnough = 200036;
	ErrorCode_ErrTrialRoleExist = 200037;
	ErrorCode_ErrTrialRoleNotExist = 200038;
	ErrorCode_ErrTrialRoleRegionDataExist = 200039;
	ErrorCode_ErrTrialRoleBtObjDataExist = 200040;
	ErrorCode_ErrTrialRoleRegionExist = 200041;
	ErrorCode_ErrTrialRoleRegionNotExist = 200042;
	ErrorCode_ErrLoadEquipDefault = 200043;
	ErrorCode_ErrLoadEquipInvalidPos = 200044;
	ErrorCode_ErrLoadEquipInvalidRole = 200045;
	ErrorCode_ErrLoadEquipRoleConfig = 200046;
	ErrorCode_ErrPhantomIdNotExist = 200047;
	ErrorCode_ErrPhantomNotExist = 200048;
	ErrorCode_ErrPhantomLvupMax = 200049;
	ErrorCode_ErrPhantomLvupMismatchItemId = 200050;
	ErrorCode_ErrPhantomLvupNoItem = 200051;
	ErrorCode_ErrPhantomLvupLimit = 200052;
	ErrorCode_ErrPhantomItemType = 200053;
	ErrorCode_ErrPhantomInvalidPos = 200054;
	ErrorCode_ErrPhantomConfigNotFound = 200055;
	ErrorCode_ErrPhantomItemNotExist = 200056;
	ErrorCode_ErrPhantomPropNotExist = 200057;
	ErrorCode_ErrPhantomQaulityNotExist = 200058;
	ErrorCode_ErrPhantomBreachNotExist = 200059;
	ErrorCode_ErrPhantomLevelNotEnough = 200060;
	ErrorCode_ErrPhantomExpItemNotExist = 200061;
	ErrorCode_ErrPhantomSubPropRandomErr = 200062;
	ErrorCode_ErrPhantomSubPropNotEnough = 200063;
	ErrorCode_ErrPhantomSubPropGenDupicate = 200064;
	ErrorCode_ErrPhantomSubStrengthenPropNotExist = 200065;
	ErrorCode_ErrPhantomLevelConfigNotExist = 200066;
	ErrorCode_ErrPhantomLevelUpConsumeItemNotEnough = 200067;
	ErrorCode_ErrPhantomLevelUpMaterialLock = 200068;
	ErrorCode_ErrPhantomLevelUpConsumeItemErr = 200069;
	ErrorCode_ErrPhantomLevelUpRepeatItem = 200070;
	ErrorCode_ErrPhantomMainPropNotExist = 200071;
	ErrorCode_ErrPhantomGrowthNotExist = 200072;
	ErrorCode_ErrPhantomBreachItemCount = 200073;
	ErrorCode_ErrPhantomBreachRepeatItem = 200074;
	ErrorCode_ErrPhantomDecomposeEquiped = 200075;
	ErrorCode_ErrPhantomDecomposeFail = 200076;
	ErrorCode_ErrPhantomBreachBindItem = 200077;
	ErrorCode_ErrPhantomBreachErrItem = 200078;
	ErrorCode_ErrPhantomRecommendNoData = 200079;
	ErrorCode_ErrPhantomCannotTakeOff = 200080;
	ErrorCode_ErrPhantomCannotReplace = 200081;
	ErrorCode_ErrVisionSkillFavoriteTypeLimit = 200082;
	ErrorCode_ErrVisionSkillFavoriteCountLimit = 200083;
	ErrorCode_ErrVisionSkillCfgNotFound = 200084;
	ErrorCode_ErrVisionSkillNotFound = 200085;
	ErrorCode_ErrVisionSkillLevelUpMax = 200086;
	ErrorCode_ErrVisionSkillLevelUpLimit = 200087;
	ErrorCode_ErrVisionSkillSlotNotFound = 200088;
	ErrorCode_ErrVisionSkillEquipTypeLimit = 200089;
	ErrorCode_ErrVisionSkillUnEquipLimit = 200090;
	ErrorCode_ErrVisionSkillGemCfgNotFound = 200091;
	ErrorCode_ErrVisionSkillEquipLimit = 200092;
	ErrorCode_ErrVisionSkillGemLimit = 200093;
	ErrorCode_ErrVisionSkillOperFail = 200094;
	ErrorCode_ErrVisionSkillSlotEquipLimit = 200095;
	ErrorCode_ErrExploreSkillRouletteRepeat = 200096;
	ErrorCode_ErrItemCfgNotFound = 200097;
	ErrorCode_ErrItemNotFound = 200098;
	ErrorCode_ErrItemNotEnough = 200099;
	ErrorCode_ErrItemDecomposeLimit = 200100;
	ErrorCode_ErrItemUseLevelLimit = 200101;
	ErrorCode_ErrItemLockLimit = 200102;
	ErrorCode_ErrItemInvalidParams = 200103;
	ErrorCode_ErrItemDecomposeFail = 200104;
	ErrorCode_ErrItemUseFail = 200105;
	ErrorCode_ErrExchangeRewardCostItemNotEnough = 200106;
	ErrorCode_ExchangeRewardSuccess = 200107;
	ErrorCode_ErrPkgCapacityNotEnough = 200108;
	ErrorCode_ErrGiftOptionalCount = 200109;
	ErrorCode_ErrGiftOptionalNotExists = 200110;
	ErrorCode_ErrGiftNotExists = 200111;
	ErrorCode_ErrItemCount = 200112;
	ErrorCode_ErrItemIdNotContain = 200113;
	ErrorCode_ErrItemTypeNotContain = 200114;
	ErrorCode_ErrCalabashMaxLevel = 200115;
	ErrorCode_ErrCalabashConfig = 200116;
	ErrorCode_ErrCalabashLevelUp = 200117;
	ErrorCode_ErrCalabashExp = 200118;
	ErrorCode_ErrCalabashDevelopNoReward = 200119;
	ErrorCode_ErrCalabashMonsterNotFound = 200120;
	ErrorCode_PropRewardTips = 200121;
	ErrorCode_ErrEnergyMaxCharge = 200122;
	ErrorCode_ErrStateCanotTeleport = 200123;
	ErrorCode_ErrStateCannotEnterInst = 200124;
	ErrorCode_ErrStateCannotOnline = 200125;
	ErrorCode_ErrStateCannotChangeFormation = 200126;
	ErrorCode_ErrReportPlayerCountLimit = 200127;
	ErrorCode_ErrReportPlayerReasonNotFound = 200128;
	ErrorCode_ErrReportMessageLengthLimit = 200129;
	ErrorCode_ErrCookingToolFixed = 200130;
	ErrorCode_ErrCookingFormulaNotFound = 200131;
	ErrorCode_ErrCookingCount = 200132;
	ErrorCode_ErrCookingProcessNotFound = 200133;
	ErrorCode_ErrCookingLevelNotFound = 200134;
	ErrorCode_ErrCookingLevelLimt = 200135;
	ErrorCode_ErrCookingInteractiveNotFound = 200136;
	ErrorCode_ErrCookingFuncNotOpen = 200137;
	ErrorCode_ErrChallengeNotFound = 200138;
	ErrorCode_ErrChallengeNoTeam = 200139;
	ErrorCode_ErrChallengeTeamLimit = 200140;
	ErrorCode_ErrChallengeTeamMemLimit = 200141;
	ErrorCode_ErrChallengeChangeFormation = 200142;
	ErrorCode_ErrChallengeFunNotOpen = 200143;
	ErrorCode_ErrChallengeSeasonUpdate = 200144;
	ErrorCode_ErrChallengeLockRoleLimit = 200145;
	ErrorCode_ErrChallengeRoleLocked = 200146;
	ErrorCode_ErrChallengeNoRoleAlive = 200147;
	ErrorCode_ErrChallengeFormationEmpty = 200148;
	ErrorCode_ErrCycleChallengeNoRoleAlive = 200149;
	ErrorCode_ErrCycleChallengeFormationEmpty = 200150;
	ErrorCode_ErrInfluenceLocked = 200151;
	ErrorCode_ErrInfluenceRewardNotFound = 200152;
	ErrorCode_ErrInfluenceConfigNotFound = 200153;
	ErrorCode_ErrReputationLimit = 200154;
	ErrorCode_ErrInfluenceRewardFailed = 200155;
	ErrorCode_ErrInfluenceFunNotOpen = 200156;
	ErrorCode_ErrForgeFuncNotOpen = 200157;
	ErrorCode_ErrForgeCountLimit = 200158;
	ErrorCode_ErrForgeLocked = 200159;
	ErrorCode_ErrForgeConfigNotFound = 200160;
	ErrorCode_ErrForgeUnlocked = 200161;
	ErrorCode_ErrSynthesisFuncNotOpen = 200162;
	ErrorCode_ErrSynthesisConfigNotFound = 200163;
	ErrorCode_ErrSynthesisCountLimit = 200164;
	ErrorCode_ErrSynthesisLocked = 200165;
	ErrorCode_ErrSynthesisLevelNotFound = 200166;
	ErrorCode_ErrSynthesisLevelLimit = 200167;
	ErrorCode_ErrSynthesisCannotUnlock = 200168;
	ErrorCode_ErrSynthesisUnlocked = 200169;
	ErrorCode_ErrTrialRoleCannotMatch = 200170;
	ErrorCode_ErrPhantomFormationTeleport = 200171;
	ErrorCode_ErrPhantomFormationEnterInst = 200172;
	ErrorCode_ErrPhantomFormationMultiPlay = 200173;
	ErrorCode_ErrPhantomFormationAdvice = 200174;
	ErrorCode_ErrPhantomFormationChangeFormation = 200175;
	ErrorCode_ErrPhantomFormationRepeat = 200176;
	ErrorCode_ErrPhantomFormationChangeFailed = 200177;
	ErrorCode_ErrRoleChangeRoleCreateFailed = 200178;
	ErrorCode_ErrRoleChangeRoleUpdateCreateFailed = 200179;
	ErrorCode_ErrRoleChangeRoleNotUnlock = 200180;
	ErrorCode_ErrRoleChangeMultiPlay = 200181;
	ErrorCode_ErrRoleChangeInst = 200182;
	ErrorCode_ErrRoleChangeElementFunc = 200183;
	ErrorCode_ErrPhantomFormationCannotJoin = 200184;
	ErrorCode_ErrPhantomFormationHost = 200185;
	ErrorCode_ErrRoleChangeShowAllRole = 200186;
	ErrorCode_ErrInteractBoardEntityNotFound = 200187;
	ErrorCode_ErrInteractBoardRange = 200188;
	ErrorCode_ErrInteractBoardSystemNotFound = 200189;
	ErrorCode_ErrInteractBoardEntityConfig = 200190;
	ErrorCode_ErrInteractEntranceNotFound = 200191;
	ErrorCode_ErrInteractEntranceNotMatch = 200192;
	ErrorCode_ErrItemMaxUseCount = 200193;
	ErrorCode_ErrFuncNotExist = 200194;
	ErrorCode_ErrPhantomChangeInBattle = 200195;
	ErrorCode_ErrItemCanNotDestroy = 200196;
	ErrorCode_ErrPhantomEquipSourceCost = 200197;
	ErrorCode_ErrPhantomEquipTargetCost = 200198;
	ErrorCode_ErrPhantomEquipDuplicate = 200199;
	ErrorCode_ErrPhantomAutoEquipFromOther = 200200;
	ErrorCode_ErrPhantomConsumeItemCount = 200201;
	ErrorCode_ErrPhantomConsumeItemDuplicate = 200202;
	ErrorCode_ErrPhantomConsumeItemIncrDuplicate = 200203;
	ErrorCode_ErrPhantomConsumeItem = 200204;
	ErrorCode_ErrPhantomConsumeNoExp = 200205;
	ErrorCode_ErrPhantomBreachPos = 200206;
	ErrorCode_ErrPhantomBreachSuspend = 200207;
	ErrorCode_ErrPhantomBreachQuality = 200208;
	ErrorCode_ErrPhantomBreachExp = 200209;
	ErrorCode_ErrPhantomBreachConsumeItem = 200210;
	ErrorCode_ErrPhantomBreachNoSuspend = 200211;
	ErrorCode_ErrPhantomSpecialSkillRole = 200212;
	ErrorCode_ErrPhantomNotEquip = 200213;
	ErrorCode_ErrPhantomSpecilSkillPos = 200214;
	ErrorCode_ErrPhantomSubPropPlanConfig = 200215;
	ErrorCode_ErrPhantomMainPropGenFail = 200216;
	ErrorCode_ErrLivenessFuncNotOpen = 200217;
	ErrorCode_ErrLivenessTaskNotFound = 200218;
	ErrorCode_ErrLivenessTaskDataNotFound = 200219;
	ErrorCode_ErrLivenessTaskNotFinish = 200220;
	ErrorCode_ErrLivenessTaskRewarded = 200221;
	ErrorCode_ErrLivenessRewardNotFound = 200222;
	ErrorCode_ErrLivenessGoalNotReach = 200223;
	ErrorCode_ErrLivenessRewardParam = 200224;
	ErrorCode_ErrLivenessTaskRewardParam = 200225;
	ErrorCode_ErrWeaponLevelUpComsumeCount = 200226;
	ErrorCode_ErrWeaponConsumeSelf = 200227;
	ErrorCode_ErrWeaponConsumeItemNotFound = 200228;
	ErrorCode_ErrWeaponConsumeItemIdNotFound = 200229;
	ErrorCode_ErrWeaponLocked = 200230;
	ErrorCode_ErrWeaponConsumeDuplicate = 200231;
	ErrorCode_ErrWeaponEquiped = 200232;
	ErrorCode_ErrWeaponLevelUpItemDuplicate = 200233;
	ErrorCode_ErrWeaponLevelUpNoExp = 200234;
	ErrorCode_ErrWeaponLevelUpLevel = 200235;
	ErrorCode_ErrPhantomMainPropNotMatch = 200236;
	ErrorCode_ErrPhantomSubPropNotMatch = 200237;
	ErrorCode_ErrPhantomEquiped = 200238;
	ErrorCode_ErrAdviceNotInit = 200239;
	ErrorCode_ErrTowerChallengeNotOpen = 200240;
	ErrorCode_ErrTowerNotInChallenge = 200241;
	ErrorCode_ErrTowerConfigNotFound = 200242;
	ErrorCode_ErrTowerChallengeNotInOpenTime = 200243;
	ErrorCode_ErrTowerInChallenge = 200244;
	ErrorCode_ErrTowerFormationCount = 200245;
	ErrorCode_ErrTowerFormationRoleDuplicate = 200246;
	ErrorCode_ErrTowerRoleCost = 200247;
	ErrorCode_ErrTowerDifficultyNotClear = 200248;
	ErrorCode_ErrTowerFloorNotClear = 200249;
	ErrorCode_ErrTowerAreaNotClear = 200250;
	ErrorCode_ErrTowerRecommendNotSettle = 200251;
	ErrorCode_ErrTowerRewardNotFound = 200252;
	ErrorCode_ErrTowerNoReward = 200253;
	ErrorCode_ErrTowerRewarded = 200254;
	ErrorCode_ErrTowerRewardTarget = 200255;
	ErrorCode_ErrTowerSeasonUpdate = 200256;
	ErrorCode_ErrLordGymConfigNotFound = 200257;
	ErrorCode_ErrLordGymNotInPlay = 200258;
	ErrorCode_ErrLordGymLock = 200259;
	ErrorCode_ErrLordGymBtTreeNotFound = 200260;
	ErrorCode_ErrRoleSexFuncNotOpen = 200261;
	ErrorCode_ErrPhantomSubPropLocked = 200262;
	ErrorCode_ErrPhantomIdentifyNoCost = 200263;
	ErrorCode_ErrGiftPackType = 200264;
	ErrorCode_ErrGiftPackUseLimit = 200265;
	ErrorCode_ErrCdKeyNotEnable = 200266;
	ErrorCode_ErrCdKeyRequestCount = 200267;
	ErrorCode_ErrCdKeyRequestErr = 200268;
	ErrorCode_ErrCdKeyRequestDataErr = 200269;
	ErrorCode_ErrCdKeyException = 200270;
	ErrorCode_ErrCdKeyProcessCount = 200271;
	ErrorCode_ErrCdKeyNotFound = 200272;
	ErrorCode_ErrCdKeyBatchNotFound = 200273;
	ErrorCode_ErrCdKeyNotInValidTime = 200274;
	ErrorCode_ErrCdKeyBatchMaxCount = 200275;
	ErrorCode_ErrCdKeyEachPlayerMaxCount = 200276;
	ErrorCode_ErrCdKeyGroupCount = 200277;
	ErrorCode_ErrCdKeyCondition = 200278;
	ErrorCode_ErrCdKeyAddCountFail = 200279;
	ErrorCode_ErrCdKeyLength = 200280;
	ErrorCode_ErrCdKeyCharacter = 200281;
	ErrorCode_ErrGiftPackRandomErr = 200282;
	ErrorCode_ErrReconnectUserWhiteList = 200283;
	ErrorCode_ErrReconnectChannelWhiteList = 200284;
	ErrorCode_ErrReconnectIpInvalid = 200285;
	ErrorCode_ErrReconnectIpWhiteList = 200286;
	ErrorCode_ErrCdKeyExpire = 200287;
	ErrorCode_ErrWeaponResonLevelLimit = 200288;
	ErrorCode_ErrWeaponConfigNotFound = 200289;
	ErrorCode_ErrWeaponResonConfigNotFound = 200290;
	ErrorCode_ErrWeaponResonConsumeItem = 200291;
	ErrorCode_ErrWeaponResonConsumeGold = 200292;
	ErrorCode_ErrDestroyItemDuplicate = 200293;
	ErrorCode_ErrDestroyWeapon = 200294;
	ErrorCode_ErrCannotDestroyItem = 200295;
	ErrorCode_ErrCannotDestroyPhantom = 200296;
	ErrorCode_ErrCannotDestroyWeaponForm = 200297;
	ErrorCode_ErrCannotDestroyItemUnknown = 200298;
	ErrorCode_ErrWeaponConsumeQuality = 200299;
	ErrorCode_ErrPhantomSkinChangeCd = 200300;
	ErrorCode_ErrPhantomSkinUnlock = 200301;
	ErrorCode_ErrPhantomSkinMatch = 200302;
	ErrorCode_ErrLoginGameTainted = 200303;
	ErrorCode_ErrCookLimitCount = 200304;
	ErrorCode_ErrCookLimitTime = 200305;
	ErrorCode_ErrForgeLimitCount = 200306;
	ErrorCode_ErrForgeLimitTime = 200307;
	ErrorCode_ErrSynthesisLimitCount = 200308;
	ErrorCode_ErrSynthesisLimitTime = 200309;
	ErrorCode_ErrLoginIpBan = 200310;
	ErrorCode_ErrLoginDeviceBan = 200311;
	ErrorCode_ErrRoleNameEmpty = 200312;
	ErrorCode_ErrAdviceLength = 200313;
	ErrorCode_ErrPhantomRefiningCount = 200314;
	ErrorCode_ErrPhantomRefiningScore = 200315;
	ErrorCode_ErrPhantomRefiningTotalScore = 200316;
	ErrorCode_ErrPhantomRefiningDeveloped = 200317;
	ErrorCode_ErrCookFormulaUnlocked = 200318;
	ErrorCode_ErrForgeFormulaUnlocked = 200319;
	ErrorCode_ErrSynthesisFormulaUnlocked = 200320;
	ErrorCode_ErrCookFormulaBuyCount = 200321;
	ErrorCode_ErrForgeFormulaBuyCount = 200322;
	ErrorCode_ErrSynthesisFormulaBuyCount = 200323;
	ErrorCode_ErrCdKeyDailyVerifyCount = 200324;
	ErrorCode_ErrMapDefault = 300000;
	ErrorCode_ErrMapMarkNumLimit = 300001;
	ErrorCode_ErrMapNoFogConfig = 300002;
	ErrorCode_ErrMapFogAlreadyUnlock = 300003;
	ErrorCode_ErrFormationEmpty = 300004;
	ErrorCode_ErrFormationUnknown = 300005;
	ErrorCode_ErrFormationDead = 300006;
	ErrorCode_ErrFormationRoleRepeat = 300007;
	ErrorCode_ErrFormationRoleNotActive = 300008;
	ErrorCode_ErrFormationRoleIndexOut = 300009;
	ErrorCode_ErrFormationRoleCountOut = 300010;
	ErrorCode_ErrFightFormationRoleNotExist = 300011;
	ErrorCode_ErrFightFormationRoleIdNotMatch = 300012;
	ErrorCode_ErrFightFormationRoleCountNotMatch = 300013;
	ErrorCode_ErrFightFormationRoleCareerNotMatch = 300014;
	ErrorCode_ErrFightFormationRoleElementNotMatch = 300015;
	ErrorCode_ErrFightFormationCannotTrial = 300016;
	ErrorCode_ErrFightFormationTrialRoleNotMatch = 300017;
	ErrorCode_ErrFormationOverSize = 300018;
	ErrorCode_ErrSwitchRoleIsDead = 300019;
	ErrorCode_ErrUpdateFormationCurRoleIsDead = 300020;
	ErrorCode_ErrUpdateFormationRoleIdsIsNull = 300021;
	ErrorCode_ErrFormationIdOutOfRange = 300022;
	ErrorCode_ErrCanNotCancelCurFormation = 300023;
	ErrorCode_ErrCurRoleNotInFormationRoleIds = 300024;
	ErrorCode_ErrUpateFormationNotInSingleWorld = 300025;
	ErrorCode_ErrSwitchRoleTypeSignleWorld = 300026;
	ErrorCode_ErrSwitchRoleTypeMultiWorld = 300027;
	ErrorCode_ErrSwitchRoleTypeFbInstance = 300028;
	ErrorCode_ErrSwitchRoleTypeUndefine = 300029;
	ErrorCode_ErrSingWorldCanNotUpdateFightRoles = 300030;
	ErrorCode_ErrUpdateFightRolesIsNull = 300031;
	ErrorCode_ErrUpdateFightRolesCurIdNotExist = 300032;
	ErrorCode_ErrInStroyCharacterCanNotSwitchRole = 300033;
	ErrorCode_ErrSwitchRoleNotInFightRoles = 300034;
	ErrorCode_ErrCanNotSwitchRepeat = 300035;
	ErrorCode_ErrSwitchRoleEntityIdNotExist = 300036;
	ErrorCode_ErrSwitchRoleEntityNotExist = 300037;
	ErrorCode_ErrSitchRoleEntityIsDead = 300038;
	ErrorCode_ErrorTeamOperaFail = 300039;
	ErrorCode_ErrorPlayerAlreadyHaveTeam = 300040;
	ErrorCode_ErrorTeamInviteContentInvalid = 300041;
	ErrorCode_ErrorPlayerInBanTime = 300042;
	ErrorCode_ErrorPlayerInInviteCd = 300043;
	ErrorCode_ErrorPlayerAlreadyInTeam = 300044;
	ErrorCode_ErrorKickOutPermissionNotEnough = 300045;
	ErrorCode_ErrorTeamIsFull = 300046;
	ErrorCode_ErrorTeamServiceNotReady = 300047;
	ErrorCode_ErrorTeamPlayerJoinRepeat = 300048;
	ErrorCode_ErrorPlayerNotInTeam = 300049;
	ErrorCode_ErrorInvitePlayerNotExist = 300050;
	ErrorCode_ErrorKickPlayerNotInTeam = 300051;
	ErrorCode_ErrorDismissPermissionNotEnough = 300052;
	ErrorCode_ErrorTeamRoleIdNotActive = 300053;
	ErrorCode_ErrorTeamRoleIdRepeat = 300054;
	ErrorCode_ErrorJoinOtherWorldOtherNotExist = 300055;
	ErrorCode_ErrorJoinOtherWorldOtherNotInScene = 300056;
	ErrorCode_ErrorJoinOtherWorldSceneNotExist = 300057;
	ErrorCode_ErrorTeamNotExist = 300058;
	ErrorCode_ErrRewardCfgNotFound = 300059;
	ErrorCode_ErrTeleportIdNotExist = 300060;
	ErrorCode_ErrTeleportIdNotActivate = 300061;
	ErrorCode_ErrTeleportCreatureIdNotExist = 300062;
	ErrorCode_ErrTeleportIdAlreadyActivate = 300063;
	ErrorCode_ErrTeleportGmGetPlayerFailed = 300064;
	ErrorCode_ErrTeleportGmGetCreatureGenCfgFailed = 300065;
	ErrorCode_ErrTgmNotExitst = 300066;
	ErrorCode_ErrTgmNotPlayer = 300067;
	ErrorCode_ErrTgmNotGenCfg = 300068;
	ErrorCode_ErrTgmInsId = 300069;
	ErrorCode_ErrTeleportEntityNotExist = 300070;
	ErrorCode_ErrTeleportComponentNotExist = 300071;
	ErrorCode_ErrTeleportComponentNotMatch = 300072;
	ErrorCode_ErrAreaEnterRepeated = 300073;
	ErrorCode_ErrAreaIdNotExist = 300074;
	ErrorCode_ErrAreaIdNoNeedRecord = 300075;
	ErrorCode_ErrPlayerIsNotDead = 300076;
	ErrorCode_ErrPlayerCanNotRevive = 300077;
	ErrorCode_ErrPlayerReviveCountReachMax = 300078;
	ErrorCode_ErrPlayerReviveDelayNotReach = 300079;
	ErrorCode_ErrAutoReviveNotRequest = 300080;
	ErrorCode_ErrReviveRegionExisted = 300081;
	ErrorCode_ErrReviveRegionNotExisted = 300082;
	ErrorCode_ErrReviveRegionConfigNotExist = 300083;
	ErrorCode_ErrCanNotUseItemRevive = 300084;
	ErrorCode_ErrIsMatching = 300085;
	ErrorCode_ErrNotInMatcing = 300086;
	ErrorCode_ErrMatchPoolNotExist = 300087;
	ErrorCode_ErrNotFindMatchResult = 300088;
	ErrorCode_ErrConfirmResultRepeat = 300089;
	ErrorCode_ErrAlreadyHaveFbTeam = 300090;
	ErrorCode_ErrFbTeamNotExist = 300091;
	ErrorCode_ErrPlayerNotInFbTeam = 300092;
	ErrorCode_ErrHostCanNotReady = 300093;
	ErrorCode_ErrChangeReadyRepeat = 300094;
	ErrorCode_ErrFbTeamHaveSameRole = 300095;
	ErrorCode_ErrReadyStateCanNotChangeRole = 300096;
	ErrorCode_ErrChangeSameRole = 300097;
	ErrorCode_ErrNotHaveKickPermission = 300098;
	ErrorCode_ErrBeKickNotInFbTeam = 300099;
	ErrorCode_ErrNotHaveFightPermission = 300100;
	ErrorCode_ErrFbTeamNotAllReady = 300101;
	ErrorCode_ErrFbInstIdNotExist = 300102;
	ErrorCode_ErrFbMatchRoleNotMatch = 300103;
	ErrorCode_ErrSingleInstCanNotMatch = 300104;
	ErrorCode_ErrWaitOtherEnterSceneForbidMatch = 300105;
	ErrorCode_ErrIsEnteringOtherSceneForbidMatch = 300106;
	ErrorCode_InstPlayBtObjNotFound = 300107;
	ErrorCode_InstPlayNotSuccess = 300108;
	ErrorCode_InstPlayAlreadyGetReward = 300109;
	ErrorCode_InstPlayExchangeRewardFail = 300110;
	ErrorCode_InstPlaySetterRepeat = 300111;
	ErrorCode_InstEntranceNotUnlock = 300112;
	ErrorCode_InstEntranceNotOpen = 300113;
	ErrorCode_EnterInstLevelNotEnough = 300114;
	ErrorCode_EnterInstWorldLevelNotEnough = 300115;
	ErrorCode_EnterInstQuestNotEnough = 300116;
	ErrorCode_ErrForbidEnterInstInMatch = 300117;
	ErrorCode_ErrForbidEnterInstInEnteringOtherWorld = 300118;
	ErrorCode_ErrForbidEnterInstInWaitingOtherEnterWorld = 300119;
	ErrorCode_ErrEnterInstTypeNotMatch = 300120;
	ErrorCode_ErrNotHaveGetRewardCount = 300121;
	ErrorCode_ErrInMatching = 300122;
	ErrorCode_ErrNotInMatching = 300123;
	ErrorCode_ErrNotFindValidMatchServer = 300124;
	ErrorCode_ErrNotFindMatchServerPrx = 300125;
	ErrorCode_ErrNotHaveMatchTeamInfo = 300126;
	ErrorCode_ErrAlreadyConfirmMatchResult = 300127;
	ErrorCode_ErrMatchTeamNotInReadyState = 300128;
	ErrorCode_ErrMatchRoleNotActive = 300129;
	ErrorCode_ErrMatchReadyRepeat = 300130;
	ErrorCode_ErrMatchPlayerNotReady = 300131;
	ErrorCode_ErrMatchNotHostCanNotKick = 300132;
	ErrorCode_ErrMatchNotHostCanNotSetMatching = 300133;
	ErrorCode_ErrSetMatchFlagRepeat = 300134;
	ErrorCode_ErrPlayerNotInMatchTeam = 300135;
	ErrorCode_ErrGetMatchPoolFail = 300136;
	ErrorCode_ErrPlayerInMatchPool = 300137;
	ErrorCode_ErrPlayerNotInMatchPool = 300138;
	ErrorCode_ErrPlayerInMatchTeamCanNotCancel = 300139;
	ErrorCode_ErrPlayerIsConfirmResult = 300140;
	ErrorCode_ErrNotFindMatchTeam = 300141;
	ErrorCode_ErrPlayerIsReadyCanNotChangeRole = 300142;
	ErrorCode_ErrNotHostCanNotSetMultRoles = 300143;
	ErrorCode_ErrCanNotSetRepeatRole = 300144;
	ErrorCode_ErrPlayerNotReadyCanNotCancel = 300145;
	ErrorCode_ErrRoleRepeatCanNotReady = 300146;
	ErrorCode_ErrBeKickNotInMatchTeam = 300147;
	ErrorCode_ErrNotHostCanNotKick = 300148;
	ErrorCode_ErrNotHostCanNotSetTeamState = 300149;
	ErrorCode_ErrTeamMatchingCanNotStartInst = 300150;
	ErrorCode_ErrMatchTeamHavePlayerNotReady = 300151;
	ErrorCode_ErrNotHostCanNotEnterInst = 300152;
	ErrorCode_ErrMatchTeamIsNotEnterInstState = 300153;
	ErrorCode_ErrMatchInstIdNotExist = 300154;
	ErrorCode_ErrSingleInstanceCanNotMatch = 300155;
	ErrorCode_ErrOnlineStateCanNotMatch = 300156;
	ErrorCode_ErrTeamHaveSameRoleCanNotBegin = 300157;
	ErrorCode_ErrNotJoinChatChannel = 300158;
	ErrorCode_ErrChatChannelNotFound = 300159;
	ErrorCode_ErrChatChannelTypeNotMatch = 300160;
	ErrorCode_ErrChatContentTooLong = 300161;
	ErrorCode_ErrFightRoleIsAllDied = 300162;
	ErrorCode_ErrLoadingSceneIdNotMatch = 300163;
	ErrorCode_ErrLoadingPlayerNotInScene = 300164;
	ErrorCode_ErrPlayerIsSceneLoadingCanNotBeKick = 300165;
	ErrorCode_ErrTeamPlayerIsSceneLoadingCanNotDissolve = 300166;
	ErrorCode_ErrIsSceneLoadingCanNotDissolve = 300167;
	ErrorCode_ErrSceneLoadingCanNotEnterInst = 300168;
	ErrorCode_ErrActivateResetPointNotEntity = 300169;
	ErrorCode_ErrHostIsLoadingScene = 300170;
	ErrorCode_ErrHostIsLoadingSceneCanNotApply = 300171;
	ErrorCode_ErrIsLoadingSceneCanNotAcceptApply = 300172;
	ErrorCode_ErrNotFindHostWorldScene = 300173;
	ErrorCode_ErrCanNotRepeatCreateNeedSaveScene = 300174;
	ErrorCode_DeadStateCanNotAgreeOherEnter = 300175;
	ErrorCode_HostIsDeadStateCanNotEnter = 300176;
	ErrorCode_ErrSceneIsLoadingCanNotLeave = 300177;
	ErrorCode_ErrInstCanNotReChallenge = 300178;
	ErrorCode_ErrInstMemberNotEnoughCanNotReChallenge = 300179;
	ErrorCode_ErrInstHavePlayerLeaveCanNotReChallenge = 300180;
	ErrorCode_ErrInstHavePlayerNotDeadCanNotReChallenge = 300181;
	ErrorCode_ErrInstNotSettleCanNotReChallenge = 300182;
	ErrorCode_ErrInstCanNotRepetApplyRechallenge = 300183;
	ErrorCode_ErrInstCanNotRepetReceiveRechallenge = 300184;
	ErrorCode_ErrInstOwnerCanIniviteRechallenge = 300185;
	ErrorCode_ErrInstOwnerCanNotReceiveRechallenge = 300186;
	ErrorCode_ErrPlayerIsLogoutCanNotCreateScene = 300187;
	ErrorCode_ErrPlayerIsCreatingScene = 300188;
	ErrorCode_ErrPlayerCreateSceneFail = 300189;
	ErrorCode_ErrBigWorldCanNotReset = 300190;
	ErrorCode_ErrMultiGameModeCanNotReset = 300191;
	ErrorCode_ErrIsEnterSceneApplyingCanNotDoRepeate = 300192;
	ErrorCode_ErrIsQueryLobbyFriendDetailCanNotDoRepeate = 300193;
	ErrorCode_ErrIsQueryLobbyPlayerDetailCanNotDoRepeate = 300194;
	ErrorCode_ErrPlayerIsLoadingCanNotDoTeleport = 300195;
	ErrorCode_ErrPlayerIsTeleportCanNotDoTeleport = 300196;
	ErrorCode_ErrTeleportPositionIllegal = 300197;
	ErrorCode_ErrPlayerIsLoadingCanNotRevive = 300198;
	ErrorCode_ErrPlayerIsTeleportCanNotRevive = 300199;
	ErrorCode_ErrPlayerIsInTeleportCanNotBeKick = 300200;
	ErrorCode_ErrTeamPlayerIsInTeleportCanNotDissolve = 300201;
	ErrorCode_ErrHostIsInTeleportCanNotApply = 300202;
	ErrorCode_ErrIsInTeleportCanNotAcceptApply = 300203;
	ErrorCode_ErrStrNotIllegal = 400000;
	ErrorCode_ErrBasicInfoPhotoUnlocked = 400001;
	ErrorCode_ErrBasicInfoFrameUnlocked = 400002;
	ErrorCode_ErrCanNotGetSelfBasicInfo = 400003;
	ErrorCode_ErrMailNotExist = 400004;
	ErrorCode_ErrMailAlreadyRead = 400005;
	ErrorCode_ErrNoMailCanGet = 400006;
	ErrorCode_ErrMailNoAttachment = 400007;
	ErrorCode_ErrMailAttachmentIsGet = 400008;
	ErrorCode_ErrMailAttachmentNotGet = 400009;
	ErrorCode_ErrMailNotRead = 400010;
	ErrorCode_ErrNoMailCanDelete = 400011;
	ErrorCode_ErrMailItemBagFull = 400012;
	ErrorCode_ErrMailFuncNotOpen = 400013;
	ErrorCode_ErrMailOverSize = 400014;
	ErrorCode_ErrMailTakeLimit = 400015;
	ErrorCode_ErrMailAttachmentItemInvalidCount = 400016;
	ErrorCode_ErrMailAttachmentItemNoConf = 400017;
	ErrorCode_ErrMailNoConf = 400018;
	ErrorCode_ErrShopIdNotExit = 400019;
	ErrorCode_ErrShopInfoExist = 400020;
	ErrorCode_ErrShopTimeLimit = 400021;
	ErrorCode_ErrShopMoneyId = 400022;
	ErrorCode_ErrShopNumLimit = 400023;
	ErrorCode_ErrShopCondLimit = 400024;
	ErrorCode_ErrShopBankNoExit = 400025;
	ErrorCode_ErrShopNoShow = 400026;
	ErrorCode_ErrShopVersion = 400027;
	ErrorCode_ErrShopIlligalParam = 400028;
	ErrorCode_ErrDragonPoolConf = 400029;
	ErrorCode_ErrFullLevel = 400030;
	ErrorCode_ErrItemConf = 400031;
	ErrorCode_ErrNotEnoughItem = 400032;
	ErrorCode_NotMingSuTi = 400033;
	ErrorCode_HadFinishMingSuTi = 400034;
	ErrorCode_MingSuCallEntityFail = 400035;
	ErrorCode_ErrDragonPoolFuncNotOpen = 400036;
	ErrorCode_ErrWorldLevelHadDown = 400037;
	ErrorCode_ErrWorldLevelNotDown = 400038;
	ErrorCode_ErrWorldLevelMin = 400039;
	ErrorCode_ErrWorldLevelCd = 400040;
	ErrorCode_ErrIsBlockedPlayer = 400041;
	ErrorCode_ErrIsNotBlockedPlayer = 400042;
	ErrorCode_ErrBlockListCountMax = 400043;
	ErrorCode_ErrYouAreBlocked = 400044;
	ErrorCode_ErrAlreadyOnFriendList = 400045;
	ErrorCode_ErrNotOnFriendList = 400046;
	ErrorCode_ErrAlreadyOnFriendApplyList = 400047;
	ErrorCode_ErrFriendApplyNotExists = 400048;
	ErrorCode_ErrFriendListCountMax = 400049;
	ErrorCode_ErrInitiatorFriendListCountMax = 400050;
	ErrorCode_ErrReceiverApplyListCountMax = 400051;
	ErrorCode_ErrCanNotFriendApplySendToSelf = 400052;
	ErrorCode_ErrFriendApplySended = 400053;
	ErrorCode_ErrFriendRemarkLengthLimit = 400054;
	ErrorCode_ErrFriendApplyRequestLimit = 400055;
	ErrorCode_ErrFriendRequestEmpty = 400056;
	ErrorCode_ErrFriendRequestOverSize = 400057;
	ErrorCode_ErrPayShopNotExists = 400058;
	ErrorCode_ErrPayShopDisabled = 400059;
	ErrorCode_ErrPayShopGoodsNotExists = 400060;
	ErrorCode_ErrPayShopGoodsDisabled = 400061;
	ErrorCode_ErrPayShopGoodsLocked = 400062;
	ErrorCode_ErrPayShopGoodsOutSellTime = 400063;
	ErrorCode_ErrPayShopGoodsBuyLimit = 400064;
	ErrorCode_ErrPayShopDataChanged = 400065;
	ErrorCode_ErrPayShopIllegalBuyCount = 400066;
	ErrorCode_ErrPayShopIsDirect = 400067;
	ErrorCode_ErrPayShopIsNotDirect = 400068;
	ErrorCode_ErrPayShopTabDisabled = 400069;
	ErrorCode_ErrMonthCardWithoutValidity = 400070;
	ErrorCode_ErrMonthCardUpdateConfNotExist = 400071;
	ErrorCode_ErrMonthCardDaysMax = 400072;
	ErrorCode_ErrMonthCardRewardGot = 400073;
	ErrorCode_ErrMonthCardConfNotExist = 400074;
	ErrorCode_ErrIsNotSpecialItem = 400075;
	ErrorCode_ErrNoEquipSpecialItem = 400076;
	ErrorCode_ErrNoValidBattlePass = 400077;
	ErrorCode_ErrBattlePassRewardNotFound = 400078;
	ErrorCode_ErrBattlePassNotPaid = 400079;
	ErrorCode_ErrBattlePassIsPaid = 400080;
	ErrorCode_ErrBattlePassRewardLocked = 400081;
	ErrorCode_ErrBattlePassRewardTaken = 400082;
	ErrorCode_ErrBattlePassCanNotRepeatActive = 400083;
	ErrorCode_BattlePassNoRecurringReward = 400084;
	ErrorCode_ErrBattlePassIsAdvanced = 400085;
	ErrorCode_ErrBattlePassTaskNotFound = 400086;
	ErrorCode_ErrBattlePassTaskNotFinished = 400087;
	ErrorCode_ErrBattlePassTaskTaken = 400088;
	ErrorCode_ErrBattlePassExpIsFull = 400089;
	ErrorCode_ErrAdviceNotFound = 400090;
	ErrorCode_ErrConjunctionCanNotWord = 400091;
	ErrorCode_ErrAdviceTextNotExists = 400092;
	ErrorCode_ErrAdviceWordNotExists = 400093;
	ErrorCode_ErrAdviceTemplateNotExists = 400094;
	ErrorCode_ErrAdviceCellCalcException = 400095;
	ErrorCode_ErrIsNotAdviceEntity = 400096;
	ErrorCode_ErrAdviceCreateLimit = 400097;
	ErrorCode_ErrAdviceContentCanNotEmpty = 400098;
	ErrorCode_ErrAdviceEntityNotFount = 400099;
	ErrorCode_ErrAdviceVoteLimit = 400100;
	ErrorCode_ErrAdviceIsVoteUp = 400101;
	ErrorCode_ErrAdviceIsVoteDown = 400102;
	ErrorCode_ErrNoAdviceItem = 400103;
	ErrorCode_ErrAdviceCreateNotOpen = 400104;
	ErrorCode_ErrAdviceCanNotCreateByVisitor = 400105;
	ErrorCode_ErrAdviceSetingIsShow = 400106;
	ErrorCode_ErrAdviceSetingIsNoShow = 400107;
	ErrorCode_ErrAdviceUpMaxValue = 400108;
	ErrorCode_ErrAdviceDownMaxValue = 400109;
	ErrorCode_ProtoVersionCheckFail = 400110;
	ErrorCode_ProtoMd5CheckFail = 400111;
	ErrorCode_ConfigVersionCheckFail = 400112;
	ErrorCode_ConfigMd5CheckFail = 400113;
	ErrorCode_ErrInvalidMonthCardDays = 400114;
	ErrorCode_ErrMonthCardExtendedDaysMax = 400115;
	ErrorCode_ErrMobileButtonNoCfg = 400116;
	ErrorCode_ErrMoneyWrongPayCount = 400117;
	ErrorCode_ErrMailTextSenderNotFound = 400118;
	ErrorCode_ErrMailTextTitleNotFound = 400119;
	ErrorCode_ErrMailTextContentNotFound = 400120;
	ErrorCode_ErrAdviceIsNotVoteUp = 400121;
	ErrorCode_ErrParkourChallengeNoConf = 400122;
	ErrorCode_ErrParkourLocationNoConf = 400123;
	ErrorCode_ErrParkourChallengeNotOpen = 400124;
	ErrorCode_ErrParkourChallengeNoData = 400125;
	ErrorCode_ErrParkourChallengeTaken = 400126;
	ErrorCode_ErrParkourChallengeUnderscore = 400127;
	ErrorCode_ErrParkourChallengeScoreNoConf = 400128;
	ErrorCode_ErrParkourTakeFail = 400129;
	ErrorCode_ErrShopIllegalBuyCount = 400130;
	ErrorCode_ErrQuestErrTaskId = 500000;
	ErrorCode_ErrQuestErrStepId = 500001;
	ErrorCode_ErrQuestErrTaskBag = 500002;
	ErrorCode_ErrQuestStepStatusNotCanAccept = 500003;
	ErrorCode_ErrQuestStepStatusNotCanCommit = 500004;
	ErrorCode_ErrQuestStepConf = 500005;
	ErrorCode_ErrQuestStepData = 500006;
	ErrorCode_ErrQuestCanNotAccept = 500007;
	ErrorCode_ErrAreaQuestDelegationBoardRequest = 500008;
	ErrorCode_ErrAreaQuestAreaIdErr = 500009;
	ErrorCode_ErrAreaQuestExpired = 500010;
	ErrorCode_ErrDevoteLevel = 500011;
	ErrorCode_ErrDevoteRewardReceived = 500012;
	ErrorCode_ErrQuestNotFinish = 500013;
	ErrorCode_ErrDevoteId = 500014;
	ErrorCode_ErrAreaQuestLimit = 500015;
	ErrorCode_ErrQuestNodeNotActive = 500016;
	ErrorCode_ErrQuestNotActiveId = 500017;
	ErrorCode_ErrQuestNodeNotFound = 500018;
	ErrorCode_ErrQuestComNotFound = 500019;
	ErrorCode_ErrQuestTraceType = 500020;
	ErrorCode_ErrQuestNotProgress = 500021;
	ErrorCode_ErrQuestNoCombatState = 500022;
	ErrorCode_ErrQuestNodeData = 500023;
	ErrorCode_ErrQuestNotChildQuestNode = 500024;
	ErrorCode_ErrQuestNotClientSubmit = 500025;
	ErrorCode_ErrQuestAccepted = 500026;
	ErrorCode_ErrResourceOccupation = 500027;
	ErrorCode_ErrRequestOccupationType = 500028;
	ErrorCode_ErrNotFoundOccupation = 500029;
	ErrorCode_ErrNotOnlineQuestAccept = 500030;
	ErrorCode_ErrQuestDestroy = 500031;
	ErrorCode_ErrTreeNodeNotFind = 500032;
	ErrorCode_ErrTreeNodeNotActive = 500033;
	ErrorCode_ErrIsNotChildQuestNode = 500034;
	ErrorCode_ErrChildQuestConditionCanNotSubmit = 500035;
	ErrorCode_ErrNodeNotFindAction = 500036;
	ErrorCode_ErrNodeActionIsFinish = 500037;
	ErrorCode_ErrNodeActionGetItemIsNotQuestItem = 500038;
	ErrorCode_ErrNodeActionGetItemHasNotFreeSize = 500039;
	ErrorCode_ErrInvalidBtType = 500040;
	ErrorCode_ErrTimerNotFind = 500041;
	ErrorCode_ErrPreCondition = 500042;
	ErrorCode_ErrHandIdItemData = 500043;
	ErrorCode_ErrTreeNotFailedNode = 500044;
	ErrorCode_ErrTreeNotFailConf = 500045;
	ErrorCode_ErrTreeNotGiveUpConf = 500046;
	ErrorCode_ErrTreeNotRollback = 500047;
	ErrorCode_ErrNodeNotFindNpcId = 500048;
	ErrorCode_ErrNotRollbackPermission = 500049;
	ErrorCode_ErrNotRollbackRepeat = 500050;
	ErrorCode_ErrTreeSuspend = 500051;
	ErrorCode_ErrPlayerNotInQuestMap = 500052;
	ErrorCode_ErrSaveNewNotRollback = 500053;
	ErrorCode_ErrUiPlayType = 500054;
	ErrorCode_ErrOccupationTime = 500055;
	ErrorCode_ErrReleaseTime = 500056;
	ErrorCode_ErrActionSetTime = 500057;
	ErrorCode_ErrForcedOccupationResource = 500058;
	ErrorCode_ErrAddPlayBubble = 500059;
	ErrorCode_ErrTapeDefault = 600000;
	ErrorCode_ErrTapeInvalidPos = 600001;
	ErrorCode_ErrTapeIsNotActiveRole = 600002;
	ErrorCode_ErrTapeItemTypeFail = 600003;
	ErrorCode_ErrTapeNotExistTapeItem = 600004;
	ErrorCode_ErrTapeNotExistTapeConfig = 600005;
	ErrorCode_ErrTapeNotExistTapeProps = 600006;
	ErrorCode_ErrTapeHasTakeOnTape = 600007;
	ErrorCode_ErrTapeHasNotTakeOnTape = 600008;
	ErrorCode_ErrTapeNotExistTapeQualityConfig = 600009;
	ErrorCode_ErrTapeNotExistLevelUpExpConfig = 600010;
	ErrorCode_ErrTapeInvalidLevelUpExpValue = 600011;
	ErrorCode_ErrTapeNotExistExpDecayRatioConfig = 600012;
	ErrorCode_ErrTapeLevelUpEqualItem = 600013;
	ErrorCode_ErrTapeLevelUpRepeatItem = 600014;
	ErrorCode_ErrTapeLevelUpInvalidExpItemNum = 600015;
	ErrorCode_ErrTapeLevelUpInvalidExpRate = 600016;
	ErrorCode_ErrTapeLevelUpInvalidAddExp = 600017;
	ErrorCode_ErrTapeLevelUpMaxLevel = 600018;
	ErrorCode_ErrTapeLevelUpConsumeItemNotEnough = 600019;
	ErrorCode_ErrTapeLevelUpMaterialLock = 600020;
	ErrorCode_ErrTapeTransferEqualItem = 600021;
	ErrorCode_ErrTapeTransferQualityNotEqual = 600022;
	ErrorCode_ErrTapeTransferSuitNotEqual = 600023;
	ErrorCode_ErrTapeTransferMaterialLock = 600024;
	ErrorCode_ErrTapeTransferMaterialEquipped = 600025;
	ErrorCode_ErrTapeNotExistTransferPropNumConfig = 600026;
	ErrorCode_ErrTapeTransferPropNumIsMax = 600027;
	ErrorCode_ErrTapeTransferRandomSubPropFail = 600028;
	ErrorCode_ErrTapeResetTransferHasNotProp = 600029;
	ErrorCode_ErrTapeResetTransferMaterialNotEnough = 600030;
	ErrorCode_ErrTapeNotExistTapeExpItem = 600031;
	ErrorCode_ErrTapeNotExistTapeExpItemConfig = 600032;
	ErrorCode_ErrCollectEntityNotExist = 600033;
	ErrorCode_ErrCollectInvalidEntityMainType = 600034;
	ErrorCode_ErrRunningLevelPlayNotFind = 600035;
	ErrorCode_ErrLevelPlayInteractionEntity = 600036;
	ErrorCode_ErrLevelPlayNotExistByConfId = 600037;
	ErrorCode_ErrLevelPlayNotCreate = 600038;
	ErrorCode_ErrLevelPlayRewarded = 600039;
	ErrorCode_ErrLevelPlayInteractionType = 600040;
	ErrorCode_ErrLevelPlayNotPlayer = 600041;
	ErrorCode_ErrLevelPlayNotComplete = 600042;
	ErrorCode_ErrLevelPlayRewardFail = 600043;
	ErrorCode_ErrLevelPlayNotWaitState = 600044;
	ErrorCode_ErrLevelPlayAction = 600045;
	ErrorCode_ErrLevelPlayGetRewardLimit = 600046;
	ErrorCode_ErrFlowNotExist = 600047;
	ErrorCode_ErrFlowHaveNotActionWait = 600048;
	ErrorCode_ErrFlowHaveNotTalkWait = 600049;
	ErrorCode_ErrFlowHaveNotOptionWait = 600050;
	ErrorCode_ErrFlowInvalidOptionId = 600051;
	ErrorCode_ErrInteractFlowCanNotPlay = 600052;
	ErrorCode_ErrInteractInvalidFlowState = 600053;
	ErrorCode_ErrInteractOptionOwnerIsNotFlowOwner = 600054;
	ErrorCode_ErrInteractOptionOwnerIsNotActionOwner = 600055;
	ErrorCode_ErrActionOwnerIsNotEntity = 600056;
	ErrorCode_ErrActionOwnerNotFound = 600057;
	ErrorCode_ErrActionSceneNotFound = 600058;
	ErrorCode_ErrActionGroupNotFound = 600059;
	ErrorCode_ErrFinishClientActionFail = 600060;
	ErrorCode_ErrActionHostPlayerNotFound = 600061;
	ErrorCode_ErrActionFail = 600062;
	ErrorCode_ErrActionPlayerNotFound = 600063;
	ErrorCode_ErrInteractMultiGameMode = 600064;
	ErrorCode_ErrInteractAddFlowFail = 600065;
	ErrorCode_ErrBehaviorTreeOwnerNotFound = 600066;
	ErrorCode_ErrBehaviorTreeNotFound = 600067;
	ErrorCode_ErrBehaviorTreePending = 600068;
	ErrorCode_ErrBehaviorTreeTimerTypeNotFound = 600069;
	ErrorCode_ErrBehaviorTreeStopTimerFail = 600070;
	ErrorCode_ErrBehaviorTreeTimerCompNotFound = 600071;
	ErrorCode_ErrInteractCd = 600072;
	ErrorCode_ErrInteractRange = 600073;
	ErrorCode_ErrDropPickRange = 600074;
	ErrorCode_ErrBtTmpItemContextNotExist = 600075;
	ErrorCode_ErrBtTmpItemBtObjNotExist = 600076;
	ErrorCode_ErrPlayerBigWorldNotExist = 600077;
	ErrorCode_ErrRoleEntityNotExist = 600078;
	ErrorCode_ErrAddFlowFail = 600079;
	ErrorCode_ErrInteracting = 600080;
	ErrorCode_ErrInteractCollectBagFull = 600081;
	ErrorCode_ErrBtObjIsNotInstPlay = 600082;
	ErrorCode_ErrReviveConfigNotExist = 600083;
	ErrorCode_ErrFinishFlowFail = 600084;
	ErrorCode_ErrFlowActionFail = 600085;
	ErrorCode_ErrGmSubmitChildQuestNodeMaxDepth = 600086;
	ErrorCode_ErrGmSubmitChildQuestNodeIsNotProgress = 600087;
	ErrorCode_ErrEntityPatrolComponentNotExist = 600088;
	ErrorCode_ErrInteractIsNotParticipant = 600089;
	ErrorCode_ErrVisionEntityInteractFail = 600090;
	ErrorCode_ErrMaxDropTimes = 600091;
	ErrorCode_ErrStateEntityMultiHang = 600092;
	ErrorCode_ErrInteractBtPending = 600093;
	ErrorCode_ErrSceneWorldNotExist = 700000;
	ErrorCode_ErrPlayerNotInScene = 700001;
	ErrorCode_ErrDropEntityNotExist = 700002;
	ErrorCode_ErrDropComponentNotExist = 700003;
	ErrorCode_ErrDropOwnerError = 700004;
	ErrorCode_ErrPlayerAlreadyInScene = 700005;
	ErrorCode_ErrSceneIdParseError = 700006;
	ErrorCode_ErrJoinSceneIdNotExist = 700007;
	ErrorCode_ErrSceneInviteFail = 700008;
	ErrorCode_ErrSceneInvitePlayerNotExist = 700009;
	ErrorCode_ErrSceneInviteTokenInvalid = 700010;
	ErrorCode_ErrSceneInviterNotExist = 700011;
	ErrorCode_ErrSceneInviteeIdNotMatch = 700012;
	ErrorCode_ErrSceneTeamIsFull = 700013;
	ErrorCode_ErrScenePlayerIsInTeam = 700014;
	ErrorCode_ErrSceneInviteerIsInPlayeInst = 700015;
	ErrorCode_ErrBeKickerNotInScene = 700016;
	ErrorCode_ErrorCanNotSceneKickSelf = 700017;
	ErrorCode_ErrCanNotKickOtherInPlayInst = 700018;
	ErrorCode_ErrCanNotKickOtherWhoIsInPlayInst = 700019;
	ErrorCode_ErrNoSceneKickPermission = 700020;
	ErrorCode_ErrInviterIsInOtherScene = 700021;
	ErrorCode_ErrInOtherSceneCanNotInvite = 700022;
	ErrorCode_ErrSceneBackSceneFlagError = 700023;
	ErrorCode_ErrLeaveSceneIdNotMatch = 700024;
	ErrorCode_ErrPrewarTeamAlreadyExist = 700025;
	ErrorCode_ErrPrewarTeamNotExist = 700026;
	ErrorCode_ErrCreatePrewarTeamPermissionNotEnough = 700027;
	ErrorCode_ErrPrewarTeamInvitePermissionNotEnough = 700028;
	ErrorCode_ErrPrewarBeInviterNotInScene = 700029;
	ErrorCode_ErrPrewarBeInviterInInstance = 700030;
	ErrorCode_ErrPlayerAlreadyInPrewarTeam = 700031;
	ErrorCode_ErrPlayerNotInPrewarTeam = 700032;
	ErrorCode_ErrPlayerSetPrewarReadyStateRepeat = 700033;
	ErrorCode_ErrPrewarTeamBeKickerNotInScene = 700034;
	ErrorCode_ErrPrewarTeamKickPermissionNotEnough = 700035;
	ErrorCode_ErrPrewarIniviteTooFrequently = 700036;
	ErrorCode_ErrPrewarJoinInstanceIdNotMatch = 700037;
	ErrorCode_ErrPrewarCaptainCanNotLeave = 700038;
	ErrorCode_ErrPrewarReadyStateCanNotChangeRole = 700039;
	ErrorCode_ErrScenePrewarTeamHavePlayerNotReady = 700040;
	ErrorCode_ErrAlreadyInMultiScene = 700041;
	ErrorCode_ErrOnlyCaptainCanDissolvePrewarTeam = 700042;
	ErrorCode_ErrMultiChangeRoleIndexInvalid = 700043;
	ErrorCode_ErrMultiCanNotChangeOtherRole = 700044;
	ErrorCode_ErrMultiChangeRoleEntityNorExist = 700045;
	ErrorCode_ErrSceneCanNotUseThisFunc = 700046;
	ErrorCode_ErrSceneCanNotUseThisItem = 700047;
	ErrorCode_ErrSceneFightRoleIdRepeat = 700048;
	ErrorCode_ErrShieldAddEntityNotExist = 700049;
	ErrorCode_ErrShieldAddShieldIdExisted = 700050;
	ErrorCode_ErrShieldChangeEntityNotExist = 700051;
	ErrorCode_ErrShieldChangeShieldIdNotExist = 700052;
	ErrorCode_ErrShieldRemoveEntityNotExist = 700053;
	ErrorCode_ErrShieldRemoveShieldIdNotExist = 700054;
	ErrorCode_ErrHardnessModeChangedEntityNotExist = 700055;
	ErrorCode_ErrSceneEntityNotExist = 700056;
	ErrorCode_ErrSceneEntityNotHavePartData = 700057;
	ErrorCode_ErrsceneEntityNotHavePartId = 700058;
	ErrorCode_ErrChangeControlRoleRepeat = 700059;
	ErrorCode_ErrVisionSkillCallEntityFail = 700060;
	ErrorCode_ErrSceneDataLoadError = 700061;
	ErrorCode_ErrCreatureDataError = 700062;
	ErrorCode_ErrCreatureGenIsExist = 700063;
	ErrorCode_ErrCreatureGenIsNotExist = 700064;
	ErrorCode_ErrCreatureGenIsControlByOther = 700065;
	ErrorCode_ErrCreatureGenNotHaveControlPerm = 700066;
	ErrorCode_ErrCreatureReachMaxCount = 700067;
	ErrorCode_ErrCreatureConditionNotMatch = 700068;
	ErrorCode_ErrCreatureTimeIntervalError = 700069;
	ErrorCode_ErrCreatureCfgNotExist = 700070;
	ErrorCode_ErrCreatureEntityIsNotValidity = 700071;
	ErrorCode_ErrUniqueEntityCanNotCreateTwice = 700072;
	ErrorCode_ErrRoleNotHaveVisionSkill = 700073;
	ErrorCode_ErrHitGearEntityNotExist = 700074;
	ErrorCode_ErrHitGearHaveNotEntityConfig = 700075;
	ErrorCode_ErrHitGearHaveNotGearConfig = 700076;
	ErrorCode_ErrHitGearHaveNotGameplayConfig = 700077;
	ErrorCode_ErrHitGearHaveNotStepConfig = 700078;
	ErrorCode_ErrHitGearHaveEntityCommonTag = 700079;
	ErrorCode_ErrHitGearEntityFunctionTypeFail = 700080;
	ErrorCode_ErrHitGearAcceptStepFail = 700081;
	ErrorCode_ErrCreateInstanceNotContainEntrance = 700082;
	ErrorCode_ErrCreateInstanceHaveNotEntranceConfig = 700083;
	ErrorCode_ErrCreateInstanceEntranceLock = 700084;
	ErrorCode_ErrCreateInstanceHaveNotConfig = 700085;
	ErrorCode_ErrCreateInstanceEnterCountNotEnough = 700086;
	ErrorCode_ErrCreateInstanceConditionNotMatch = 700087;
	ErrorCode_ErrEnterCountRequestHaveNotConfig = 700088;
	ErrorCode_ErrUnlockInstanceEntranceHaveNotConfig = 700089;
	ErrorCode_ErrUnlockInstanceEntranceNotNeedUnlock = 700090;
	ErrorCode_ErrUnlockInstanceEntranceUnlocked = 700091;
	ErrorCode_ErrUnlockInstanceEntranceCondiitonNotMatch = 700092;
	ErrorCode_ErrEnterSceneGameplayRequestHaveNotConfig = 700093;
	ErrorCode_ErrEnterSceneGameplayRequestAccepted = 700094;
	ErrorCode_ErrEnterSceneGameplayRequestAcceptFail = 700095;
	ErrorCode_ErrStoryCharacterCreatFail = 700096;
	ErrorCode_ErrStoryCharacterCreatRepeat = 700097;
	ErrorCode_ErrStoryCharacterNotExist = 700098;
	ErrorCode_ErrCheckGearEntityNotExist = 700099;
	ErrorCode_ErrCheckGearType = 700100;
	ErrorCode_ErrCheckGearNotEntityConfig = 700101;
	ErrorCode_ErrCheckGearActive = 700102;
	ErrorCode_ErrCheckGearInactive = 700103;
	ErrorCode_ErrTargetGearGroupEntityNotExist = 700104;
	ErrorCode_ErrTargetGearGroupConfigNotExist = 700105;
	ErrorCode_ErrTargetGearEntityNotExist = 700106;
	ErrorCode_ErrTargetGearConfigNotExist = 700107;
	ErrorCode_ErrTargetGearStartTypeIsNotHit = 700108;
	ErrorCode_ErrTargetGearStartTypeIsNotAction = 700109;
	ErrorCode_ErrTargetGearStarted = 700110;
	ErrorCode_ErrTargetGearFinished = 700111;
	ErrorCode_ErrTargetGearIsNotInCreatedConsole = 700112;
	ErrorCode_ErrTargetGearGroupEntityIsNotAllInit = 700113;
	ErrorCode_ErrLanternCatNotExit = 700114;
	ErrorCode_ErrLanternCatConfNotExit = 700115;
	ErrorCode_ErrLanternCatType = 700116;
	ErrorCode_ErrLanternActived = 700117;
	ErrorCode_ErrLanternTargetNotExit = 700118;
	ErrorCode_ErrCaptureFail = 700119;
	ErrorCode_ErrDyingFail = 700120;
	ErrorCode_ErrThrowDamageEntityNotExit = 700121;
	ErrorCode_ErrThrowDamageCalculateId = 700122;
	ErrorCode_ErrThrowDamageIdNotExit = 700123;
	ErrorCode_ErrThrowDamageRoleIdConf = 700124;
	ErrorCode_ErrThrowDamageTypeNotExit = 700125;
	ErrorCode_InstIdNotExist = 700126;
	ErrorCode_ErrControlObjectEntityNotExist = 700127;
	ErrorCode_ErrControlObjectConfigNotExist = 700128;
	ErrorCode_ErrControlGroupConfigNotExist = 700129;
	ErrorCode_ErrControlObjectLocked = 700130;
	ErrorCode_ErrControlGroupLocked = 700131;
	ErrorCode_ErrControlCanNotPutTarget = 700132;
	ErrorCode_ErrControlTargetOccupied = 700133;
	ErrorCode_ErrControlObjectCatching = 700134;
	ErrorCode_ErrControlObjectNotCatching = 700135;
	ErrorCode_ErrControlObjectOtherCatching = 700136;
	ErrorCode_ErrEntityPositionIllegal = 700137;
	ErrorCode_ErrTreasureBoxNot = 700138;
	ErrorCode_ErrTreasureBoxNotInit = 700139;
	ErrorCode_ErrTreasureBoxNotConfig = 700140;
	ErrorCode_ErrTreasureBoxHadReward = 700141;
	ErrorCode_ErrTreasureBoxNotInteraction = 700142;
	ErrorCode_ErrTreasureBoxNotDropId = 700143;
	ErrorCode_ErrTreasureBoxDropErr = 700144;
	ErrorCode_ErrTreasureBoxNotExist = 700145;
	ErrorCode_ErrTreasureBoxInvalidTag = 700146;
	ErrorCode_ErrTreasureBoxHadTag = 700147;
	ErrorCode_ErrTreasureBoxNotTag = 700148;
	ErrorCode_ErrSneakGameNotOpen = 700149;
	ErrorCode_ErrSneakFinishRepeat = 700150;
	ErrorCode_ErrClientControlDamage = 700151;
	ErrorCode_ErrSceneDataSaveFail = 700152;
	ErrorCode_NotInFbInstance = 700153;
	ErrorCode_GMErrCanNotCreateWorldInst = 700154;
	ErrorCode_GMErrPlayerAlreadyInFbInst = 700155;
	ErrorCode_GMErrTagetInstanceIsNotMulti = 700156;
	ErrorCode_GMErrPlayerNotFound = 700157;
	ErrorCode_ErrEntityFlowTooMuch = 700158;
	ErrorCode_GmErrIsWalkable = 700159;
	ErrorCode_GmErrIsNotWalkable = 700160;
	ErrorCode_GmErrNoNavmesh = 700161;
	ErrorCode_ErrBigWorldInstIdNotExist = 700162;
	ErrorCode_ErrInstIdNotBigWorld = 700163;
	ErrorCode_ErrInInstanceNotSwitchBigWorld = 700164;
	ErrorCode_ErrAlreadyInThisBigWorld = 700165;
	ErrorCode_ErrNoPermissionGetTreasureBox = 700166;
	ErrorCode_ErrCreateBigWorldRepeat = 700167;
	ErrorCode_DebugErrInstIdNotExist = 700168;
	ErrorCode_ErrSceneAiStopped = 700169;
	ErrorCode_ErrGlobalEntityConfigNotExist = 700170;
	ErrorCode_ErrSceneFixedConfigNotExist = 700171;
	ErrorCode_ErrSceneFixedEntityNotFound = 700172;
	ErrorCode_ErrSceneGlobalEntityNotFount = 700173;
	ErrorCode_ErrEntityNotHaveVarComponent = 700174;
	ErrorCode_ErrEntityVarNameNotExist = 700175;
	ErrorCode_ErrEntityVarTypeError = 700176;
	ErrorCode_ErrEntityConfigNotOffer = 700177;
	ErrorCode_ErrConfigTypeNotGloabl = 700178;
	ErrorCode_ErrConfigTypeNotSceneFixed = 700179;
	ErrorCode_ErrConfigTypeNotCharacter = 700180;
	ErrorCode_ErrEntityPosNotOffer = 700181;
	ErrorCode_ErrSceneCellPosNotFount = 700182;
	ErrorCode_ErrEntityCongigNotInSleep = 700183;
	ErrorCode_ErrSummonCfgNotFound = 700184;
	ErrorCode_ErrSummonAddEntityFail = 700185;
	ErrorCode_ErrSummonMaxCount = 700186;
	ErrorCode_ErrSummonMaxGenerations = 700187;
	ErrorCode_ErrSummonEntityIdAlreadyExist = 700188;
	ErrorCode_ErrSummonerEntityType = 700189;
	ErrorCode_ErrEntityStatusIsNotDead = 700190;
	ErrorCode_ErrEntityNotHaveAttributeComp = 700191;
	ErrorCode_ErrEntityDbData = 700192;
	ErrorCode_ErrSceneFixedEntityCreated = 700193;
	ErrorCode_ErrInvalidAwakeEntityContext = 700194;
	ErrorCode_ErrTriggerComponentNotExist = 700195;
	ErrorCode_ErrTriggerComponentMaxCount = 700196;
	ErrorCode_ErrNotSelfRole = 700197;
	ErrorCode_ErrNoControlRights = 700198;
	ErrorCode_ErrEntityHaveNotEntityOwner = 700199;
	ErrorCode_ErrEntityOwnerNotMatch = 700200;
	ErrorCode_ErrCreateSceneFixedEntitiesEmpty = 700201;
	ErrorCode_ErrInteractComponentNotExist = 700202;
	ErrorCode_ErrInteractOptionIndexInvalid = 700203;
	ErrorCode_ErrOnlineInteractNoPermission = 700204;
	ErrorCode_ErrOnlineInteractNotOpen = 700205;
	ErrorCode_ErrAwakeEntityNoPermission = 700206;
	ErrorCode_ErrCannotUseSkillStatus = 700207;
	ErrorCode_ErrInteractOptionGuidInvalid = 700208;
	ErrorCode_ErrAddInteractOptionFail = 700209;
	ErrorCode_ErrRemoveInteractOptionFail = 700210;
	ErrorCode_ErrInteractOptionOwnerNotFound = 700211;
	ErrorCode_ErrSummonPlayerId = 700212;
	ErrorCode_ErrSummonTemplateCfgNotFound = 700213;
	ErrorCode_ErrAttributeComponent = 700214;
	ErrorCode_ErrAnimFsmComponent = 700215;
	ErrorCode_ErrStateComponent = 700216;
	ErrorCode_ErrBattleComponent = 700217;
	ErrorCode_ErrPartComponent = 700218;
	ErrorCode_ErrAiControlComponent = 700219;
	ErrorCode_ErrSummonsComponent = 700220;
	ErrorCode_ErrAiBlackboardComponent = 700221;
	ErrorCode_ErrSetVarInvalidContext = 700222;
	ErrorCode_ErrSetVarInvalidVarRefPb = 700223;
	ErrorCode_ErrSetVarGetRightVarDefineFail = 700224;
	ErrorCode_ErrSetVarSetLeftVarDefineFail = 700225;
	ErrorCode_ErrCalcVarInvalidContext = 700226;
	ErrorCode_ErrCalcVarInvalidVarRef = 700227;
	ErrorCode_ErrCalcVarGetVarDefineFail = 700228;
	ErrorCode_ErrCalcVarInvalidVarType = 700229;
	ErrorCode_ErrCalcVarInvalidOp = 700230;
	ErrorCode_ErrCalcVarSetResultFail = 700231;
	ErrorCode_ErrActionEntityNoExist = 700232;
	ErrorCode_ErrActionNoInteractConfig = 700233;
	ErrorCode_ErrActionIdNoExist = 700234;
	ErrorCode_ErrActionBtObjNoExist = 700235;
	ErrorCode_ErrActionNodeNoExist = 700236;
	ErrorCode_ErrActionNoChildQuest = 700237;
	ErrorCode_ErrActionParams = 700238;
	ErrorCode_ErrActionNotEntityContext = 700239;
	ErrorCode_ErrActionExecutorNotFind = 700240;
	ErrorCode_ErrActionSessionNotFind = 700241;
	ErrorCode_ErrActionCreateSessionIdFail = 700242;
	ErrorCode_ErrActionPathConvertFail = 700243;
	ErrorCode_ErrActionConfigNotFind = 700244;
	ErrorCode_ErrActionHaveNotHandler = 700245;
	ErrorCode_ErrActionInternalError = 700246;
	ErrorCode_ErrActionInvalidIndex = 700247;
	ErrorCode_ErrActionIsNotServer = 700248;
	ErrorCode_ErrActionRemainActionNotFinish = 700249;
	ErrorCode_ErrActionExecutorIsNotBlackbard = 700250;
	ErrorCode_ErrContinuityActionNotFinish = 700251;
	ErrorCode_ErrActionIsNotContinuity = 700252;
	ErrorCode_ErrResetLocationEntityNotExist = 700253;
	ErrorCode_ErrEntityPosAbnormalNotExists = 700254;
	ErrorCode_ErrGmRemoveEntityNotExists = 700255;
	ErrorCode_ErrDrownEntityNotExists = 700256;
	ErrorCode_ErrTargetGearNotExists = 700257;
	ErrorCode_ErrOutofBattleEntityNotExists = 700258;
	ErrorCode_ErrOrderAddBuffEntityNotExists = 700259;
	ErrorCode_ErrOrderRemoveBuffEntityNotExists = 700260;
	ErrorCode_ErrActivateBuffEntityNotExists = 700261;
	ErrorCode_ErrToughCalcExtraRatioChangeEntityNotExists = 700262;
	ErrorCode_ErrAdsorbEntityNotExist = 700263;
	ErrorCode_ErrAdsorbCondNotMeet = 700264;
	ErrorCode_ErrTimelineTrackMultiGameForbid = 700265;
	ErrorCode_ErrTimelineTraceEntityNotExists = 700266;
	ErrorCode_ErrTimelineTraceComponentNotExists = 700267;
	ErrorCode_ErrTimelineTraceGroupIndex = 700268;
	ErrorCode_ErrTimelineTraceFinish = 700269;
	ErrorCode_ErrTimelineTraceCondition = 700270;
	ErrorCode_ErrTimelineTraceTargetEmpty = 700271;
	ErrorCode_ErrTimelineTraceControl = 700272;
	ErrorCode_ErrTimelineTraceFinishCondition = 700273;
	ErrorCode_ErrTimelineTraceNotInControl = 700274;
	ErrorCode_ErrForbidEnterInstance = 700275;
	ErrorCode_ErrForbitEnterBigWorld = 700276;
	ErrorCode_ErrPrefabIncIdExist = 700277;
	ErrorCode_ErrPrefabIdExist = 700278;
	ErrorCode_ErrPrefabNumberIsZero = 700279;
	ErrorCode_ErrPrefabEntityIsExist = 700280;
	ErrorCode_ErrPrefabTreasureBox = 700281;
	ErrorCode_ErrPrefabActionCreate = 700282;
	ErrorCode_ErrPrefabVarNoExist = 700283;
	ErrorCode_ErrClientOnlyEntityCantCreate = 700284;
	ErrorCode_ErrTimelineTraceActionRun = 700285;
	ErrorCode_ErrGmActivateTeleportSceneNotExist = 700286;
	ErrorCode_ErrGmCreateInstSceneHasExist = 700287;
	ErrorCode_ErrVfxNpcNotExist = 700288;
	ErrorCode_ErrVfxNpcIsNotVfxNpc = 700289;
	ErrorCode_ErrBlackboardLimit = 700290;
	ErrorCode_ErrBlackboardArrayLimit = 700291;
	ErrorCode_ErrBlackboardStringLimit = 700292;
	ErrorCode_ErrReconnectGWGetGatePlayerFailed = 800000;
	ErrorCode_ErrGWReconnectGWInvalidPlayerState = 800001;
	ErrorCode_ErrGWReconnectGWVerifyTokenFailed = 800002;
	ErrorCode_ErrGWReconnectGWBackOnlineAsyncFailed = 800003;
	ErrorCode_ErrGWReconnectGWBackOnlineAsyncException = 800004;
	ErrorCode_ErrReconnectGwclientLatestSeqNoNotHit = 800005;
	ErrorCode_ErrGWReconnectConfirmGetPlayerFailed = 800006;
	ErrorCode_ErrAttrChangeHandleInvalidClientAction = 800007;
	ErrorCode_ErrThrowDamageReqGetStateComponentFailed = 800008;
	ErrorCode_ErrThrowDamageReqEntityIsAlreadyDead = 800009;
	ErrorCode_ErrAnimalDieRequestForceSetDieError = 800010;
	ErrorCode_ErrCollectEntityForceSetEntityDieError = 800011;
	ErrorCode_ErrMonsterBoomForceSetDieError = 800012;
	ErrorCode_ErrAttrChangeReqReplaceAttrListFailed = 800013;
	ErrorCode_ErrReconnectInvalidOperation = 800014;
	ErrorCode_ErrFavorRoleNotFound = 900000;
	ErrorCode_ErrFavorConfNotFound = 900001;
	ErrorCode_ErrFavorQuestNotFound = 900002;
	ErrorCode_ErrFavorLevelRewardLimit = 900003;
	ErrorCode_ErrFavorQuestAcceptLimit = 900004;
	ErrorCode_ErrFavorItemLocked = 900005;
	ErrorCode_ErrFavorItemHasUnLocked = 900006;
	ErrorCode_ErrElevatorEntityNotExit = 900007;
	ErrorCode_ErrElevatorConfigNotExit = 900008;
	ErrorCode_ErrElevatorLocked = 900009;
	ErrorCode_ErrElevatorIsNotReverse = 900010;
	ErrorCode_ErrElevatorIsNotForward = 900011;
	ErrorCode_ErrElevatorIsNotStart = 900012;
	ErrorCode_ErrElevatorIsNotEnd = 900013;
	ErrorCode_ErrElevatorFloorError = 900014;
	ErrorCode_ErrHostRefuse = 900015;
	ErrorCode_ErrHostOffline = 900016;
	ErrorCode_ErrHostHasOnline = 900017;
	ErrorCode_ErrHostPlayerMax = 900018;
	ErrorCode_ErrHostRefuseStrangers = 900019;
	ErrorCode_ErrHostForbidJoin = 900020;
	ErrorCode_ErrHostTemporarilyForbidJoin = 900021;
	ErrorCode_ErrSlaveInBlockList = 900022;
	ErrorCode_ErrExceedJoinLevelDiff = 900023;
	ErrorCode_ErrHostNotOpenOnlineFunc = 900024;
	ErrorCode_ErrHostInOtherPlayer = 900025;
	ErrorCode_ErrHostInForbidOnlineQuest = 900026;
	ErrorCode_ErrSlaveHasOnline = 900027;
	ErrorCode_ErrSlaveInForbidOnlineQuest = 900028;
	ErrorCode_ErrSlaveNotOpenOnlineFunc = 900029;
	ErrorCode_ErrSlaveApplyRepeated = 900030;
	ErrorCode_ErrSlaveTryApplySelf = 900031;
	ErrorCode_ErrLobbyTryQuerySelf = 900032;
	ErrorCode_ErrSlaveRequestExpired = 900033;
	ErrorCode_ErrEnterringOtherScene = 900034;
	ErrorCode_ErrWaitingOtherJoin = 900035;
	ErrorCode_ErrWaitListFull = 900036;
	ErrorCode_ErrAlreayInWaitEnterList = 900037;
	ErrorCode_ErrHostNotInBigWorld = 900038;
	ErrorCode_ErrPlayerNotInBigWorld = 900039;
	ErrorCode_ErrPlayerNotInWaitList = 900040;
	ErrorCode_ErrForbidOperaInMatching = 900041;
	ErrorCode_ErrLobbyNotFoundPlayer = 900042;
	ErrorCode_ErrRoleTrailCannotOnline = 900043;
	ErrorCode_ErrHostRoleTrail = 900044;
	ErrorCode_ErrInMatchingCanNotJoinOther = 900045;
	ErrorCode_ErrInMatchCanNotBeApply = 900046;
	ErrorCode_ErrInMatchCanNotAcceptApply = 900047;
	ErrorCode_ErrSlaveInFlow = 900048;
	ErrorCode_ErrHostInFlow = 900049;
	ErrorCode_ErrAchievementNotClinet = 900050;
	ErrorCode_ErrTriggerConditionNotMet = 900051;
	ErrorCode_ErrNpcTraceNotConf = 900052;
	ErrorCode_ErrBuffProducerConfNotFound = 900053;
	ErrorCode_ErrBuffProducerHasDone = 900054;
	ErrorCode_ErrBuffConsumerConfNotFound = 900055;
	ErrorCode_ErrBuffConsumerBuffNotFound = 900056;
	ErrorCode_ErrBuffConsumerEntityNotFound = 900057;
	ErrorCode_ErrItemPosInvaild = 900058;
	ErrorCode_ErrItemIdInvaild = 900059;
	ErrorCode_ErrRouletteFuncIdInvaild = 900060;
	ErrorCode_ErrStateIsRunning = 900061;
	ErrorCode_ErrBuffItemConfig = 1000000;
	ErrorCode_ErrBuffItemNotShare = 1000001;
	ErrorCode_ErrBuffItemShareRoleId = 1000002;
	ErrorCode_ErrBuffItemRoleIdNotExist = 1000003;
	ErrorCode_ErrBuffItemNotEnough = 1000004;
	ErrorCode_ErrBuffItemMultiUse = 1000005;
	ErrorCode_ErrBuffItemCdLimit = 1000006;
	ErrorCode_ErrBuffItemNumZero = 1000007;
	ErrorCode_ErrBuffItemNotPlayer = 1000008;
	ErrorCode_ErrSceneItemNotExit = 1000009;
	ErrorCode_ErrSceneItemType = 1000010;
	ErrorCode_ErrSceneItemOperate = 1000011;
	ErrorCode_ErrSceneItemState = 1000012;
	ErrorCode_ErrStateEntityNoExit = 1000013;
	ErrorCode_ErrStateEntityNotTagComp = 1000014;
	ErrorCode_ErrStateEntityTypeNotExit = 1000015;
	ErrorCode_ErrStateEntityStateNotExit = 1000016;
	ErrorCode_ErrStateEntityNotConfig = 1000017;
	ErrorCode_ErrStateEntityStateType = 1000018;
	ErrorCode_ErrStateEntityStateNoChange = 1000019;
	ErrorCode_ErrStateEntitySilent = 1000020;
	ErrorCode_ErrStateEntityComplete = 1000021;
	ErrorCode_ErrStateEntityLock = 1000022;
	ErrorCode_ErrStateEntityNotBorn = 1000023;
	ErrorCode_ErrStateNameNoExit = 1000024;
	ErrorCode_ErrStateInBorn = 1000025;
	ErrorCode_ErrStateCondition = 1000026;
	ErrorCode_ErrStateNotOwner = 1000027;
	ErrorCode_ErrChangeSelfStateObjNotEntity = 1000028;
	ErrorCode_ErrFoundationNotExists = 1000029;
	ErrorCode_ErrTeleControlNotExists = 1000030;
	ErrorCode_ErrFoundationNotComponent = 1000031;
	ErrorCode_ErrFoundationActived = 1000032;
	ErrorCode_ErrFoundationUnActived = 1000033;
	ErrorCode_ErrFoundationNotMatch = 1000034;
	ErrorCode_ErrFoundationNotInRange = 1000035;
	ErrorCode_ErrFoundationNotStateId = 1000036;
	ErrorCode_ErrGravityGearNotExists = 1000037;
	ErrorCode_ErrGravityGearNotConfig = 1000038;
	ErrorCode_ErrGravityGearForbidReset = 1000039;
	ErrorCode_ErrFollowTrackEntityNoExist = 1000040;
	ErrorCode_ErrFollowTrackNotComp = 1000041;
	ErrorCode_ErrFollowTrackNotFoundationId = 1000042;
	ErrorCode_ErrFollowTrackNotFoundation = 1000043;
	ErrorCode_ErrFollowTrackActiveed = 1000044;
	ErrorCode_ErrThrowPlayerNotExit = 1000045;
	ErrorCode_ErrAnimalEntityNotExist = 1000046;
	ErrorCode_ErrNotAnimalEntity = 1000047;
	ErrorCode_ErrSneakBtObjNotExist = 1000048;
	ErrorCode_ErrSneakNodeIdNotExist = 1000049;
	ErrorCode_ErrSneakNotFailedNode = 1000050;
	ErrorCode_ErrSneakNotTime = 1000051;
	ErrorCode_ErrSneakTime = 1000052;
	ErrorCode_ErrInSneak = 1000053;
	ErrorCode_ErrNotInSneak = 1000054;
	ErrorCode_ErrBeControlledEntityNotExist = 1000055;
	ErrorCode_ErrNotBeControlledEntity = 1000056;
	ErrorCode_ErrNotBeControlledPlayer = 1000057;
	ErrorCode_ErrNotBeControlledNotPlayer = 1000058;
	ErrorCode_ErrBeControlledShowEntityNotExist = 1000059;
	ErrorCode_ErrNotBeControlledShowEntity = 1000060;
	ErrorCode_ErrNotBeControlledShowPlayer = 1000061;
	ErrorCode_ErrBeControlledShowNoChange = 1000062;
	ErrorCode_ErrGravityGearCondition = 1000063;
	ErrorCode_ErrChairEntityNoExist = 1000064;
	ErrorCode_ErrChairSitDownErr = 1000065;
	ErrorCode_ErrChairEntity = 1000066;
	ErrorCode_ErrPlayerAlreadySit = 1000067;
	ErrorCode_ErrChairNotStateConfig = 1000068;
	ErrorCode_ErrSneakBtObjIncId = 1000069;
	ErrorCode_ErrTimelineMove = 1000070;
	ErrorCode_ErrBeControlledConfig = 1000071;
	ErrorCode_ErrBeControlledThrow = 1000072;
	ErrorCode_ErrBeControlledTimeNull = 1000073;
	ErrorCode_ErrTriggerEnterActionEffective = 1000074;
	ErrorCode_ErrTriggerLeaveActionEffective = 1000075;
	ErrorCode_ErrTriggerLastActionStateError = 1000076;
	ErrorCode_GuideGroupInfoIsNull = 1100000;
	ErrorCode_GuideStateError = 1100001;
	ErrorCode_GuideConfigNotFind = 1100002;
	ErrorCode_GuideNoEnough = 1100003;
	ErrorCode_GuideIsFinish = 1100004;
	ErrorCode_GuidePerIsNotFinish = 1100005;
	ErrorCode_GuideNoCondition = 1100006;
	ErrorCode_GuideNoCurGroup = 1100007;
	ErrorCode_GuideIsServerMonitor = 1100008;
	ErrorCode_GuideNoPending = 1100009;
	ErrorCode_GuideStepRepeat = 1100010;
	ErrorCode_GuideGroupNoClient = 1100011;
	ErrorCode_GuideGroupDoing = 1100012;
	ErrorCode_GuideGroupIsNotRepeat = 1100013;
	ErrorCode_GuideTutorialConfigNotFind = 1100014;
	ErrorCode_GuideTutorialIsUnlock = 1100015;
	ErrorCode_GuideTutorialNotUnlock = 1100016;
	ErrorCode_GuideTutorialIsReceive = 1100017;
	ErrorCode_GuideTutorialAwardConfigNotFind = 1100018;
	ErrorCode_GuideTutorialAwardError = 1100019;
	ErrorCode_GuideGroupIdNoMatch = 1100020;
	ErrorCode_ErrRequestTypeNotExist = 1100021;
	ErrorCode_ErrIllustratedEntryLock = 1100022;
	ErrorCode_ErrIllustratedEntryBanUnlock = 1100023;
	ErrorCode_ErrRequestTypeMax = 1100024;
	ErrorCode_AchievementEntryNotExist = 1100025;
	ErrorCode_AchievementEntryNotFinish = 1100026;
	ErrorCode_AchievementEntryIsReceive = 1100027;
	ErrorCode_AchievementEntryNoConfig = 1100028;
	ErrorCode_AchievementEntryNotOpen = 1100029;
	ErrorCode_AchievementGroupEntryNotExist = 1100030;
	ErrorCode_AchievementGroupEntryNotFinish = 1100031;
	ErrorCode_AchievementGroupEntryIsReceive = 1100032;
	ErrorCode_AchievementGroupEntryNoConfig = 1100033;
	ErrorCode_AchievementGroupEntryNotOpen = 1100034;
	ErrorCode_SilentAreaNotConfig = 1100035;
	ErrorCode_SilentAreaNotUnlock = 1100036;
	ErrorCode_SilentAreaNotFinish = 1100037;
	ErrorCode_SilentAreaReceive = 1100038;
	ErrorCode_AchievementEntryIsFinish = 1100039;
	ErrorCode_AchievementEntryNeedCondition = 1100040;
	ErrorCode_AchievementSceneNotFind = 1100041;
	ErrorCode_BirthdayIsSetting = 1100042;
	ErrorCode_BirthdayInValid = 1100043;
	ErrorCode_RoleShowListMaxCount = 1100044;
	ErrorCode_RoleShowListHasRepeatId = 1100045;
	ErrorCode_RoleShowListHasInValidId = 1100046;
	ErrorCode_CardShowListMaxCount = 1100047;
	ErrorCode_CardShowListHasRepeatId = 1100048;
	ErrorCode_CardShowListHasInValidId = 1100049;
	ErrorCode_CardRepeatSet = 1100050;
	ErrorCode_CardIsInValidId = 1100051;
	ErrorCode_CardIsRead = 1100052;
	ErrorCode_RoleShowListEmpty = 1100053;
	ErrorCode_SettingNotFind = 1100054;
	ErrorCode_RogueRoadConfigNotFind = 1100055;
	ErrorCode_RollRogueRoomError = 1100056;
	ErrorCode_RollRogueBuffError = 1100057;
	ErrorCode_GetRogueRoomIdsError = 1100058;
	ErrorCode_GetRoguePortalEntityNotFind = 1100059;
	ErrorCode_GetRoguePortalLocationNotFind = 1100060;
	ErrorCode_HttpTimeout = 1100061;
	ErrorCode_HttpResultUndefine = 1100062;
	ErrorCode_ConvGateTimeout = 1100063;
	ErrorCode_ProtoKeyTimeout = 1100064;
	ErrorCode_LoginReqTimeout = 1100065;
	ErrorCode_EnterGameTimeout = 1100066;
	ErrorCode_ReReconvReqTimeout = 1100067;
	ErrorCode_RecvSeqNoNotHit = 1100068;
	ErrorCode_AchievementFuncNotOpen = 1100069;
	ErrorCode_RoguelikeInstComponentNotFind = 1100070;
	ErrorCode_RogueCurRoomDataIsNull = 1100071;
	ErrorCode_LevelPlayComponentNotFind = 1100072;
	ErrorCode_OpenLevelPlayFail = 1100073;
	ErrorCode_CloseLevelPlayFail = 1100074;
	ErrorCode_RogueRoomConfigNotFind = 1100075;
	ErrorCode_RogueRoomTypeNotRight = 1100076;
	ErrorCode_RogueRoomTypeNotConfig = 1100077;
	ErrorCode_RogueRoomSubLevelNotFind = 1100078;
	ErrorCode_SelectNextRoomIsValid = 1100079;
	ErrorCode_RogueGainPackageFail = 1100080;
	ErrorCode_RogueGainListIsNull = 1100081;
	ErrorCode_RogueGainIdValid = 1100082;
	ErrorCode_QulityListCountNotRight = 1100083;
	ErrorCode_RandomResultCountNotRight = 1100084;
	ErrorCode_GuaranteeRogueBuffInValid = 1100085;
	ErrorCode_RoleBuffPoolNotFind = 1100086;
	ErrorCode_NotValidBuff = 1100087;
	ErrorCode_NotValidPhantom = 1100088;
	ErrorCode_RandomPhantomFail = 1100089;
	ErrorCode_NotValidRole = 1100090;
	ErrorCode_RandomRoleFail = 1100091;
	ErrorCode_RogueRoadNotFind = 1100092;
	ErrorCode_ResultCountNotMatch = 1100093;
	ErrorCode_InValidRoomCountNotMatch = 1100094;
	ErrorCode_GuaranteeRogueRoomInValid = 1100095;
	ErrorCode_InstIdNotMatchLevelPlayId = 1100096;
	ErrorCode_GetRoomBornPositionFail = 1100097;
	ErrorCode_RoguePortalDataNotClean = 1100098;
	ErrorCode_RoguePortalRoomDataNotFind = 1100099;
	ErrorCode_RogueSelectRoomFail = 1100100;
	ErrorCode_RogueProgressDataIsEmpty = 1100101;
	ErrorCode_RogueGainTypeIsValid = 1100102;
	ErrorCode_RougeNotOpen = 1100103;
	ErrorCode_RougeInstIdIsValid = 1100104;
	ErrorCode_RogueRoleListCountNotRight = 1100105;
	ErrorCode_RogueMainRoleConfigNotFind = 1100106;
	ErrorCode_RogueGainDataDictError = 1100107;
	ErrorCode_RogueDiscountedBuffConfigNotFind = 1100108;
	ErrorCode_RogueDiscountedRoomTypeConfigNotFind = 1100109;
	ErrorCode_RogueDiscountedShopConfigNotFind = 1100110;
	ErrorCode_RogueDiscountedCalculateFail = 1100111;
	ErrorCode_RogueMoneyNotEnough = 1100112;
	ErrorCode_RougeShopRefreshTimeEmpyt = 1100113;
	ErrorCode_RougeCurRoomNotFinish = 1100114;
	ErrorCode_PlayerDataRepairErrorDebug = 1100115;
	ErrorCode_PlayerDataRepairError = 1100116;
	ErrorCode_CreateCharacterReqTimeout = 1100117;
	ErrorCode_SignActivityNotOpen = 1100118;
	ErrorCode_SignActivityNoConfig = 1100119;
	ErrorCode_SignActivityIndexValid = 1100120;
	ErrorCode_SignActivityNoData = 1100121;
	ErrorCode_SignActivityStateNotRight = 1100122;
	ErrorCode_RogueSeasonDataNull = 1100123;
	ErrorCode_RogueSeasonConfigNotFind = 1100124;
	ErrorCode_RogueTokenConfigNotFind = 1100125;
	ErrorCode_RogueTokenStatusVaild = 1100126;
	ErrorCode_RogueSeasonRewardConfigNotFind = 1100127;
	ErrorCode_RogueSeasonRewardIsReceive = 1100128;
	ErrorCode_RougeSeasonPointNotEnough = 1100129;
	ErrorCode_RougeRoomDataError = 1100130;
	ErrorCode_RogueGainDataError = 1100131;
	ErrorCode_RogueRoleIdsError = 1100132;
	ErrorCode_RogueRogueRoomRouteError = 1100133;
	ErrorCode_RogueGetCurRoomLevelPlayError = 1100134;
	ErrorCode_RogueTalentTreeConfigNotFind = 1100135;
	ErrorCode_RogueTalentTreeConditionNotMet = 1100136;
	ErrorCode_RogueTalentTreePerNodeLock = 1100137;
	ErrorCode_RogueTalentTreeNodeMaxLevel = 1100138;
	ErrorCode_RogueTalentTreeConsumeNoEnough = 1100139;
	ErrorCode_RogueRoadRandomRoleBuffError = 1100140;
	ErrorCode_ActivityFuncNotOpen = 1100141;
	ErrorCode_RogueGuideInstNotSupport = 1100142;
	ErrorCode_ErrPayReceiptCannotRefundClose = 1100143;
	ErrorCode_ErrPayReceiptRefundCloseFail = 1100144;
	ErrorCode_PayRefundOverdueBan = 1100145;
	ErrorCode_UnknowChannelId = 1100146;
	ErrorCode_LoginServerNotFind = 1100147;
	ErrorCode_OldGameNodeLogoutFail = 1100148;
	ErrorCode_LoginHandleSwitchError = 1100149;
	ErrorCode_NoAvailableLoginService = 1100150;
	ErrorCode_ServerIsClosing = 1100151;
	ErrorCode_AddPlayerRecordFail = 1100152;
	ErrorCode_FindGatewayFail = 1100153;
	ErrorCode_CommonFightRolesInfoError = 1100154;
	ErrorCode_CurRoleEntityNotFind = 1100155;
	ErrorCode_ScenePlayerInfoNotFind = 1100156;
	ErrorCode_IncrAdviceVoteError = 1100157;
	ErrorCode_InsertAdviceError = 1100158;
	ErrorCode_UpdateAdviceError = 1100159;
	ErrorCode_DeleteAdviceError = 1100160;
	ErrorCode_EntityNoInWater = 1100161;
	ErrorCode_AttributeComponentNotFind = 1100162;
	ErrorCode_TryAddItemDataFail = 1100163;
	ErrorCode_ItemConfigTypeNotRight = 1100164;
	ErrorCode_ItemLogicNotFind = 1100165;
	ErrorCode_RemoveItemLogicNotFind = 1100166;
	ErrorCode_AddItemLogicNotFind = 1100167;
	ErrorCode_AddItemFail = 1100168;
	ErrorCode_UpdatePlayerARemarkFail = 1100169;
	ErrorCode_DeleteFriendApplyFail = 1100170;
	ErrorCode_DeleteFriendshipFail = 1100171;
	ErrorCode_WorldTeamIsNull = 1100172;
	ErrorCode_TeamCountNotRight = 1100173;
	ErrorCode_AddCalabashExpFail = 1100174;
	ErrorCode_SendRequestToSdkFail = 1100175;
	ErrorCode_DirtyWordErrorCode = 1100176;
	ErrorCode_HarvestActivityNotOpen = 1100177;
	ErrorCode_HarvestActivityPointReceived = 1100178;
	ErrorCode_HarvestActivityPointNotConfig = 1100179;
	ErrorCode_HarvestActivityPointNotEnough = 1100180;
	ErrorCode_HarvestActivityLevelNoData = 1100181;
	ErrorCode_HarvestActivityLevelReceived = 1100182;
	ErrorCode_HarvestActivityLevelNotConfig = 1100183;
	ErrorCode_HarvestActivityLevelNotEnough = 1100184;
	ErrorCode_HarvestActivityLevelDiffNotConfig = 1100185;
	ErrorCode_RoguelikeEventConfigNotFind = 1100186;
	ErrorCode_RoguelikeEventIndexError = 1100187;
	ErrorCode_RoguelikeInstConfigNotFind = 1100188;
	ErrorCode_RoguelikeMainRoleError = 1100189;
	ErrorCode_RoguelikeEventIsEmpty = 1100190;
	ErrorCode_RoguelikeEventRandomError = 1100191;
	ErrorCode_RoguelikeEventRandomEmpty = 1100192;
	ErrorCode_PhantomCollectActivityNotOpen = 1100193;
	ErrorCode_PhantomCollectActivitynNotConfig = 1100194;
	ErrorCode_PhantomCollectActivitynNoData = 1100195;
	ErrorCode_PhantomCollectActivityReceived = 1100196;
	ErrorCode_HarvestInstIdInValid = 1100197;
	ErrorCode_HarvestVarNotExist = 1100198;
	ErrorCode_HarvestResultCacheNotExist = 1100199;
	ErrorCode_HarvestInstNotOpen = 1100200;
	ErrorCode_HarvestActivityLimitDataNotFind = 1100201;
	ErrorCode_HarvestDiffConfigNotFind = 1100202;
	ErrorCode_HarvestActivityDiffConfigNotFind = 1100203;
	ErrorCode_ErrIllustratedConfigNotFind = 1100204;
	ErrorCode_CharacterAlreadyCreated = 1100205;
	ErrorCode_SdkHelperInternalError = 1100206;
	ErrorCode_GameServiceControllerInternalError = 1100207;
	ErrorCode_DoGetCacheInfoInternalError = 1100208;
	ErrorCode_DoGetCacheInfosInternalError = 1100209;
	ErrorCode_DeleteFriendLoadedInternalError = 1100210;
	ErrorCode_UpdateFriendRemarkInternalError = 1100211;
	ErrorCode_CheckApplyRequestInternalError = 1100212;
	ErrorCode_OnReLoginInternalError = 1100213;
	ErrorCode_CreateCharacterRequestInternalError = 1100214;
	ErrorCode_LoginRequestInternalError = 1100215;
	ErrorCode_LoginRequestInternalError2 = 1100216;
	ErrorCode_EnterGameRequestInternalError = 1100217;
	ErrorCode_ReconnectRequestInternalError = 1100218;
	ErrorCode_ReconnectRequestInternalError2 = 1100219;
	ErrorCode_SwitchNodeInternalError = 1100220;
	ErrorCode_InnerLoginInternalError = 1100221;
	ErrorCode_AccessTokenInternalError = 1100222;
	ErrorCode_CreateCharacterInternalError = 1100223;
	ErrorCode_RogueMainRoleChange = 1100224;
	ErrorCode_ErrChatNotFriendNorOnline = 1200000;
	ErrorCode_ErrChatContentFilterFailed = 1200001;
	ErrorCode_ErrChatLockState = 1200002;
	ErrorCode_ErrChatEmojiNotValid = 1200003;
	ErrorCode_ErrChatSendTooFast = 1200004;
	ErrorCode_ErrChatMuteNotValidId = 1200005;
	ErrorCode_ErrBanChatDefault = 1200006;
	ErrorCode_ErrRoleQuestFuncNotOpen = 1200007;
	ErrorCode_ErrRoleQuestMaxCount = 1200008;
	ErrorCode_ErrRoleQuestUnlockPointNotEnough = 1200009;
	ErrorCode_ErrDailyQuestNotFoundArea = 1200010;
	ErrorCode_ErrDailyQuestNotFoundInfluence = 1200011;
	ErrorCode_ErrDailyQuestRewardAlreadyGet = 1200012;
	ErrorCode_ErrDailyQuestDataError = 1200013;
	ErrorCode_ErrDailyQuestCantGetReward = 1200014;
	ErrorCode_ErrEntityBuffProducerStateError = 1200015;
	ErrorCode_ErrEntityBuffProducerNotFound = 1200016;
	ErrorCode_ErrVoiceRemainChangeRoleNotInFormation = 1200017;
	ErrorCode_ErrVoiceRemainChangeRoleNotAlive = 1200018;
	ErrorCode_ErrApplyEffectFail = 1300000;
	ErrorCode_ErrOutofBattleTargetNotMonster = 1300001;
	ErrorCode_ErrMonsterBoomEntityNotExists = 1300002;
	ErrorCode_ErrMonsterBoomNotMonster = 1300003;
	ErrorCode_ErrMonsterBoomIsDead = 1300004;
	ErrorCode_ErrAnimationStateSpecialFuncException = 1300005;
	ErrorCode_ErrPayConfigNotFound = 1400000;
	ErrorCode_ErrPayCreateReceiptFail = 1400001;
	ErrorCode_ErrPayReceiptNotFound = 1400002;
	ErrorCode_ErrPayReceiptPlayerIdUnMatch = 1400003;
	ErrorCode_ErrPayReceiptCannotDealClose = 1400004;
	ErrorCode_ErrPayReceiptDealCloseFail = 1400005;
	ErrorCode_ErrPayNotEnable = 1400006;
	ErrorCode_ErrPayDataChanged = 1400007;
	ErrorCode_ErrPayUpdateReceiptFail = 1400008;
	ErrorCode_ErrGachaConfigNotFound = 1400009;
	ErrorCode_ErrGachaRuleGroupConfigNotFound = 1400010;
	ErrorCode_ErrGachaRulesNotFound = 1400011;
	ErrorCode_ErrGachaTypeKnowns = 1400012;
	ErrorCode_ErrGachaDailyTimesLimit = 1400013;
	ErrorCode_ErrGachaTotalTimesLimit = 1400014;
	ErrorCode_ErrGachaDailyTotalTimesLimit = 1400015;
	ErrorCode_ErrGachaIsNotOpen = 1400016;
	ErrorCode_ErrGachaIsNotInOpenTime = 1400017;
	ErrorCode_ErrGachaFuncIsNotOpen = 1400018;
	ErrorCode_ErrItemExchageConfigNotFound = 1400019;
	ErrorCode_ErrItemExchageDailyTimesLimit = 1400020;
	ErrorCode_ErrItemExchangeTotalTimesLimit = 1400021;
	ErrorCode_ErrGachaLimitNotFound = 1400022;
	ErrorCode_ErrGachaLimitsEmpty = 1400023;
	ErrorCode_ErrTextServerTimeout = 1400024;
	ErrorCode_ErrTextServerResFail = 1400025;
	ErrorCode_ErrTextServerResEmpty = 1400026;
	ErrorCode_ErrTextServerResException = 1400027;
	ErrorCode_ErrItemExchageParamError = 1400028;
	ErrorCode_ErrBattlePassFuncIsNotOpen = 1400029;
	ErrorCode_ErrPayShopFuncIsNotOpen = 1400030;
	ErrorCode_ErrGachaPoolConfigNotFound = 1400031;
	ErrorCode_ErrGachaPoolIsNotOpen = 1400032;
	ErrorCode_ErrGachaPoolIsNotInOpenTime = 1400033;
	ErrorCode_ErrGachaPoolLimitNotFound = 1400034;
	ErrorCode_ErrGachaPoolNotBelongToGacha = 1400035;
	ErrorCode_ErrGachaUsePoolIdNotSet = 1400036;
	ErrorCode_ErrGachaTimesNonsupport = 1400037;
	ErrorCode_ErrGachaFrontRuleGroupNotFinish = 1400038;
	ErrorCode_ErrGachaRuleGroupFinish = 1400039;
	ErrorCode_ErrPayGiftBuyLimit = 1400040;
	ErrorCode_ErrPayGiftTypeUnknown = 1400041;
	ErrorCode_ErrPayGiftNotInSellTime = 1400042;
	ErrorCode_ErrBattlePassBuyLevelLimit = 1400043;
	ErrorCode_ErrBattlePassBuyLevelError = 1400044;
	ErrorCode_ErrJsFileNotFound = 1400045;
	ErrorCode_ErrInfoDisplayId = 1500000;
	ErrorCode_ErrItemAlreadyInCd = 1500001;
	ErrorCode_ErrCantFinAdventureConfig = 1500002;
	ErrorCode_ErrAdventureRewardReceived = 1500003;
	ErrorCode_ErrAdventureTaskCache = 1500004;
	ErrorCode_ErrAdventureState = 1500005;
	ErrorCode_ErrAdventureRewardOrder = 1500006;
	ErrorCode_ErrAdventureChapterState = 1500007;
	ErrorCode_ErrCantDetectRepeat = 1500008;
	ErrorCode_ErrNotInCurrentFollowList = 1500009;
	ErrorCode_ErrCantDetectOtherDetectionType = 1500010;
	ErrorCode_ErrNotSelectCurrentDetectionId = 1500011;
	ErrorCode_ErrDetectionConfigNotFound = 1500012;
	ErrorCode_ErrDetectionListCantBeEmpty = 1500013;
	ErrorCode_ErrCantFindAnyDetectionTarget = 1500014;
	ErrorCode_ErrCantFindTurntableComponentEntity = 1500015;
	ErrorCode_ErrHaveNoTurntableControlComponent = 1500016;
	ErrorCode_ErrCantFindLevitationMagnetComponentEntity = 1500017;
	ErrorCode_ErrHaveNoLevitaionMagnetComponent = 1500018;
	ErrorCode_ErrCantFindBoardEntity = 1500019;
	ErrorCode_ErrCantFindPlacementEntity = 1500020;
	ErrorCode_ErrHaveNoPlacementComponent = 1500021;
	ErrorCode_ErrCantFindBoardEntityComponent = 1500022;
	ErrorCode_ErrBoardHaveNoAnyPlacement = 1500023;
	ErrorCode_ErrBoardNotActiveAllGrid = 1500024;
	ErrorCode_ErrNeedBeControlledBefore = 1500025;
	ErrorCode_ErrPlaceFailOfAlreadyOnBoard = 1500026;
	ErrorCode_ErrInvalidBoardPosition = 1500027;
	ErrorCode_ErrNeedRemoveControlRelation = 1500028;
	ErrorCode_ErrNotOccupyOnBoard = 1500029;
	ErrorCode_ErrHaveNoFillRule = 1500030;
	ErrorCode_ErrGridPosAlreadyOccupied = 1500031;
	ErrorCode_ErrHaveNoJigsawFoundationConfig = 1500032;
	ErrorCode_ErrInvalidGridPos = 1500033;
	ErrorCode_ErrGridPosAlreadyActive = 1500034;
	ErrorCode_ErrCantPlaceItemOnBoard = 1500035;
	ErrorCode_ErrNeedJigsawFoundationComponentWhenBeControlled = 1500036;
	ErrorCode_ErrHaveNoBoardComponentConfig = 1500037;
	ErrorCode_ErrNeedJigsawItemComponentWhenBeControlled = 1500038;
	ErrorCode_ErrCantFindOriginBoardEntity = 1500039;
	ErrorCode_ErrDistanceNotInRangeBetweenEntity = 1500040;
	ErrorCode_ErrJigsawFoundationIsAlreadySilent = 1500041;
	ErrorCode_ErrCrystalEntityNotFound = 1500042;
	ErrorCode_ErrGachaBoardEntityNotFound = 1500043;
	ErrorCode_ErrNotCrystalEntity = 1500044;
	ErrorCode_ErrNotGachaFoundationEntity = 1500045;
	ErrorCode_ErrGachaHoleIsFull = 1500046;
	ErrorCode_ErrJigsawItemSilent = 1500047;
	ErrorCode_ErrThrowDamageConfigNotExists = 1500048;
	ErrorCode_ErrThrowDamageComponetNotExists = 1500049;
	ErrorCode_ErrEggNotMatchEggFoundation = 1500050;
	ErrorCode_ProgressBarEntityNotFound = 1500051;
	ErrorCode_NotProgressBarEntity = 1500052;
	ErrorCode_ProgressBarIsSilent = 1500053;
	ErrorCode_ScenePlayerInfoNotFound = 1500054;
	ErrorCode_PlayerNotInAnyScene = 1500055;
	ErrorCode_TeleportNotInValidDistance = 1500056;
	ErrorCode_AddMapMarkInfoLackOfTeleportParam = 1500057;
	ErrorCode_TemporaryTeleportNotExists = 1500058;
	ErrorCode_ErrNotHostPlayer = 1500059;
	ErrorCode_ErrMarkIdNotExists = 1500060;
	ErrorCode_ErrCantUpdateTemporaryTeleportMarkInfo = 1500061;
	ErrorCode_NotHostCantAddTemporaty = 1500062;
	ErrorCode_TemporaryTeleportPosIsNotWalkable = 1500063;
	ErrorCode_BadTemporaryTeleportConfig = 1500064;
	ErrorCode_HaveNoTemporaryTeleportComponent = 1500065;
	ErrorCode_ErrCantDetectAtInvalidPoint = 1500066;
	ErrorCode_ErrNotDetectionTreasureBoxBefore = 1500067;
	ErrorCode_ErrJigsawFoundationIsCompleteCantModifyGridState = 1500068;
	ErrorCode_GridIsActiveCantSwitchState = 1500069;
	ErrorCode_GridIsOccupiedCantSwitchState = 1500070;
	ErrorCode_ErrHaveNoBaseInfoComponent = 1500071;
	ErrorCode_ErrHaveNoParentEntity = 1500072;
	ErrorCode_NotRelationEntity = 1500073;
	ErrorCode_ErrLevelPlayNotRunning = 1500074;
	ErrorCode_ErrStateCantChangeWhenLifeCycleDestroy = 1500075;
	ErrorCode_ErrRangeEntityIdNotFoundWhenForbidTempTeleport = 1500076;
	ErrorCode_TemporaryTeleportIsForbidden = 1500077;
	ErrorCode_ErrGravityGearIsComplete = 1500078;
	ErrorCode_ErrInvalidRoleWhenUpdatePassiveSkill = 1500079;
	ErrorCode_ErrInvalidRolePassiveSkillId = 1500080;
	ErrorCode_ErrPassiveSkillNotAddBuff = 1500081;
	ErrorCode_ErrPassiveSkillCantSpecifyBuff = 1500082;
	ErrorCode_ErrPassiveSkillAddBuffFail = 1500083;
	ErrorCode_ErrPassiveSkillAddBulletFail = 1500084;
	ErrorCode_ErrBuffCreatePassiveSkillFail = 1500085;
	ErrorCode_ErrInvalidPreContext = 1500086;
	ErrorCode_ErrBadPassiveSkillId = 1500087;
	ErrorCode_ErrPassiveSkillComponentNotFound = 1500088;
	ErrorCode_ErrRepeatePassiveSkill = 1500089;
	ErrorCode_ErrBadPassiveSkillTriggerType = 1500090;
	ErrorCode_ErrAddPassiveSkillFailOfEntityNotFound = 1500091;
	ErrorCode_ErrEntityNotClientControlWhenAddPassiveSkill = 1500092;
	ErrorCode_ErrEntityNotClientControlWhenRemovePassiveSkill = 1500093;
	ErrorCode_ErrPassiveSkillNotFoundWhenRemovePassiveSkill = 1500094;
	ErrorCode_ErrRepeatedBattleContext = 1500095;
	ErrorCode_ErrPassiveSkillAddSkillFail = 1500096;
	ErrorCode_ErrCombatSendPackAbnormal = 1500097;
	ErrorCode_ErrCombatSkillGAHandleGetEntityFailed = 1600000;
	ErrorCode_ErrCombatMaterialHandleGetEntityFailed = 1600001;
	ErrorCode_ErrCombatParticleHandleGetEntityFailed = 1600002;
	ErrorCode_ErrCombatPartLifeChangeEntityNotExisted = 1600003;
	ErrorCode_ErrCombatCreateBulletTargetNotExisted = 1600004;
	ErrorCode_ErrCombatDeleteBulletTargetNotExisted = 1600005;
	ErrorCode_ErrCombatDeleteBulletGetEntityFailed = 1600006;
	ErrorCode_ErrCombatBulletTargetNoExist = 1600007;
	ErrorCode_ErrPartEntityNotExisted = 1600008;
	ErrorCode_ErrNoAiControlRights = 1600009;
	ErrorCode_ErrAiHateComponent = 1600010;
	ErrorCode_ErrSummonerPlayerControl = 1600011;
	ErrorCode_ErrConfDamageNotFound = 1600012;
	ErrorCode_ErrProcessDamageFailed = 1600013;
	ErrorCode_ErrInjuryFreeLandingTag = 1600014;
	ErrorCode_ErrNotFindActiveGameplayEffect = 1600015;
	ErrorCode_NotClientControlBuff = 1600016;
	ErrorCode_ErrBuffNoEffectConf = 1600017;
	ErrorCode_ErrBuffCannotCreateBullet = 1600018;
	ErrorCode_ErrBuffCannotCreateBuff = 1600019;
	ErrorCode_ErrNoBuffConf = 1600020;
	ErrorCode_ErrStoppedAi = 1600021;
	ErrorCode_ErrEntityIsNotAlive = 1600022;
	ErrorCode_ErrSummonCannotSwitchAiControl = 1600023;
	ErrorCode_ErrAiControlNotChange = 1600024;
	ErrorCode_ErrPlayerCannotControlEntity = 1600025;
	ErrorCode_ErrNotFoundBuffEffect = 1600026;
	ErrorCode_ErrBuffEffectAuthority = 1600027;
	ErrorCode_ErrEntityFsmMachineNotExist = 1700000;
	ErrorCode_ErrEntityFsmStateIncorrect = 1700001;
	ErrorCode_ErrIsNotAiControler = 1700002;
	ErrorCode_ErrIEntityFsmCantTransit = 1700003;
	ErrorCode_ErrIEntityFsmTransitCondition = 1700004;
	ErrorCode_ErrIEntityFsmTransitToState = 1700005;
	ErrorCode_ErrIEntityFsmConfirmNotExist = 1700006;
	ErrorCode_ErrIEntityFsmConfirmNotWait = 1700007;
	ErrorCode_ErrITest = 1700008;
	ErrorCode_ErrITest1 = 1700009;
	ErrorCode_ErrITest2 = 1700010;
	ErrorCode_ErrIEntityFsmCondCantPass = 1700011;
	ErrorCode_ErrIEntityFsmActionParamType = 1700012;
	ErrorCode_ErrIEntityFsmActionParam = 1700013;
	ErrorCode_ErrIEntityFsmActionExecuted = 1700014;
	ErrorCode_ErrIEntityFsmActionNotMatchState = 1700015;
	ErrorCode_ErrSkillNotExecuting = 1700016;
	ErrorCode_ErrExecuteSkillNotMatch = 1700017;
	ErrorCode_ErrBlueprintPinNotSupport = 1700018;
	ErrorCode_ErrBlueprintPinNotMontage = 1700019;
	ErrorCode_ErrBlueprintPinMontageIndex = 1700020;
	ErrorCode_ErrConfSkillNotExist = 1700021;
	ErrorCode_ErrSkillGANotExist = 1700022;
	ErrorCode_ErrSkillGAHaveNoBuff = 1700023;
	ErrorCode_ErrSkillGAHaveNoBuffId = 1700024;
	ErrorCode_ErrSkillGAHaveNoBullet = 1700025;
	ErrorCode_ErrSkillGAHaveNoBulletId = 1700026;
	ErrorCode_ErrMontageNotMatchSkill = 1700027;
	ErrorCode_ErrMontageIndexError = 1700028;
	ErrorCode_ErrVisiionSkillNotEquip = 1700029;
	ErrorCode_ErrSkillCD = 1700030;
	ErrorCode_ErrHaveNoBattleContext = 1700031;
	ErrorCode_ErrContextFsmActionOnce = 1700032;
	ErrorCode_ErrPlayMontageButNoSkill = 1700033;
	ErrorCode_ErrMontageNotExist = 1700034;
	ErrorCode_ErrMontageNotContainBuff = 1700035;
	ErrorCode_ErrMontageNotContainBullet = 1700036;
	ErrorCode_ErrMontageCantBring = 1700037;
	ErrorCode_ErrSkillInfoParamError = 1700038;
	ErrorCode_ErrNoWorldTeam = 1800000;
	ErrorCode_ErrWorldTeamNoMember = 1800001;
	ErrorCode_ErrNoHostIs = 1800002;
	ErrorCode_ErrNoInstId = 1800003;
	ErrorCode_ErrNoTeamInfo = 1800004;
	ErrorCode_ErrHostNoTeamInfo = 1800005;
	ErrorCode_ErrHasInMatchTeam = 1800006;
	ErrorCode_ErrNotInMatchTeam = 1800007;
	ErrorCode_ErrHostIsParam = 1800008;
	ErrorCode_ErrMatchModeIParam = 1800009;
	ErrorCode_ErrMatchTeamFull = 1800010;
	ErrorCode_ErrLocalTeamCanNotOpt = 1800011;
	ErrorCode_ErrHostInLocalTeam = 1800012;
	ErrorCode_ErrNoMatchNodeId = 1800013;
	ErrorCode_ErrPlayerSceneIsNull = 1800014;
	ErrorCode_ErrPlayerSceneRolesNull = 1800015;
	ErrorCode_ErrInvalidMatchState = 1800016;
	ErrorCode_ErrRepeatedMatchState = 1800017;
	ErrorCode_ErrApplyrPlayerInMatchNotEnterMatchTeam = 1800018;
	ErrorCode_ErrOtherVersionLowNoOperate = 1800019;
	ErrorCode_ErrPlayerVersionLowNeedUpdate = 1800020;
	ErrorCode_ErrMultiGameModeNoWorldLevelDown = 1800021;
	ErrorCode_ErrMultiGameModeNoWorldLevelRegain = 1800022;
	ErrorCode_ErrOtherHasOnline = 1800023;
	ErrorCode_SwitchRoleNotInCurrentFormation = 1800024;
	ErrorCode_ErrNoChangeRoles = 1800025;
	ErrorCode_ErrExploreSkillPullGiantMultiGame = 1800026;
	ErrorCode_ErrExploreSkillPullGiantNotExist = 1800027;
	ErrorCode_ErrHttpRpcParam = 1800028;
	ErrorCode_ErrPlayerNotInGameNode = 1800029;
	ErrorCode_ErrApplyJoinPlayerCurRoleIsDead = 1800030;
	ErrorCode_ErrPlayerCurRoleIsDeadNoJoin = 1800031;
	ErrorCode_ErrPlayerCurRoleIsDead = 1800032;
	ErrorCode_ErrSwitchMultiverse = 1800033;
	ErrorCode_ErrSwitchNode = 1800034;
	ErrorCode_ErrMatchConfirmPlayerDead = 1800035;
	ErrorCode_ErrCheckPublicResourceVersionLower = 1800036;
	ErrorCode_ErrCheckPublicResourceVersionHigher = 1800037;
	ErrorCode_ErrCheckPublicResourceClientVersionErr = 1800038;
	ErrorCode_ErrCheckPublicResourceServerVersionErr = 1800039;
	ErrorCode_ErrCheckPublicResourceClientVersionParamErr = 1800040;
	ErrorCode_ErrCheckClientVersionNeedUpdate = 1800041;
	ErrorCode_ErrBranchNameNotMatch = 1800042;
	ErrorCode_ErrCalabashLevelRequest = 1900000;
	ErrorCode_ErrCalabashLevelRewardDone = 1900001;
	ErrorCode_ErrCalabashLevelConfig = 1900002;
	ErrorCode_ErrSkillTreeActiveConsume = 1900003;
	ErrorCode_ErrLoadFriendData = 1900004;
	ErrorCode_ErrNoLoadPrivateChatData = 1900005;
	ErrorCode_ErrNotInWolrd = 1900006;
	ErrorCode_ErrNotInGround = 1900007;
	ErrorCode_ErrInFighting = 1900008;
	ErrorCode_ErrNotHaveCountryAccess = 1900009;
	ErrorCode_ErrSkillIsEffect = 1900010;
	ErrorCode_ErrNoSoundBox = 1900011;
	ErrorCode_ErrConsumeNotEnough = 1900012;
	ErrorCode_ErrExploreSkillCountLimit = 1900013;
	ErrorCode_ErrLegalAreaNoTreasureBox = 1900014;
	ErrorCode_ErrTreasureBoxAllActive = 1900015;
	ErrorCode_ExploreProgressNoCountry = 1900016;
	ErrorCode_ExploreProgressNoScoreCfg = 1900017;
	ErrorCode_ExploreProgressLackProgress = 1900018;
	ErrorCode_ExploreProgressRewardDone = 1900019;
	ErrorCode_ExploreProgressNoArea = 1900020;
	ErrorCode_ExploreToolNotConfirm = 1900021;
	ErrorCode_ExploreToolNotOpen = 1900022;
	ErrorCode_ErrTreasureBoxPlaceFail = 1900023;
	ErrorCode_ErrTreasureBoxData = 1900024;
	ErrorCode_ErrPayShopBuyCondition = 1900025;
	ErrorCode_ErrGatherActivityData = 1900026;
	ErrorCode_ErrGatherTaskNoFinish = 1900027;
	ErrorCode_ErrHadGatherReward = 1900028;
	ErrorCode_ErrHadGetSharedReward = 1900029;
	ErrorCode_ErrSharedPlat = 1900030;
	ErrorCode_ErrTowerTargetComplete = 1900031;
	ErrorCode_ErrTowerGuideRewardHad = 1900032;
	ErrorCode_ErrTowerGuideNoOpen = 1900033;
	ErrorCode_ErrTowerGuideConfig = 1900034;
	ErrorCode_ErrNewBieCourseConfig = 1900035;
	ErrorCode_ErrNewBieCourseRewardHad = 1900036;
	ErrorCode_ErrNewBieCourseLevel = 1900037;
	ErrorCode_ErrDetectionTargetSilence = 1900038;
	ErrorCode_ErrRoleTrialNotInit = 1900039;
	ErrorCode_ErrRoleTrialNoFinish = 1900040;
	ErrorCode_ErrRoleTrialReward = 1900041;
	ErrorCode_ErrRoleTrialRewardDone = 1900042;
	ErrorCode_ErrAdventureTaskReward = 1900043;
	ErrorCode_ErrChapterReward = 1900044;
	ErrorCode_ErrSilentFirstPassStatus = 1900045;
	ErrorCode_ErrSilentFirstPassReward = 1900046;
	ErrorCode_ErrPayShopEchoRole = 1900047;
	ErrorCode_ErrPayShopEchoItemOver = 1900048;
	ErrorCode_ErrDailyAdventureActivityInit = 1900049;
	ErrorCode_ErrDailyAdventureActivityPtEnough = 1900050;
	ErrorCode_ErrDailyAdventureActivityRewardDone = 1900051;
	ErrorCode_ErrDailyAdventureActivityRewardTake = 1900052;
	ErrorCode_ErrDailyAdventureActivityTaskDone = 1900053;
	ErrorCode_ErrRoleTrialTimeOut = 1900054;
	ErrorCode_ErrFriendRemarkNull = 1900055;
	ErrorCode_ErrDirtyWordDeserialize = 1900056;
	ErrorCode_ErrDoCommonRewardConfigError = 2000000;
	ErrorCode_InstPlayNotSettle = 2000001;
	ErrorCode_InstPlayNotFinishExecute = 2000002;
	ErrorCode_ErrResetItemEntityNotContain = 2000003;
	ErrorCode_InstPlayExchangeRewardNotExist = 2000004;
	ErrorCode_MapConfigNull = 2000005;
	ErrorCode_MapConfigError = 2000006;
	ErrorCode_InstPlayComponentNotExist = 2000007;
	ErrorCode_InstTeleportResetPlayerDead = 2000008;
	ErrorCode_DrownEndTeleportInBigWorld = 2000009;
	ErrorCode_ErrFightTrialRoleRoldIdsError = 2000010;
	ErrorCode_ErrFightTrialRoleFromationError = 2000011;
	ErrorCode_ErrInstSaveFail = 2000012;
	ErrorCode_ErrActiveFoundationControlPlayerError = 2000013;
	ErrorCode_ErrActiveFoundationOccupation = 2000014;
	ErrorCode_ErrSingleInstanceCanNotOnline = 2000015;
	ErrorCode_ErrInstanceRechallengeLimit = 2000016;
	ErrorCode_ErrLevelPlayChallengeFail = 2000017;
	ErrorCode_ErrChangeFightState = 2100000;
	ErrorCode_ErrAddFragileFail = 2100001;
	ErrorCode_ErrGmkillEntityNotValid = 2200000;
	ErrorCode_ErrSplineConfigNotExist = 2200001;
	ErrorCode_NotQaAccountWithHIddenServer = 2300000;
	ErrorCode_DisabledFuncInHIddenServer = 2300001;
	ErrorCode_ErrActionExecutorFinishConditionNotSport = 2400000;
}

message DErrorResult {
	int32 ErrorCode = 1;
	repeated string ErrorParams = 2;
}

message ActionNotify {
	int32 PlayerId = 243;
	int32 IncId = 252;
	GameCtxPb GameCtx = 138;
	int32 TotalCount = 1;
	int32 StartIndex = 186;
	int32 EndIndex = 22;
}

message ActionErrorCodeNotify {
	int32 IncId = 134;
	GameCtxPb GameCtx = 219;
	int32 Index = 199;
	int32 Code = 189;
}

message ActionFinishRequest {
	int32 PlayerId = 67;
	int32 IncId = 139;
	int32 StartIndex = 90;
	string ErrorMsg = 213;
}

message ActionFinishResponse {
	int32 Code = 130;
}

message GmLevelActionRequest {
	string JsonStr = 215;
}

message GmLevelActionResponse {
	int32 Code = 75;
}

message OperationRestrictionNotify {
	string Params = 186;
	bool IsNull = 150;
}

enum GameCtxType {
	GameCtxType_BehaviorTree = 0;
	GameCtxType_Entity = 1;
	GameCtxType_NormalInteract = 2;
	GameCtxType_DynamicInteract = 3;
	GameCtxType_RandomInteract = 4;
	GameCtxType_EntityStateChangeAction = 5;
	GameCtxType_EntityGroupAction = 6;
	GameCtxType_EntityTrigger = 7;
	GameCtxType_EntityLeaveTrigger = 8;
	GameCtxType_EntityDestructible = 9;
	GameCtxType_EntityTimelineTrack = 10;
	GameCtxType_LevelPlayOpenAction = 11;
	GameCtxType_LevelPlayRewardAction = 12;
	GameCtxType_QuestActiveAction = 13;
	GameCtxType_QuestAcceptAction = 14;
	GameCtxType_QuestFinishAction = 15;
	GameCtxType_ChildQuestNodeEnterAction = 16;
	GameCtxType_ChildQuestNodeFinishAction = 17;
	GameCtxType_SuccessNodeAction = 18;
	GameCtxType_FailedNodeAction = 19;
	GameCtxType_CompositionEnterAction = 20;
	GameCtxType_EntityConditionListeningAction = 21;
	GameCtxType_PlayFlowChildQuestNode = 22;
	GameCtxType_HandInItemChildQuestNode = 23;
	GameCtxType_DoInteractChildQuestNode = 24;
	GameCtxType_ActionGroupNodeAction = 25;
	GameCtxType_ExploreSkillPullGiantAction = 26;
	GameCtxType_LevelPlay = 27;
	GameCtxType_GmLevelAction = 28;
	GameCtxType_GmPlayFlow = 29;
	GameCtxType_SceneItemLifeCycleComponentCreate = 30;
	GameCtxType_SceneItemLifeCycleComponentDetroy = 31;
	GameCtxType_GameCtxGm = 32;
	GameCtxType_FlowActionCtx = 33;
	GameCtxType_DailyQuestTerminateAction = 34;
	GameCtxType_ChildQuestNodeFixAction = 35;
	GameCtxType_ConditionNodeFixAction = 36;
	GameCtxType_EntityFixAction = 37;
	GameCtxType_ConditionNode = 38;
}

message GameCtxPb {
	oneof CtxInfo {
		BehaviorTreeCtxPb BehaviorTree = 2;
		NormalInteractCtxPb NormalInteract = 4;
		RandomInteractCtxPb RandomInteract = 6;
		EntityGroupActionCtxPb EntityGroupAction = 8;
		EntityLeaveTriggerCtxPb EntityLeaveTriggerCtx = 10;
		EntityTimelineTrackCtxPb EntityTimelineTrack = 12;
		LevelPlayRewardActionCtxPb LevelPlayRewardAction = 14;
		QuestAcceptActionCtxPb QuestAcceptAction = 16;
		ChildQuestNodeEnterActionCtxPb ChildQuestNodeEnterAction = 18;
		SuccessNodeActionCtxPb SuccessNodeAction = 20;
		CompositionEnterActionCtxPb CompositionEnterAction = 22;
		PlayFlowChildQuestNodeCtxPb PlayFlowChildQuestNode = 24;
		DoInteractChildQuestNodeCtxPb DoInteractChildQuestNode = 26;
		ExploreSkillPullGiantCtxPb ExploreSkillPullGiantAction = 28;
		GmLevelActionCtxPb GmLevelAction = 30;
		SceneItemLifeCycleComponentDestroyCtxPb LifeCycleDestroyAction = 32;
		DailyQuestTerminateActionCtxPb DailyQuestTerminateAction = 34;
	}

	int32 CtxType = 1;
	EntityCtxPb Entity = 3;
	DynamicInteractCtxPb DynamicInteract = 5;
	StateChangeActionCtxPb StateChangeAction = 7;
	EntityTriggerCtxPb EntityTrigger = 9;
	EntityDestructibleCtxPb EntityDestructible = 11;
	LevelPlayOpenActionCtxPb LevelPlayOpenAction = 13;
	QuestActiveActionCtxPb QuestActiveAction = 15;
	QuestFinishActionCtxPb QuestFinishAction = 17;
	ChildQuestNodeFinishActionCtxPb ChildQuestNodeFinishAction = 19;
	FailedNodeActionCtxPb FailedNodeAction = 21;
	EntityConditionListeningActionCtxPb EntityConditionListeningAction = 23;
	HandInItemChildQuestNodeCtxPb HandInItemChildQuestNode = 25;
	ActionGroupNodeActionCtxPb ActionGroupNodeAction = 27;
	LevelPlayCtxPb LevelPlay = 29;
	SceneItemLifeCycleComponentCreateCtxPb LifeCycleCreateAction = 31;
	FlowActionCtxPb FlowAction = 33;
}

message EntityCtxPb {
	int32 ConfigId = 1;
	int64 IncId = 2;
}

message NormalInteractCtxPb {
	EntityCtxPb EntityCtx = 1;
	int32 OptionIndex = 2;
}

message DynamicInteractCtxPb {
	EntityCtxPb EntityCtx = 1;
	string OptionGuid = 2;
}

message RandomInteractCtxPb {
	EntityCtxPb EntityCtx = 1;
	int32 OptionIndex = 2;
}

message StateChangeActionCtxPb {
	EntityCtxPb EntityCtx = 1;
	int32 StateIndex = 2;
}

message EntityGroupActionCtxPb {
	EntityCtxPb EntityCtx = 1;
	int32 TriggerIndex = 2;
	bool IsMatch = 3;
}

message EntityTriggerCtxPb {
	EntityCtxPb EntityCtx = 1;
	int64 TriggerEntityIncId = 2;
}

message EntityLeaveTriggerCtxPb {
	EntityCtxPb EntityCtx = 1;
	int64 TriggerEntityIncId = 2;
}

message EntityDestructibleCtxPb {
	EntityCtxPb EntityCtx = 1;
}

enum EntityTimelineEventType {
	EntityTimelineEventType_LeftIn = 0;
	EntityTimelineEventType_LeftOut = 1;
	EntityTimelineEventType_RightIn = 2;
	EntityTimelineEventType_RightOut = 3;
}

message EntityTimelineTrackCtxPb {
	EntityCtxPb EntityCtx = 1;
	int32 GroupIndex = 2;
	int32 ControlPoint = 3;
	int32 EventType = 4;
}

message EntityConditionListeningActionCtxPb {
	EntityCtxPb EntityCtx = 1;
	int32 EntityConditionListeningIndex = 2;
}

message ExploreSkillPullGiantCtxPb {
	EntityCtxPb EntityCtx = 1;
}

message GmLevelActionCtxPb {
	string JsonStr = 1;
}

message SceneItemLifeCycleComponentCreateCtxPb {
	EntityCtxPb EntityCtx = 1;
}

message SceneItemLifeCycleComponentDestroyCtxPb {
	EntityCtxPb EntityCtx = 1;
}

message BehaviorTreeCtxPb {
	int64 IncId = 1;
	int32 BtType = 2;
	int32 BtId = 3;
	int32 NodeId = 4;
}

message LevelPlayCtxPb {
	int32 LevelPlayId = 1;
}

message LevelPlayOpenActionCtxPb {
	int32 LevelPlayId = 1;
}

message LevelPlayRewardActionCtxPb {
	int32 LevelPlayId = 1;
}

message QuestActiveActionCtxPb {
	int32 QuestId = 1;
}

message QuestAcceptActionCtxPb {
	int32 QuestId = 1;
}

message QuestFinishActionCtxPb {
	int32 QuestId = 1;
}

message DailyQuestTerminateActionCtxPb {
	int32 QuestId = 1;
}

message ChildQuestNodeEnterActionCtxPb {
	BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message ChildQuestNodeFinishActionCtxPb {
	BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message SuccessNodeActionCtxPb {
	BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message FailedNodeActionCtxPb {
	BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message CompositionEnterActionCtxPb {
	BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message PlayFlowChildQuestNodeCtxPb {
	BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message HandInItemChildQuestNodeCtxPb {
	BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message DoInteractChildQuestNodeCtxPb {
	BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message ActionGroupNodeActionCtxPb {
	BehaviorTreeCtxPb BehaviorTreeCtx = 1;
}

message FlowActionCtxPb {
	string FlowListName = 1;
	int32 FlowId = 2;
	int32 StateId = 3;
	int32 ActionId = 4;
}

enum ActivityType {
	ActivityType_Parkour = 0;
	ActivityType_GatherActivity = 1;
	ActivityType_Sign = 2;
	ActivityType_TowerGuide = 3;
	ActivityType_NewBieCourse = 4;
	ActivityType_WorldNewJourney = 5;
	ActivityType_RougeActivity = 6;
	ActivityType_DoubleInstanceRewardActivity = 7;
	ActivityType_RoleTrialActivity = 8;
	ActivityType_Harvest = 9;
	ActivityType_NewRoleGuideActivity = 10;
	ActivityType_PhantomCollect = 11;
	ActivityType_DailyAdventureActivity = 12;
	ActivityType_PureUIActivity = 200;
}

message ParkourActivityChallenge {
	int32 ChallengeId = 1;
	int64 BeginTime = 2;
	int64 EndTime = 3;
}

message ParkourActivity {
	repeated ParkourActivityChallenge Challenges = 1;
}

message DoubleInstActivityReward {
	int32 GetDoubleInstRwdCount = 1;
}

enum GatherActivityTaskState {
	GatherActivityTaskState_GatherLock = 0;
	GatherActivityTaskState_GatherRunning = 1;
	GatherActivityTaskState_GatherInComplete = 2;
	GatherActivityTaskState_GatherDone = 3;
	GatherActivityTaskState_GatherTakeReward = 4;
}

message GatherTaskDoneInfo {
	int32 taskId = 1;
	int32 state = 2;
}

message GatherActivityInfo {
	repeated GatherTaskDoneInfo GatherTaskDoneInfo = 1;
}

enum SignState {
	SignState_Lock = 0;
	SignState_Unlock = 1;
	SignState_IsReceive = 2;
}

message SignActivity {
	repeated int32 SignStateList = 1;
}

message HarvestPointReward {
	int32 Id = 1;
	int32 State = 2;
}

message HarvestLevelReward {
	int32 Id = 1;
	int32 StartTime = 2;
	bool IsOpen = 3;
	int32 Point = 4;
	int32 Diff = 5;
	int32 State = 6;
}

message HarvestActivity {
	repeated HarvestPointReward HarvestPointRewards = 1;
	repeated HarvestLevelReward HarvestLevelRewards = 2;
}

message NewBieCourseActivity {
	repeated int32 HadTakeReward = 1;
}

message RoleTrialTask {
	int32 roleId = 1;
	int32 ChallengeState = 2;
}

message RoleTrialInfoActivity {
	repeated RoleTrialTask RoleTrialTask = 1;
}

enum PhantomCollectRewardType {
	PhantomCollectRewardType_PhantomsCollect = 0;
	PhantomCollectRewardType_DataDock = 1;
	PhantomCollectRewardType_PhantomSideQuest = 2;
	PhantomCollectRewardType_Max = 3;
}

message PhantomCollectReward {
	oneof Data {
		PhantomCollectProgress Progress = 3;
	}

	int32 Type = 1;
	int32 State = 2;
}

message PhantomCollectProgress {
	repeated int32 Phantoms = 1;
}

message PhantomCollectActivity {
	repeated PhantomCollectReward PhantomCollectRewards = 1;
}

message ActivityData {
	oneof Data_ {
		ParkourActivity ParkourActivity = 10;
		NewBieCourseActivity NewBieCourseActivity = 12;
		HarvestActivity HarvestActivity = 14;
		PhantomCollectActivity PhantomCollectActivity = 16;
		DailyAdventureActivityData DailyAdventureActivityData = 18;
	}

	int32 Id = 1;
	int32 Type = 2;
	int64 BeginShowTime = 3;
	int64 EndShowTime = 4;
	int64 BeginOpenTime = 5;
	int64 EndOpenTime = 6;
	bool IsUnlock = 7;
	repeated int32 CompletePreQuests = 8;
	bool IsFirstOpen = 9;
	SignActivity SignActivity = 11;
	DoubleInstActivityReward DoubleInstActivityReward = 13;
	RoleTrialInfoActivity RoleTrialInfoActivity = 15;
	GatherActivityInfo GatherActivityInfo = 17;
}

message ActivityRequest {
}

message ActivityResponse {
	repeated ActivityData Activities = 229;
	int32 ErrorCode = 16;
}

message ActivityFirstReadRequest {
	int32 ActivityId = 64;
}

message ActivityFirstReadResponse {
	int32 ErrorCode = 176;
}

message ActivityUpdateNotify {
	repeated ActivityData Activities = 53;
}

message ActivityDisableNotify {
	repeated int32 ActivityIds = 237;
}

message SignActivityRequest {
	int32 ActivityId = 81;
	int32 Index = 158;
}

message SignActivityResponse {
	int32 ErrorCode = 65;
	map<int32, int32> ItemMap = 125;
}

message SignActivitySignStateNotify {
	int32 ActivityId = 170;
	int32 Index = 90;
	int32 SignState = 249;
}

message SignActivityKeepTimeNotify {
	int32 ActivityId = 108;
	int64 KeepTime = 206;
}

message HarvestActivityPointRequest {
	int32 ActivityId = 139;
	int32 Id = 23;
}

message HarvestActivityPointResponse {
	int32 ErrorCode = 216;
	map<int32, int32> ItemMap = 109;
}

message HarvestActivityLevelRequest {
	int32 ActivityId = 158;
	int32 InstId = 236;
}

message HarvestActivityLevelResponse {
	int32 ErrorCode = 116;
	map<int32, int32> ItemMap = 159;
}

message HarvestActivityLevelDiffRequest {
	int32 ActivityId = 237;
	int32 InstId = 15;
	int32 Diff = 83;
}

message HarvestActivityLevelDiffResponse {
	int32 ErrorCode = 197;
}

message HarvestActivityPointNotify {
	int32 ActivityId = 161;
	repeated HarvestPointReward HarvestPointReward = 169;
}

message HarvestActivityLevelNotify {
	int32 ActivityId = 229;
	repeated HarvestLevelReward HarvestLevelRewards = 201;
}

message HarvestActivityResultRequest {
}

message HarvestActivityResultResponse {
}

message HarvestActivityResultNotify {
	bool Succ = 236;
	int32 CurPoint = 64;
	int32 HisPoint = 120;
	int32 ErrorCode = 33;
}

message PhantomCollectReceiveRequest {
	int32 ActivityId = 212;
	int32 Type = 78;
}

message PhantomCollectReceiveResponse {
	int32 ErrorCode = 137;
	map<int32, int32> ItemMap = 244;
}

message PhantomCollectUpdateNotify {
	int32 ActivityId = 9;
	PhantomCollectReward PhantomCollectReward = 229;
}

enum ChallengeState {
	ChallengeState_Running = 0;
	ChallengeState_WaitTakeReward = 1;
	ChallengeState_Finish = 2;
}

message TrialRoleRewardRequest {
	int32 RoleId = 238;
}

message TrialRoleRewardResponse {
	int32 ErrorCode = 54;
}

message RoleTrialSettleNotify {
	int32 ErrorCode = 109;
}

enum DailyAdventureTaskState {
	DailyAdventureTaskState_DailyAdventureTaskRunning = 0;
	DailyAdventureTaskState_DailyAdventureTaskFinish = 1;
	DailyAdventureTaskState_DailyAdventureTaskTaken = 2;
}

message DailyAdventureActivityTask {
	int32 Id = 1;
	int32 Current = 2;
	int32 Target = 3;
	int32 Status = 4;
}

message DailyAdventureActivityData {
	repeated DailyAdventureActivityTask DailyAdventureActivityTasks = 1;
	repeated int32 PtRewardTaken = 2;
	int32 DailyAdventurePt = 3;
}

message DailyAdventureTaskUpdateNotify {
	repeated DailyAdventureActivityTask DailyAdventureActivityTasks = 229;
}

message DailyAdventurePtRewardRequest {
	int32 Id = 173;
}

message DailyAdventurePtRewardResponse {
	int32 ErrorCode = 255;
}

message DailyAdventureTaskRewardRequest {
	int32 Id = 11;
}

message DailyAdventureTaskRewardResponse {
	int32 DailyAdventurePt = 149;
	int32 ErrorCode = 246;
}

enum DetectionType {
	DetectionType_NormalMonster = 0;
	DetectionType_Dungeon = 1;
	DetectionType_SilentArea = 2;
}

message AdventreTask {
	int32 Id = 1;
	int32 state = 2;
	int32 AdventreProgress = 3;
}

enum AdventreTaskSate {
	AdventreTaskSate_UnFinish = 0;
	AdventreTaskSate_Finish = 1;
	AdventreTaskSate_Received = 2;
}

message AdventureManualData {
	repeated AdventreTask AdventreTask = 1;
	int32 NowChapter = 2;
	int32 ReceivedChapter = 3;
}

message AdventureItemData {
	int32 itemId = 1;
	int32 itemNum = 2;
}

message AdventureRewardData {
	int32 dropId = 1;
	repeated AdventureItemData items = 2;
}

message DetectionTarget {
	int32 Id = 1;
	int32 type = 2;
	bool UnlockState = 3;
	int64 RefresherTime = 4;
	int32 DetectionId = 5;
}

message DetectionUnlock {
	repeated int32 MonsterDetectionIds = 1;
	repeated int32 DungeonDetectionIds = 2;
	repeated int32 SilentAreaDetectionIds = 3;
}

message SelectDetectionTarget {
	int32 DetectionId = 1;
	int32 type = 2;
	int32 Id = 3;
}

message AdventureManualDataRequest {
	int32 PlayerId = 238;
}

message AdventureManualDataResponse {
	int32 Code = 41;
	AdventureManualData AdventureManualData = 117;
}

message GetAdventureRewardRequest {
	int32 Id = 80;
}

message GetAdventureRewardResponse {
	int32 Code = 65;
	int32 Id = 169;
}

message GetChapterRewardRequest {
	int32 Chapter = 126;
}

message GetChapterRewardResponse {
	int32 Code = 159;
	int32 Chapter = 40;
}

message DetectionRequest {
	int32 DetectionType = 23;
	repeated int32 DetectionId = 254;
	int32 DetectionConfId = 21;
}

message DetectionResponse {
	int32 Code = 103;
	repeated DetectionTarget DetectionTarget = 249;
	int32 DetectionConfId = 79;
}

message AdventureUpdateNotify {
	repeated AdventureManualData AdventureManualData = 98;
}

message AdventureManualRequest {
	int32 PlayerId = 224;
}

enum SlientFirstAwardState {
	SlientFirstAwardState_NotUnlock = 0;
	SlientFirstAwardState_NotFinish = 1;
	SlientFirstAwardState_IsFinish = 2;
	SlientFirstAwardState_IsReceive = 3;
}

message AdventureManualResponse {
	int32 Code = 109;
	AdventureManualData AdventureManualData = 111;
	repeated DetectionTarget DetectionTarget = 149;
	repeated AdventureRewardData AdventureRewardData = 114;
	DetectionUnlock DetectionUnlocks = 113;
	SelectDetectionTarget NowSelectDetectionTarget = 89;
	map<int32, int32> SlientFirstAwardMap = 249;
}

message ReceivedSilentFirstAwardRequest {
	int32 id = 225;
}

message ReceivedSilentFirstAwardResponse {
	int32 ErrorCode = 29;
	repeated string ErrorParams = 58;
	map<int32, int32> ItemMap = 21;
}

message SlientFirstAwardNotify {
	int32 id = 235;
}

message UpdateMonsterUnlockNotify {
	DetectionUnlock DetectionUnlocks = 213;
}

message SelectDetectionTargetRequest {
	SelectDetectionTarget SelectDetectionTarget = 247;
	bool IsCancelSelect = 145;
}

message SelectDetectionTargetResponse {
	int32 Code = 22;
	SelectDetectionTarget SelectDetectionTarget = 86;
}

message FollowDetectionTargetUpdateNotify {
	repeated DetectionTarget DetectionTarget = 237;
}

message MonsterDetectionInfoRequest {
	repeated DetectionTarget Params = 145;
}

message MonsterDetectionInfoResponse {
	repeated DetectionTarget DetectionTarget = 194;
}

message NormalMonsterManualInfoRequest {
	int32 DetectionId = 240;
}

message NormalMonsterManualInfoResponse {
	int32 Code = 253;
	repeated DetectionTarget DetectionTarget = 241;
}

message UnlockDetectionLabelInfo {
	repeated sint32 UnlockedGuideIds = 1;
	repeated sint32 UnlockedDetectionTextIds = 2;
}

message GetDetectionLabelInfoRequest {
}

message GetDetectionLabelInfoResponse {
	UnlockDetectionLabelInfo UnlockLabelInfo = 103;
}

message AddUnlockedGuideNotify {
	repeated sint32 UnlockedGuideIds = 156;
}

message AddUnlockedDetectionTextNotify {
	repeated sint32 UnlockedDetectionTextIds = 38;
}

message AdviceSettingNotify {
	bool IsShow = 212;
}

message AdviceSetRequest {
	bool IsShow = 166;
}

message AdviceSetResponse {
	bool IsShow = 168;
	int32 ErrorCode = 96;
}

message PbAdvice {
	int64 Id = 1;
	int32 AreaId = 2;
	repeated PbAdviceContent Contents = 3;
	int32 UpVote = 4;
}

message AdviceComponentPb {
	PbAdvice Advice = 1;
	int32 PlayerId = 2;
	string PlayerName = 3;
}

message AdviceContentUpdateNotify {
	int64 Id = 163;
	repeated PbAdviceContent Contents = 232;
}

message AdviceVoteUpdateNotify {
	int64 Id = 38;
	int32 UpVote = 30;
}

enum PbAdviceContentType {
	PbAdviceContentType_Sentence = 0;
	PbAdviceContentType_Conjunction = 1;
	PbAdviceContentType_Expression = 2;
	PbAdviceContentType_Motion = 3;
}

message PbAdviceContent {
	int32 Type = 1;
	int32 Id = 2;
	int32 Word = 3;
}

message AdviceRequest {
}

message AdviceResponse {
	repeated PbAdvice Advices = 154;
	repeated int64 UpVoteIds = 58;
	int32 ErrorCode = 63;
}

message AdviceUpdateNotify {
	repeated int64 UpVoteIds = 207;
}

message AdviceCreateRequest {
	Vector Pos = 180;
	Rotator Rot = 175;
	repeated PbAdviceContent Contents = 44;
}

message AdviceCreateResponse {
	PbAdvice Advice = 136;
	int32 ErrorCode = 147;
}

message AdviceModifyRequest {
	int64 Id = 117;
	repeated PbAdviceContent Contents = 219;
}

message AdviceModifyResponse {
	int32 ErrorCode = 173;
}

message AdviceDeleteRequest {
	int64 Id = 117;
}

message AdviceDeleteResponse {
	int32 ErrorCode = 90;
}

enum PbAdviceVoteType {
	PbAdviceVoteType_Up = 0;
	PbAdviceVoteType_Cancel = 1;
}

message AdviceVoteRequest {
	int64 Id = 57;
	int32 Type = 198;
}

message AdviceVoteResponse {
	int32 ErrorCode = 222;
}

message Vector {
	float X = 1;
	float Y = 2;
	float Z = 3;
}

message Rotator {
	float Pitch = 1;
	float Yaw = 2;
	float Roll = 3;
}

enum EEntityType {
	EEntityType_Player = 0;
	EEntityType_Npc = 1;
	EEntityType_Monster = 2;
	EEntityType_SceneItem = 5;
	EEntityType_Custom = 6;
	EEntityType_Vision = 7;
	EEntityType_Animal = 8;
}

enum EAddEntityType {
	EAddEntityType_SceneInit = 0;
	EAddEntityType_Normal = 1;
}

enum ERemoveEntityType {
	ERemoveEntityType_RemoveTypeForce = 0;
	ERemoveEntityType_HpIsZero = 1;
	ERemoveEntityType_Destructible = 2;
	ERemoveEntityType_RemoveTypeNormal = 3;
	ERemoveEntityType_RemoveTypeCapture = 4;
	ERemoveEntityType_RemoveTypeTreasureBox = 5;
	ERemoveEntityType_RemoveTypeDrop = 6;
	ERemoveEntityType_MonsterBoom = 7;
	ERemoveEntityType_RemoveTypeResetByModeChange = 8;
}

enum EAttributeType {
	EAttributeType_EAttributeType_None = 0;
	EAttributeType_Lv = 1;
	EAttributeType_LifeMax = 2;
	EAttributeType_Life = 3;
	EAttributeType_Sheild = 4;
	EAttributeType_SheildDamageChange = 5;
	EAttributeType_SheildDamageReduce = 6;
	EAttributeType_Atk = 7;
	EAttributeType_Crit = 8;
	EAttributeType_CritDamage = 9;
	EAttributeType_Def = 10;
	EAttributeType_EnergyEfficiency = 11;
	EAttributeType_CdReduse = 12;
	EAttributeType_ReactionEfficiency = 13;
	EAttributeType_DamageChangeNormalSkill = 14;
	EAttributeType_DamageChange = 15;
	EAttributeType_DamageReduce = 16;
	EAttributeType_DamageChangeAuto = 17;
	EAttributeType_DamageChangeCast = 18;
	EAttributeType_DamageChangeUltra = 19;
	EAttributeType_DamageChangeQte = 20;
	EAttributeType_DamageChangePhys = 21;
	EAttributeType_DamageChangeElement1 = 22;
	EAttributeType_DamageChangeElement2 = 23;
	EAttributeType_DamageChangeElement3 = 24;
	EAttributeType_DamageChangeElement4 = 25;
	EAttributeType_DamageChangeElement5 = 26;
	EAttributeType_DamageChangeElement6 = 27;
	EAttributeType_DamageResistancePhys = 28;
	EAttributeType_DamageResistanceElement1 = 29;
	EAttributeType_DamageResistanceElement2 = 30;
	EAttributeType_DamageResistanceElement3 = 31;
	EAttributeType_DamageResistanceElement4 = 32;
	EAttributeType_DamageResistanceElement5 = 33;
	EAttributeType_DamageResistanceElement6 = 34;
	EAttributeType_HealChange = 35;
	EAttributeType_HealedChange = 36;
	EAttributeType_DamageReducePhys = 37;
	EAttributeType_DamageReduceElement1 = 38;
	EAttributeType_DamageReduceElement2 = 39;
	EAttributeType_DamageReduceElement3 = 40;
	EAttributeType_DamageReduceElement4 = 41;
	EAttributeType_DamageReduceElement5 = 42;
	EAttributeType_DamageReduceElement6 = 43;
	EAttributeType_ReactionChange1 = 44;
	EAttributeType_ReactionChange2 = 45;
	EAttributeType_ReactionChange3 = 46;
	EAttributeType_ReactionChange4 = 47;
	EAttributeType_ReactionChange5 = 48;
	EAttributeType_ReactionChange6 = 49;
	EAttributeType_ReactionChange7 = 50;
	EAttributeType_ReactionChange8 = 51;
	EAttributeType_ReactionChange9 = 52;
	EAttributeType_ReactionChange10 = 53;
	EAttributeType_ReactionChange11 = 54;
	EAttributeType_ReactionChange12 = 55;
	EAttributeType_ReactionChange13 = 56;
	EAttributeType_ReactionChange14 = 57;
	EAttributeType_ReactionChange15 = 58;
	EAttributeType_EnergyMax = 59;
	EAttributeType_Energy = 60;
	EAttributeType_SpecialEnergy1Max = 61;
	EAttributeType_SpecialEnergy1 = 62;
	EAttributeType_SpecialEnergy2Max = 63;
	EAttributeType_SpecialEnergy2 = 64;
	EAttributeType_SpecialEnergy3Max = 65;
	EAttributeType_SpecialEnergy3 = 66;
	EAttributeType_SpecialEnergy4Max = 67;
	EAttributeType_SpecialEnergy4 = 68;
	EAttributeType_StrengthMax = 69;
	EAttributeType_Strength = 70;
	EAttributeType_StrengthRecover = 71;
	EAttributeType_StrengthPunishTime = 72;
	EAttributeType_StrengthRun = 73;
	EAttributeType_StrengthSwim = 74;
	EAttributeType_StrengthFastSwim = 75;
	EAttributeType_StrengthClimb = 76;
	EAttributeType_StrengthFastClimb = 77;
	EAttributeType_HardnessMax = 78;
	EAttributeType_Hardness = 79;
	EAttributeType_HardnessRecover = 80;
	EAttributeType_HardnessPunishTime = 81;
	EAttributeType_HardnessChange = 82;
	EAttributeType_HardnessReduce = 83;
	EAttributeType_ToughMax = 84;
	EAttributeType_Tough = 85;
	EAttributeType_ToughRecover = 86;
	EAttributeType_ToughChange = 87;
	EAttributeType_ToughReduce = 88;
	EAttributeType_ElementPower1 = 89;
	EAttributeType_ElementPower2 = 90;
	EAttributeType_ElementPower3 = 91;
	EAttributeType_ElementPower4 = 92;
	EAttributeType_ElementPower5 = 93;
	EAttributeType_ElementPower6 = 94;
	EAttributeType_SpecialDamageChange = 95;
	EAttributeType_StrengthFastClimbCost = 96;
	EAttributeType_ElementPropertyType = 97;
	EAttributeType_WeakTime = 98;
	EAttributeType_IgnoreDefRate = 99;
	EAttributeType_IgnoreDamageResistancePhys = 100;
	EAttributeType_IgnoreDamageResistanceElement1 = 101;
	EAttributeType_IgnoreDamageResistanceElement2 = 102;
	EAttributeType_IgnoreDamageResistanceElement3 = 103;
	EAttributeType_IgnoreDamageResistanceElement4 = 104;
	EAttributeType_IgnoreDamageResistanceElement5 = 105;
	EAttributeType_IgnoreDamageResistanceElement6 = 106;
	EAttributeType_SkillToughRatio = 107;
	EAttributeType_StrengthClimbJump = 108;
	EAttributeType_StrengthGliding = 109;
	EAttributeType_Mass = 110;
	EAttributeType_BrakingFrictionFactor = 111;
	EAttributeType_GravityScale = 112;
	EAttributeType_SpeedRatio = 113;
	EAttributeType_DamageChangePhantom = 114;
	EAttributeType_AutoAttackSpeed = 115;
	EAttributeType_CastAttackSpeed = 116;
	EAttributeType_StatusBuildUp1Max = 117;
	EAttributeType_StatusBuildUp1 = 118;
	EAttributeType_StatusBuildUp2Max = 119;
	EAttributeType_StatusBuildUp2 = 120;
	EAttributeType_StatusBuildUp3Max = 121;
	EAttributeType_StatusBuildUp3 = 122;
	EAttributeType_StatusBuildUp4Max = 123;
	EAttributeType_StatusBuildUp4 = 124;
	EAttributeType_StatusBuildUp5Max = 125;
	EAttributeType_StatusBuildUp5 = 126;
	EAttributeType_RageMax = 127;
	EAttributeType_Rage = 128;
	EAttributeType_RageRecover = 129;
	EAttributeType_RagePunishTime = 130;
	EAttributeType_RageChange = 131;
	EAttributeType_RageReduce = 132;
	EAttributeType_ToughRecoverDelayTime = 133;
	EAttributeType_Jump = 134;
	EAttributeType_ParalysisTimeMax = 135;
	EAttributeType_ParalysisTime = 136;
	EAttributeType_ParalysisTimeRecover = 137;
	EAttributeType_EAttributeType_MAX = 138;
}

message GameplayAttributeData {
	int32 BaseValue = 1;
	int32 CurrentValue = 2;
	int32 AttributeType = 3;
}

message GameplayTagData {
	int32 Id = 1;
	int32 TagCount = 2;
}

message CommonTagData {
	int32 TagId = 1;
	bool IsAdd = 2;
}

message MovementInformation {
	Vector LinearVelocity = 1;
	Vector AngularVelocity = 2;
	Vector Location = 3;
	Rotator Rotation = 4;
	bool bSimulatedPhysicSleep = 5;
	bool bRepPhysics = 6;
	int32 MovementMode = 7;
	float TimeStamp = 8;
	int32 InputDirection = 9;
	bool ResetMeshOffset = 10;
	bool IsJump = 11;
	float HorizontalJumpSpeed = 12;
}

message RelativeMoveReplaySample {
	int64 BaseMovementEntityId = 1;
	Vector RelativeLocation = 2;
	Rotator RelativeRotation = 3;
}

message MoveReplaySample {
	Vector LinearVelocity = 1;
	Vector Location = 2;
	Rotator Rotation = 3;
	int32 MovementMode = 4;
	float TimeStamp = 5;
	int32 InputDirection = 6;
	repeated GameplayTagData Tags = 7;
	RelativeMoveReplaySample RelativeMoveReplaySample = 8;
	float ControllerPitch = 9;
	float TimeScale = 10;
	int64 ServerTimeStamp = 11;
	int32 RTT = 12;
	Vector SlideForward = 13;
	int32 MoveState = 14;
	int32 SkillId = 15;
}

message PrivateTag {
	int32 PlayerId = 1;
	repeated string Tags = 31;
}

message InstanceOwnerInfo {
	bool IsFinishMingSuGen = 1;
}

message DynamicCreatureGen {
	int64 CreatureGenID = 1;
}

message PropConfig {
	int32 Id = 1;
	float Value = 2;
	bool IsRatio = 3;
}

message CombatCommon {
	int64 PreMessageId = 1;
	int64 MessageId = 2;
	int64 Originator = 3;
	float TimeStamp = 4;
	int64 EntityId = 5;
	bool IsServerRequest = 6;
}

message EntityRemoveInfo {
	int64 EntityId = 1;
	int32 Type = 2;
}

message RoleShowEntry {
	int32 RoleId = 1;
	int32 Level = 2;
}

message PlayerDetails {
	int32 PlayerId = 1;
	string Name = 2;
	int32 Level = 3;
	int32 OriginWorldLevel = 4;
	int32 CurWorldLevel = 5;
	int32 HeadId = 6;
	int32 HeadFrameId = 7;
	string Signature = 8;
	bool IsOnline = 9;
	bool IsCanLobbyOnline = 10;
	int64 LastOfflineTime = 11;
	int32 TeamMemberCount = 12;
	int32 LevelGap = 13;
	int32 Birthday = 14;
	repeated RoleShowEntry RoleShowList = 15;
	repeated int32 CardShowList = 16;
	int32 CurCard = 17;
	bool DisplayBirthday = 18;
}

message EntitySimplyMoveInfo {
	int64 EntityId = 1;
	Vector Location = 2;
	Rotator Rotation = 3;
}

message Ai {
	message AiHateEntity {
		int64 EntityId = 1;
		int32 HatredValue = 2;
	}


	message Int2Long {
		int32 First = 1;
		int64 Second = 2;
	}


	message Int2Bool {
		int32 First = 1;
		bool Second = 2;
	}


	message AiInformation {
		repeated BlackboardParam AiBlackboards = 1;
		repeated Ai.AiHateEntity HateList = 2;
		repeated Ai.Int2Long AiBlackboardCd = 3;
	}


	message AiControlSwitch {
		int64 EntityId = 1;
		Ai.AiInformation AiInfo = 2;
		int32 PlayerId = 3;
	}


	message AiInformationRequest {
		AiInformation AiInfo = 18;
	}


	message AiInformationResponse {
		int32 ErrorCode = 14;
	}


	message AiInformationNotify {
		repeated Int2Long AiBlackboardCd = 41;
	}


	message AiBlackboardsRequest {
		repeated BlackboardParam AiBlackboards = 139;
	}


	message AiBlackboardsResponse {
		int32 ErrorCode = 95;
	}


	message AiBlackboardCdRequest {
		repeated int32 AiBlackboardCdDel = 82;
		repeated Ai.Int2Long AiBlackboardCdModify = 1;
		repeated Ai.Int2Bool AiBlackboardCdComplete = 231;
	}


	message AiBlackboardCdResponse {
		int32 ErrorCode = 161;
	}


	message AiBlackboardCdNotify {
		repeated int32 AiBlackboardCdDel = 217;
		repeated Ai.Int2Long AiBlackboardCdModify = 226;
		repeated Ai.Int2Bool AiBlackboardCdComplete = 143;
	}


	message AiHateRequest {
		repeated int64 HateListDel = 74;
		repeated Ai.AiHateEntity HateListModify = 82;
	}


	message AiHateResponse {
		int32 ErrorCode = 97;
	}


	message AiHateNotify {
		repeated AiHateEntity HateList = 32;
	}


	message AiControlSwitchRequest {
		int64 EntityId = 201;
	}


	message AiControlSwitchResponse {
		int32 ErrorCode = 108;
	}


	message AiControlSwitchNotify {
		repeated AiControlSwitch AiControlSwitchInfos = 77;
	}


	message PreAiControlSwitchNotify {
		repeated int64 EntityIds = 69;
	}


}

enum BlackboardParamType {
	BlackboardParamType_BlackboardParamType_None = 0;
	BlackboardParamType_BlackboardParamType_Int = 1;
	BlackboardParamType_BlackboardParamType_IntArray = 2;
	BlackboardParamType_BlackboardParamType_Long = 3;
	BlackboardParamType_BlackboardParamType_LongArray = 4;
	BlackboardParamType_BlackboardParamType_Boolean = 5;
	BlackboardParamType_BlackboardParamType_String = 6;
	BlackboardParamType_BlackboardParamType_StringArray = 7;
	BlackboardParamType_BlackboardParamType_Float = 8;
	BlackboardParamType_BlackboardParamType_FloatArray = 9;
	BlackboardParamType_BlackboardParamType_Vector = 10;
	BlackboardParamType_BlackboardParamType_VectorArray = 11;
	BlackboardParamType_BlackboardParamType_Rotator = 12;
	BlackboardParamType_BlackboardParamType_RotatorArray = 13;
	BlackboardParamType_BlackboardParamType_Entity = 14;
	BlackboardParamType_BlackboardParamType_EntityArray = 15;
}

message IntArrayBlackboard {
	repeated int32 Values = 1;
}

message LongArrayBlackboard {
	repeated int64 Values = 1;
}

message StringArrayBlackboard {
	repeated string Values = 1;
}

message FloatArrayBlackboard {
	repeated float Values = 1;
}

message VectorArrayBlackboard {
	repeated Vector Values = 1;
}

message RotatorArrayBlackboard {
	repeated Rotator Values = 1;
}

message BlackboardParam {
	oneof Value_ {
		int32 IntValue = 3;
		int64 LongValue = 5;
		bool BooleanValue = 7;
		StringArrayBlackboard StringValues = 9;
		FloatArrayBlackboard FloatValues = 11;
		VectorArrayBlackboard VectorValues = 13;
		RotatorArrayBlackboard RotatorValues = 15;
	}

	string Key = 1;
	int32 Type = 2;
	IntArrayBlackboard IntValues = 4;
	LongArrayBlackboard LongValues = 6;
	string StringValue = 8;
	float FloatValue = 10;
	Vector VectorValue = 12;
	Rotator RotatorValue = 14;
}

message WorldBlackboardRequest {
	repeated BlackboardParam Params = 117;
}

message WorldBlackboardResponse {
	int32 ErrorCode = 224;
}

message WorldBlackboardNotify {
	repeated BlackboardParam Params = 105;
}

message EntityBlackboardRequest {
	int64 EntityId = 100;
	repeated BlackboardParam Params = 14;
}

message EntityBlackboardResponse {
	int32 ErrorCode = 149;
}

message EntityBlackboardNotify {
	int64 EntityId = 102;
	repeated BlackboardParam Params = 37;
}

message EnterAreaRequest {
	int32 Id = 147;
}

message EnterAreaResponse {
	int32 ErrorCode = 144;
	int32 Id = 122;
}

enum BanChatType {
	BanChatType_None = 0;
	BanChatType_All = 1;
	BanChatType_Friend = 2;
	BanChatType_Foreign = 3;
	BanChatType_Team = 4;
}

message BanChatNotify {
	int64 BanEndTime = 138;
	int32 BanChatType = 139;
}

message BanLogoutInfo {
	int32 Reason = 1;
	int64 BanEndTime = 2;
}

message ReportChatInfo {
	string ChatMessage = 1;
}

message ReportTargetInfo {
	string Name = 1;
	string Signature = 2;
}

message ReportPlayerRequest {
	oneof TargetInfo_ {
		ReportTargetInfo TargetInfo = 73;
	}

	int32 TargetPlayerId = 18;
	ReportChatInfo ChatInfo = 187;
	int32 ReportReason = 85;
	string ReportMessage = 118;
	int32 ReportSource = 69;
}

message ReportPlayerResponse {
	int32 ErrorCode = 12;
	int32 ReportCount = 95;
}

message PlayerRenameNotify {
	string Name = 138;
}

message CardShowEntry {
	int32 CardId = 1;
	bool IsRead = 2;
}

message BasicInfoNotify {
	int32 Id = 75;
	repeated PlayerAttr Attributes = 19;
	repeated MingSuGenInfo MingSuGenInfos = 187;
	repeated DragonPoolInfo DragonPoolInfos = 61;
	repeated RoleShowEntry RoleShowList = 57;
	int32 CurCardId = 71;
	int32 Birthday = 106;
	repeated CardShowEntry CardUnlockList = 217;
	int32 RandomSeed = 107;
	bool DisplayBirthDay = 234;
}

message ModifyNameRequest {
	string Name = 222;
}

message ModifyNameResponse {
	string Name = 138;
	int32 ErrorCode = 43;
}

message ModifySignatureRequest {
	string Signature = 215;
}

message ModifySignatureResponse {
	string Signature = 200;
	int32 ErrorCode = 60;
}

message ChangeHeadPhotoRequest {
	int32 HeadPhotoId = 33;
}

message ChangeHeadPhotoResponse {
	int32 HeadPhotoId = 165;
	int32 ErrorCode = 193;
}

message UnlockHeadPhotoNotify {
	int32 HeadPhotoId = 153;
}

message UnlockHeadFrameNotify {
	int32 HeadFrameId = 28;
}

enum NetStatusType {
	NetStatusType_Wifi = 0;
	NetStatusType_Stream = 1;
	NetStatusType_Wired = 2;
	NetStatusType_Other = 3;
}

enum ClientDeviceLevel {
	ClientDeviceLevel_Low = 0;
	ClientDeviceLevel_Medium = 1;
	ClientDeviceLevel_High = 2;
}

message ClientBasicInfo {
	string Platform = 1;
	string DeviceId = 2;
	int32 NetStatus = 3;
	string Model = 4;
	string CPU = 5;
	int32 DeviceLevel = 6;
	int32 Language = 7;
	string DistinctId = 8;
	string MacAddress = 9;
}

message ClientBasicInfoRequest {
	ClientBasicInfo ClientBasicInfo = 178;
}

message ClientBasicInfoResponse {
}

message PlayerBasicInfoGetRequest {
	int32 Id = 231;
}

message PlayerBasicInfoGetResponse {
	PlayerDetails Info = 173;
	int32 ErrorCode = 225;
}

message BirthdayInitRequest {
	int32 Birthday = 24;
}

message BirthdayInitResponse {
	int32 ErrorCode = 173;
}

message RoleShowListUpdateRequest {
	repeated int32 RoleList = 184;
}

message RoleShowListUpdateResponse {
	int32 ErrorCode = 72;
}

message HeadIdUpdateNotify {
	int32 HeadId = 14;
}

message RoleShowListUpdateNotify {
	repeated RoleShowEntry RoleShowList = 244;
}

message ChangeCardRequest {
	int32 CardId = 149;
}

message ChangeCardResponse {
	int32 ErrorCode = 3;
}

message ReadCardRequest {
	int32 CardId = 67;
}

message ReadCardResponse {
	int32 ErrorCode = 111;
}

message UnlockCardNotify {
	int32 CardId = 132;
}

message BirthdayShowSetRequest {
	bool DisPlay = 51;
}

message BirthdayShowSetResponse {
	int32 ErrorCode = 228;
}

enum PlayerAttrType {
	PlayerAttrType_Int32 = 0;
	PlayerAttrType_String = 1;
}

enum PlayerAttrKey {
	PlayerAttrKey_Level = 0;
	PlayerAttrKey_Exp = 1;
	PlayerAttrKey_Coin = 2;
	PlayerAttrKey_RareCoin = 3;
	PlayerAttrKey_HeadPhoto = 4;
	PlayerAttrKey_HeadFrame = 5;
	PlayerAttrKey_AreaId = 6;
	PlayerAttrKey_Name = 7;
	PlayerAttrKey_Sign = 8;
	PlayerAttrKey_Sex = 9;
	PlayerAttrKey_OriginWorldLevel = 10;
	PlayerAttrKey_CurWorldLevel = 11;
	PlayerAttrKey_WorldLevelTimeStamp = 12;
	PlayerAttrKey_CashCoin = 13;
	PlayerAttrKey_WorldPermission = 14;
}

message PlayerAttr {
	oneof Value_ {
		int32 Int32Value = 3;
	}

	int32 Key = 1;
	int32 ValueType = 2;
	string StringValue = 4;
}

message PlayerAttrNotify {
	repeated PlayerAttr Attributes = 100;
}

message HandInMingSuRequest {
	int32 DragonPoolId = 124;
	int64 InteractEntityId = 181;
}

message HandInMingSuResponse {
	int32 ErrorCode = 169;
	int32 DragonPoolId = 129;
	int32 Level = 214;
	int32 ActiveStatus = 92;
	int32 InjectedCoreItemCount = 196;
}

message MingSuGenInfo {
	int64 CreatureGenID = 1;
}

message DragonPoolInfo {
	int32 DragonPoolId = 1;
	int32 ActiveStatus = 2;
	int32 Level = 3;
	int32 InjectedCoreItemCount = 4;
}

message ActiveDragonPoolRequest {
	int32 DragonPoolId = 158;
}

message ActiveDragonPoolResponse {
	int32 ErrorCode = 251;
	int32 DragonPoolId = 241;
	int32 ActiveStatus = 72;
}

message DragonPoolConfRequest {
	int32 DragonPoolId = 146;
}

message ItemEntry {
	int32 ItemId = 1;
	int32 ItemCount = 2;
}

message ItemDict {
	repeated ItemEntry Items = 1;
}

message DragonPoolConfResponse {
	int32 ErrorCode = 43;
	int32 DragonPoolId = 160;
	repeated int32 DropIds = 156;
	repeated ItemDict DropItems = 12;
}

enum BattlePassType {
	BattlePassType_Free = 0;
	BattlePassType_Pay = 1;
}

enum BattlePassPayStatus {
	BattlePassPayStatus_NoPaid = 0;
	BattlePassPayStatus_Paid = 1;
	BattlePassPayStatus_Advanced = 2;
}

message PbBattlePassReward {
	int32 Level = 1;
	int32 ItemId = 2;
	int32 Type = 3;
}

message PbBattlePassRecurringReward {
	int32 Type = 1;
	int32 ItemId = 2;
	int32 Count = 3;
}

message PbBattlePass {
	bool InTimeRange = 1;
	int32 Id = 2;
	int32 Level = 3;
	int32 Exp = 4;
	int32 WeeklyTotalExp = 5;
	int32 PayStatus = 6;
	repeated PbBattlePassReward TakenRewards = 7;
	int64 BeginTime = 8;
	int64 EndTime = 9;
	repeated PbBattlePassRecurringReward RecurringRewards = 10;
	bool HadEnter = 11;
}

message BattlePassRequest {
}

message BattlePassResponse {
	PbBattlePass BattlePass = 13;
	int32 ErrorCode = 129;
}

message BattlePassPaidNotify {
	int32 PayStatus = 221;
}

message BattlePassTakeRewardRequest {
	int32 Type = 210;
	int32 Level = 87;
	int32 ItemId = 187;
}

message BattlePassTakeRewardResponse {
	int32 ErrorCode = 189;
}

message BattlePassRecurringTakeRequest {
	int32 Type = 175;
	int32 ItemId = 241;
}

message BattlePassRecurringTakeResponse {
	int32 ErrorCode = 98;
}

message BattlePassTakeAllRewardRequest {
}

message BattlePassTakeAllRewardResponse {
	repeated PbBattlePassReward TakenRewards = 53;
	repeated PbBattlePassRecurringReward RecurringRewards = 190;
	int32 ErrorCode = 122;
}

message BattlePassExpUpdateNotify {
	int32 Level = 90;
	int32 Exp = 183;
	int32 WeeklyTotalExp = 95;
	repeated PbBattlePassRecurringReward RecurringRewards = 239;
}

message PbBattlePassTask {
	int32 Id = 1;
	int32 Current = 2;
	int32 Target = 3;
	bool IsFinished = 4;
	bool IsTaken = 5;
}

message BattlePassTaskRequest {
}

message BattlePassTaskResponse {
	int64 DayEnd = 205;
	int64 WeekEnd = 231;
	repeated PbBattlePassTask Tasks = 109;
	int32 ErrorCode = 123;
}

message BattlePassTaskUpdateNotify {
	repeated PbBattlePassTask Tasks = 222;
}

message BattlePassTaskTakeRequest {
	repeated int32 Ids = 68;
}

message BattlePassTaskTakeResponse {
	repeated int32 Ids = 109;
	int32 ErrorCode = 36;
}

message BattlePassEnterPush {
}

message BattlePassLevelUpRequest {
	int32 Level = 96;
}

message BattlePassLevelUpResponse {
	int32 ErrorCode = 64;
}

enum BtType {
	BtType_BtTypeInvalid = 0;
	BtType_BtTypeQuest = 1;
	BtType_BtTypeLevelPlay = 2;
	BtType_BtTypeInst = 3;
}

enum NodeStatus {
	NodeStatus_NotActive = 0;
	NodeStatus_BeforeActivate = 1;
	NodeStatus_Activated = 2;
	NodeStatus_Completing = 3;
	NodeStatus_CompletedSuccess = 4;
	NodeStatus_CompletedFailed = 5;
	NodeStatus_Suspend = 6;
	NodeStatus_Destroy = 7;
}

enum FailReason {
	FailReason_DefaultFail = 0;
	FailReason_AutoFail = 1;
	FailReason_EntityStateFail = 2;
	FailReason_TimeoutFail = 3;
	FailReason_LeaveInstFail = 4;
	FailReason_InstFail = 5;
	FailReason_CharacterDieFail = 6;
	FailReason_EntityDieFail = 7;
	FailReason_OutRangeFail = 8;
	FailReason_GiveUpFail = 9;
	FailReason_SneakTimeoutFail = 10;
	FailReason_Transfer = 11;
	FailReason_PlayerMotionState = 12;
	FailReason_NpcTraceOutRange = 13;
	FailReason_NpcTraceAlertFull = 14;
	FailReason_DataLayerFail = 15;
}

message NodeInfo {
	oneof ExtraInfo {
		ChildQuestNodeInfo ChildQuestNodeInfo = 2;
	}

	int32 Status = 1;
}

message TreeInfo {
	int32 TreeOwnerId = 1;
	int64 TreeIncId = 2;
	int32 BtType = 3;
	int32 BlackboardId = 4;
	map<int32, NodeInfo> Nodes = 5;
	map<string, VarDefinePb> Vars = 6;
	repeated TimerInfoPb TimerInfos = 7;
	int32 SuspendType = 8;
	repeated OccupationPbInfo OccupationInfo = 9;
}

message BehaviorTreeInfoNotify {
	repeated TreeInfo TreeInfos = 100;
}

message BehaviorTreeDeleteNotify {
	repeated int64 TreeIncIds = 143;
}

enum ChildQuestNodeStatus {
	ChildQuestNodeStatus_CQNS_NotActive = 0;
	ChildQuestNodeStatus_CQNS_Enter = 1;
	ChildQuestNodeStatus_CQNS_EnterAction = 2;
	ChildQuestNodeStatus_CQNS_Progress = 3;
	ChildQuestNodeStatus_CQNS_Finished = 4;
	ChildQuestNodeStatus_CQNS_FinishAction = 5;
	ChildQuestNodeStatus_CQNS_Fail = 6;
}

message ChildQuestNodeProgress {
	oneof Progress_ {
		KillProgress Kill = 1;
		MonsterCreatorProgress MonsterCreator = 3;
		int32 levelPlayCount = 5;
		CompleteInstProgress CompleteInst = 7;
	}

	GetItemProgress GetItem = 2;
	UseItemProgress UseItem = 4;
	InteractProgress Interact = 6;
	EntityStateProgress EntityStateList = 8;
}

message EntityStateProgress {
	repeated int32 EntityId = 1;
}

message ChildQuestNodeInfo {
	int32 Status = 1;
	ChildQuestNodeProgress Progress = 2;
}

message KillProgress {
	repeated int32 MonId = 1;
	int32 PrefabNum = 2;
	int32 CurrNum = 3;
	int32 TotalNum = 4;
}

message InteractProgress {
	repeated int32 NpcId = 1;
}

message GetItemProgress {
	repeated GetItemCount Info = 1;
}

message GetItemCount {
	int32 ItemId = 1;
	int32 Count = 2;
}

enum SpawnMonsterStepType {
	SpawnMonsterStepType_Prepare = 0;
	SpawnMonsterStepType_Active = 1;
	SpawnMonsterStepType_Refreshed = 2;
	SpawnMonsterStepType_End = 3;
}

message SceneMonsterState {
	enum ENUMS {
		ENUMS_NotCreate = 0;
		ENUMS_Alive = 1;
		ENUMS_Death = 2;
	}


}

message SceneMonsterCreatedMonsterInfo {
	int32 PrefabId = 1;
	int32 EntityConfigId = 2;
	int64 BaseLife = 3;
	int32 State = 4;
}

message MonsterCreatorProgress {
	repeated MonsterCreatorProgressSlot Slots = 1;
	int32 TotalNum = 2;
}

message MonsterCreatorProgressSlot {
	int32 WaveId = 1;
	repeated int32 KillMonIds = 2;
	int32 CurrentWaveEndTime = 3;
	int32 SpawnStepType = 4;
	int32 CreatorEntityConfigId = 5;
	repeated SceneMonsterCreatedMonsterInfo MonsterInfo = 6;
}

message UseItemProgress {
	int32 ItemId = 1;
	int32 Count = 2;
}

message CompleteInstProgress {
	int32 InstId = 1;
	int32 Count = 2;
}

enum SuccessNodeStatus {
	SuccessNodeStatus_SNS_NotActive = 0;
	SuccessNodeStatus_SNS_Enter = 1;
	SuccessNodeStatus_SNS_Action = 2;
}

enum FailedNodeStatus {
	FailedNodeStatus_FNS_NotActive = 0;
	FailedNodeStatus_FNS_Enter = 1;
	FailedNodeStatus_FNS_Action = 2;
}

message UpdateNodeProgressNotify {
	int32 TreeOwnerId = 63;
	int64 TreeIncId = 129;
	int32 NodeId = 71;
	ChildQuestNodeProgress Progress = 141;
}

message UpdateChildQuestNodeStatusNotify {
	int32 TreeOwnerId = 88;
	int64 TreeIncId = 38;
	int32 NodeId = 89;
	int32 Status = 229;
}

message UpdateNodeStatusNotify {
	int32 TreeOwnerId = 83;
	int64 TreeIncId = 130;
	int32 NodeId = 61;
	int32 Status = 189;
}

message SubmitNodeRequest {
	int32 TreeOwnerId = 103;
	int64 TreeIncId = 27;
	int32 NodeId = 48;
}

message SubmitNodeResponse {
	int32 TreeOwnerId = 31;
	int64 TreeIncId = 45;
	int32 NodeId = 251;
	int32 ErrorId = 236;
}

enum PbHandInItemType {
	PbHandInItemType_ItemIds = 0;
	PbHandInItemType_ItemType = 1;
}

message PbHandInItemInfo {
	int32 IncId = 1;
	int32 Num = 2;
	int32 ItemId = 3;
}

message PbHandInItem {
	repeated PbHandInItemInfo HandItemInfo = 1;
	int32 Count = 2;
	int32 PbHandInItemType = 3;
}

message HandInItemRequest {
	int32 TreeOwnerId = 147;
	int64 TreeIncId = 4;
	int32 NodeId = 30;
	repeated PbHandInItem HandInItem = 143;
}

message HandInItemResponse {
	int32 ErrorId = 47;
}

enum ActionType {
	ActionType_GetItem = 0;
	ActionType_SendNpcMail = 1;
}

enum TimerSetType {
	TimerSetType_Add = 0;
	TimerSetType_Sub = 1;
	TimerSetType_Set = 2;
}

message BtSetTimerInfoRequest {
	int32 TreeOwnerId = 155;
	int64 TreeIncId = 192;
	string TimerType = 242;
	int32 SetType = 202;
	int32 Second = 77;
	int32 NodeId = 233;
}

message BtSetTimerInfoResponse {
	int32 ErrorId = 201;
}

message OccupationPbInfo {
	string ResourceName = 1;
	int32 NodeId = 2;
	int64 IncId = 3;
}

enum SuspendType {
	SuspendType_Occupation = 0;
	SuspendType_Online = 1;
	SuspendType_ScreenOccupation = 2;
}

message BtSuspendNotify {
	int32 TreeOwnerId = 43;
	int64 TreeIncId = 120;
	int32 NodeId = 155;
	repeated OccupationPbInfo OccupationInfo = 206;
	int32 SuspendType = 83;
}

message BtCancelSuspendNotify {
	int32 TreeOwnerId = 228;
	int64 TreeIncId = 25;
}

message OccupationInfoNotify {
	repeated OccupationPbInfo OccupationInfo = 189;
}

message AddOccupationInfoNotify {
	repeated OccupationPbInfo OccupationInfo = 222;
}

message RemoveOccupationInfoNotify {
	repeated string Resource = 235;
}

enum TimeHandleType {
	TimeHandleType_Lock = 0;
	TimeHandleType_Unlock = 1;
}

message TimeOccupationNotify {
	int32 HandleType = 190;
}

message BtForcedOccupationRequest {
	int64 TreeIncId = 147;
}

message BtForcedOccupationResponse {
	int32 ErrorId = 74;
}

message BtGiveUpRequest {
	int32 TreeOwnerId = 208;
	int64 TreeIncId = 153;
	int32 NodeId = 81;
}

message BtGiveUpResponse {
	int32 ErrorId = 37;
}

message BtRollbackNotify {
	int32 TreeOwnerId = 115;
	int64 TreeIncId = 198;
	int32 FailNodeId = 126;
	int32 FailReason = 168;
}

message BtRollbackRequest {
	int32 TreeOwnerId = 116;
	int64 TreeIncId = 149;
	int32 Select = 55;
}

message BtRollbackResponse {
	int32 ErrorId = 245;
}

message BtRollbackStartNotify {
	int32 TreeOwnerId = 14;
	int64 TreeIncId = 84;
	bool IsRollbackSubLevel = 213;
	bool IsRollbackPos = 233;
}

message BtRollbackInfoNotify {
	int32 TreeOwnerId = 50;
	int64 TreeIncId = 31;
	TreeInfo TreeInfo = 129;
}

message SneakRequest {
	int32 TreeOwnerId = 77;
	int64 TreeIncId = 164;
	int32 NodeId = 26;
	bool IsStart = 121;
}

message SneakResponse {
	int32 ErrorId = 160;
}

message SneakTimeRequest {
	int32 TreeOwnerId = 154;
	int64 TreeIncId = 67;
}

message SneakTimeResponse {
	int32 ErrorId = 114;
}

message SneakNotify {
	int32 TreeOwnerId = 71;
	int64 TreeIncId = 52;
	int32 NodeId = 136;
	int64 EndTime = 32;
}

message TimerInfoPb {
	string TimerType = 1;
	int32 NodeId = 2;
	int64 EndTime = 3;
}

message UpdateTimerInfoNotify {
	int32 TreeOwnerId = 225;
	int64 TreeIncId = 138;
	TimerInfoPb TimerInfo = 129;
}

message TimerEndRequest {
	int32 TreeOwnerId = 169;
	int64 TreeIncId = 14;
	string TimerType = 125;
}

message TimerEndResponse {
	int32 ErrorId = 168;
}

enum UiGamePlayType {
	UiGamePlayType_Cipher = 0;
	UiGamePlayType_SignalBreak = 1;
	UiGamePlayType_SundialPuzzle = 2;
	UiGamePlayType_MorseCode = 3;
	UiGamePlayType_SignalDevice = 4;
}

message UiGamePlayRequest {
	int32 Type = 179;
	string GamePlayKey = 167;
}

message UiGamePlayResponse {
	int32 ErrorId = 210;
}

message NpcTraceFailedRequest {
	int32 TreeOwnerId = 58;
	int64 TreeIncId = 21;
	int32 NodeId = 190;
}

message NpcTraceFailedResponse {
	int32 ErrorId = 98;
}

message BtVarUpdateNotify {
	int32 TreeOwnerId = 67;
	int64 TreeIncId = 204;
	string VarName = 232;
	VarDefinePb VarDefine = 36;
}

message EnableSystemFuncInfo {
	int32 FuncId = 1;
	bool IsOpen = 2;
}

message UpdateEnableSystemNotify {
	repeated EnableSystemFuncInfo FuncInfo = 162;
}

enum SourceType {
	SourceType_UnDefine = 0;
	SourceType_SourceEntity = 3;
	SourceType_SourceQuest = 4;
}

enum EntityConfigType {
	EntityConfigType_OldEntity = 0;
	EntityConfigType_Level = 1;
	EntityConfigType_Global = 2;
	EntityConfigType_Character = 3;
	EntityConfigType_Template = 4;
	EntityConfigType_Prefab = 5;
}

message FightBuffInformation {
	int32 HandleId = 1;
	int64 BuffId = 2;
	int32 Level = 3;
	int32 StackCount = 4;
	int64 InstigatorId = 5;
	int64 EntityId = 6;
	int32 ApplyType = 7;
	float Duration = 8;
	float LeftDuration = 9;
	repeated FightBuffEffectContext Context = 10;
	bool IsActive = 11;
	int32 ServerId = 12;
	int64 MessageId = 13;
}

message EntityPb {
	oneof Camp_ {
		int32 Camp = 20;
	}

	int64 Id = 1;
	int32 ConfigId = 2;
	int32 ConfigType = 3;
	int32 EntityType = 4;
	Vector Pos = 5;
	Rotator Rot = 6;
	Vector InitPos = 7;
	int32 LivingStatus = 8;
	bool IsVisible = 9;
	int32 PlayerId = 10;
	repeated EntityComponentPb ComponentPbs = 11;
	int32 DurabilityValue = 12;
	int32 EntityState = 13;
	Vector InitLinearVelocity = 14;
	bool IsPosAbnormal = 15;
	int32 PrefabId = 17;
	int64 PrefabIncId = 18;
	int32 SubEntityType = 19;
}

message EntityComponentPb {
	oneof Component_ {
		AttributeComponentPb AttributeComponent = 1;
		TriggerComponentPb TriggerComponent = 3;
		PartComponentPb PartComponent = 5;
		AnimationStateComponentPb AnimationStateComponent = 7;
		SysBuffComponentPb SysBuffComponent = 10;
		MonsterWeaponComponentPb MonsterWeaponComponentPb = 12;
		FightBuffComponentPb FightBuffComponent = 15;
		DropComponentPb DropComponentPb = 17;
		LogicStateComponentPb LogicStateComponentPb = 19;
		LiftComponentPb LiftComponentPb = 21;
		EquipComponentPb EquipComponent = 23;
		ConcomitantsComponentPb ConcomitantsComponentPb = 25;
		SummonsComponentPb SummonsComponentPb = 27;
		BoardPb BoardPb = 29;
		StateTagComponentPb StateTagComponentPb = 31;
		FanComponentPb FanComponentPb = 33;
		BubbleComponentPb BubbleComponent = 35;
		RangeComponentPb RangeComponent = 37;
	}

	TagComponentPb TagComponent = 2;
	SummonerComponentPb SummonerComponent = 4;
	VisionSkillComponentPb VisionSkillComponent = 6;
	BlackboardParamComponentPb BlackboardParamComponent = 8;
	ClientDataComponentPb ClientDataComponent = 11;
	MonsterAiComponentPb MonsterAiComponentPb = 13;
	NearbyTrackingComponentPb NearbyTrackingComponentPb = 16;
	MonsterCaptureComponentPb MonsterCaptureComponent = 18;
	AdviceComponentPb AdviceComponentPb = 20;
	InteractComponentPb InteractComponent = 22;
	BeControlledComponentPb BeControlledComponentPb = 24;
	TimelineTrackComponentPb TimelineTrackComponentPb = 26;
	EntityFsmComponentPb EntityFsmComponentPb = 28;
	PlacementItemPb PlacementItemPb = 30;
	MonsterGachaDataPb MonsterGachaDataPb = 32;
	NpcPb NpcPb = 34;
	PatrolComponentPb PatrolComponent = 36;
	PassiveSkillComponentPb PassiveSkillComponentPb = 38;
}

message MonsterAiComponentPb {
	int32 WeaponId = 1;
	int64 HatredGroupId = 2;
	int32 AiTeamInitId = 3;
	int64 CombatMessageId = 4;
}

message MonsterWeaponComponentPb {
	int32 WeaponId = 1;
}

enum EntranceState {
	EntranceState_NotUnlock = 0;
	EntranceState_Unlockable = 1;
	EntranceState_Unlocked = 2;
	EntranceState_Closed = 3;
}

message RangeComponentPb {
	int32 PlayerCount = 1;
}

message EntranceComponentPb {
	int32 State = 1;
}

message ClientDataComponentPb {
	bool IsStaticInit = 1;
	int64 OwnerId = 2;
	int32 GroupId = 3;
}

message AttributeComponentPb {
	repeated GameplayAttributeData GameAttributes = 1;
	int32 HardnessModeId = 2;
	int32 RageModeId = 3;
}

message TagComponentPb {
	repeated GameplayTagData GameplayTags = 1;
	repeated int32 EntityCommonTags = 2;
	bool InitGameplayTag = 3;
}

message TriggerComponentPb {
	int32 TriggerCount = 1;
	int32 ExitTriggerCount = 2;
}

message StateTagComponentPb {
	int32 StateTagId = 1;
}

enum ESummonType {
	ESummonType_ESummonTypeDefault = 0;
	ESummonType_ESummonTypeConcomitantVision = 1;
	ESummonType_ESummonTypeConcomitantCustom = 2;
	ESummonType_ESummonTypeConcomitantPhantomRole = 3;
}

message SummonerComponentPb {
	int64 SummonerId = 1;
	int32 SummonCfgId = 2;
	int32 SummonSkillId = 3;
	int32 PlayerId = 4;
	int32 Type = 5;
}

message VisionSkillComponentPb {
	repeated VisionSkillInformation VisionSkillInfos = 1;
}

message BoneVisibleData {
	string BoneName = 1;
	bool Visible = 2;
}

message AnimationStateComponentPb {
	repeated int32 AnimationStates = 1;
	repeated int32 SpecialStates = 2;
	repeated BoneVisibleData BoneVisibleDatas = 3;
	repeated int32 AnimationTags = 4;
}

message LogicStateComponentPb {
	repeated int32 States = 1;
}

message LiftComponentPb {
	int32 Location = 1;
}

message BlackboardParamComponentPb {
	repeated BlackboardParam BlackboardParams = 1;
}

message SysBuffComponentPb {
	repeated SysBuffInformation SysBuffInfos = 1;
}

message SysBuffInformation {
	int32 ServerId = 1;
	int64 BuffId = 2;
	int32 Level = 3;
	int64 MessageId = 4;
	int64 InstigatorId = 5;
	float Duration = 6;
	int32 StackCount = 7;
	int32 ApplyType = 8;
	bool IsIterable = 9;
}

message FightBuffComponentPb {
	repeated FightBuffInformation FightBuffInfos = 1;
	repeated BuffEffectCd ListBuffEffectCd = 2;
}

message NearbyTrackingComponentPb {
	bool IsEnable = 1;
}

message DropComponentPb {
	int32 ItemId = 1;
	int32 ShowPlanId = 2;
	int32 ItemCount = 3;
	int32 EntityConfigId = 4;
}

message MonsterCaptureComponentPb {
	int32 TemplateId = 1;
	int32 EntityId = 2;
	int32 MonsterId = 3;
}

message BubbleInfo {
	string ActionGuid = 1;
	GameCtxPb GameCtx = 2;
}

message BubbleComponentPb {
	repeated BubbleInfo BubbleInfos = 1;
}

message DynamicInteractInfo {
	string OptionGuid = 1;
	GameCtxPb GameCtx = 2;
	string Text = 3;
}

message InteractComponentPb {
	repeated DynamicInteractInfo DynamicInteractInfos = 1;
	repeated int32 RandomInteractIndex = 2;
	bool Interacting = 3;
}

message BeControlledComponentPb {
	int64 PlayerEntityId = 1;
	int32 RelationId = 2;
	bool IsShow = 3;
}

message ConcomitantsComponentPb {
	int64 VisionEntityId = 1;
	repeated int64 CustomEntityIds = 2;
	int64 PhantomRoleEid = 3;
}

message TimelineTrackControlDataPb {
	int32 ControlPoint = 1;
}

message TimelineTrackComponentPb {
	int32 Index = 1;
	repeated TimelineTrackControlDataPb ControlDatas = 2;
}

message SummonsComponentPb {
	int32 Version = 1;
}

message BoardPb {
	repeated OccupiedBoardGridInfo OccupiedGridList = 1;
	repeated BoardGridDynamicConfig DynamicGridConfigs = 2;
}

message CrystalMonsterSlotInfo {
	repeated int32 EntityIds = 1;
	int32 MonsterType = 2;
}

message CrystalMonsterInfoPb {
	repeated CrystalMonsterSlotInfo SlotInfoList = 1;
}

message MonsterGachaDataPb {
	repeated CrystalMonsterInfoPb MonsterCrystalInfoList = 1;
}

message FanComponentPb {
	int32 NumOfTurns = 1;
}

message PassiveSkillItemPb {
	CombatCommon CombatCommon = 1;
	int64 SkillId = 2;
}

message PassiveSkillComponentPb {
	repeated PassiveSkillItemPb PassiveSkillItemPbList = 1;
}

message EntityAddNotify {
	repeated EntityPb EntityPbs = 118;
	bool IsAdd = 245;
}

message EntityRemoveNotify {
	repeated EntityRemoveInfo RemoveInfos = 232;
	bool IsRemove = 161;
}

message SourceRefPb {
	int32 Type = 1;
	int32 TypeId = 2;
	string Name = 3;
}

enum DestroyType {
	DestroyType_NotDelay = 0;
	DestroyType_Delay = 1;
}

message VarDefinePb {
	oneof Value {
		bool Boolean = 2;
		string String = 4;
		int32 Entity = 6;
		int32 QuestState = 8;
		int64 Prefab = 10;
	}

	int32 VarType = 1;
	int64 Int = 3;
	float Float = 5;
	int32 Quest = 7;
	Vector Pos = 9;
}

message ConstVarRefPb {
	VarDefinePb Value = 1;
}

message SelfVarRefPb {
	string Name = 1;
}

message GlobalVarRefPb {
	string Name = 1;
}

message VarRefPb {
	oneof VarRef_ {
		ConstVarRefPb ConstVarRef = 2;
		GlobalVarRefPb GlobalVarRef = 4;
	}

	int32 SourceType = 1;
	SelfVarRefPb SelfVarRef = 3;
}

message NpcPb {
	int32 SplineEntityId = 2;
	int32 SpawnEntityId = 3;
}

message EntityGroupTriggerNotify {
	int64 EntityId = 32;
}

enum TriggerType {
	TriggerType_TriggerEnter = 0;
	TriggerType_TriggerLeave = 1;
}

message EntityTriggerCountNotify {
	int64 EntityId = 107;
	int32 EntityTriggerCount = 214;
	int32 TriggerType = 147;
}

message EntityTriggerConditionRequest {
	int64 EntityId = 239;
	int32 TriggerType = 250;
	int64 TriggeringEntityId = 129;
}

message EntityTriggerConditionResponse {
	int32 Code = 10;
	int32 EntityTriggerCount = 191;
	int32 TriggerType = 200;
}

message EntityTriggerOnlineRequest {
	int64 EntityId = 30;
	int32 TriggerType = 41;
	int64 TriggeringEntityId = 202;
}

message EntityTriggerOnlineResponse {
	int32 Code = 161;
}

message EntityTriggerOnlineNotify {
	int64 EntityId = 177;
	int32 TriggerType = 77;
	repeated int64 TriggerEntities = 235;
	int32 EntityTriggerCount = 127;
	int64 TriggeringEntityId = 198;
}

message CommonOrganActionListNotify {
	int32 Id = 227;
	int32 ActionIndex = 48;
}

message EntityChangeLockRequest {
	int32 EntityId = 65;
	bool IsLock = 224;
}

message EntityChangeLockResponse {
	int32 ErrorCode = 39;
}

message TestSpawnTemplateEntityPush {
	int64 Id = 1;
	int32 ConfigId = 153;
	Vector Pos = 136;
	Rotator Rot = 51;
	int32 Level = 166;
	int32 ExtraRatioConfId = 174;
}

enum LivingStatus {
	LivingStatus_Alive = 0;
	LivingStatus_Dead = 1;
}

enum EntityState {
	EntityState_Default = 0;
	EntityState_Sleep = 1;
	EntityState_Born = 2;
	EntityState_Other = 3;
}

message EntranceStateNotify {
	int64 Id = 240;
	int32 State = 1;
}

message EntityBuffProducerRequest {
	int64 BuffConsumerId = 202;
}

message EntityBuffProducerResponse {
	int32 ErrorCode = 4;
}

enum BuffOperateType {
	BuffOperateType_AddBuff = 0;
	BuffOperateType_RemoveBuff = 1;
	BuffOperateType_UndoBuff = 2;
}

message EntityBuffProducerOperateRequest {
	int32 OpType = 142;
	int64 OpEntityId = 106;
}

message EntityBuffProducerOperateResponse {
	int32 ErrorCode = 74;
	int32 OpType = 21;
	int64 OpEntityId = 174;
}

message LogicStateInitRequest {
	CombatCommon CombatCommon = 79;
	int64 EntityId = 50;
	LogicStateComponentPb InitData = 242;
}

message LogicStateInitResponse {
}

message LogicStateInitNotify {
	CombatCommon CombatCommon = 209;
	int64 EntityId = 48;
	LogicStateComponentPb InitData = 163;
}

message SwitchLogicStateRequest {
	repeated int32 States = 28;
}

message SwitchLogicStateResponse {
	int32 ErrorCode = 250;
}

message SwitchLogicStateNotify {
	repeated int32 States = 8;
}

message EntityActiveRequest {
	int64 EntityId = 165;
}

message EntityActiveResponse {
	int32 ErrorCode = 184;
	repeated EntityComponentPb ComponentPbs = 140;
	bool IsVisible = 129;
	Vector Pos = 124;
	Rotator Rot = 69;
}

message AnimationGameplayTagRequest {
	repeated int32 AddTagIds = 219;
	repeated int32 RemoveTagIds = 117;
}

message AnimationGameplayTagResponse {
	int32 ErrorCode = 106;
}

message AnimationGameplayTagNotify {
	repeated int32 AddTagIds = 16;
	repeated int32 RemoveTagIds = 86;
}

message AnimalDieRequest {
	int64 EntityId = 173;
	Vector Pos = 189;
}

message AnimalDieResponse {
	int32 ErrorCode = 62;
}

message AnimalDieNotify {
	int64 EntityId = 243;
	int32 PlayerId = 93;
}

message AnimalDestroyRequest {
	int64 EntityId = 24;
}

message AnimalDestroyResponse {
	int32 ErrorCode = 174;
}

message AnimalDropRequest {
	int64 EntityId = 157;
}

message AnimalDropResponse {
	int32 ErrorCode = 192;
}

message EntityStateReadyNotify {
	int64 EntityId = 104;
	int32 TagId = 238;
	bool Ready = 233;
}

message EntityInteractRequest {
	int64 EntityId = 242;
	int32 OptionIndex = 87;
	int64 VisionEntityId = 226;
}

message EntityInteractResponse {
	int32 ErrorCode = 81;
	bool Interacting = 69;
}

message EntityRandomInteractRequest {
	int64 EntityId = 187;
	int32 OptionIndex = 184;
}

message EntityRandomInteractResponse {
	int32 ErrorCode = 178;
	bool Interacting = 17;
}

message EntityDynamicInteractRequest {
	int64 EntityId = 93;
	string OptionGuid = 34;
}

message EntityDynamicInteractResponse {
	int32 ErrorCode = 83;
	bool Interacting = 229;
}

message EntityAddDynamicInteractNotify {
	int64 EntityId = 240;
	string OptionGuid = 7;
	GameCtxPb GameCtx = 194;
	string Text = 95;
}

message EntityChangeDynamicInteractTextNotify {
	int64 EntityId = 66;
	string OptionGuid = 104;
	string Text = 62;
}

message EntityRemoveDynamicInteractNotify {
	int64 EntityId = 32;
	string OptionGuid = 137;
}

message EntityInteractingNotify {
	int64 EntityId = 148;
	bool IsInteracting = 175;
}

message EntityAddBubbleNotify {
	int64 EntityId = 52;
	string ActionGuid = 48;
}

message EntityRemoveBubbleNotify {
	int64 EntityId = 57;
	string ActionGuid = 154;
}

message EntityPosAbnormalRequest {
	int64 EntityId = 102;
	bool IsAbnormal = 25;
}

message EntityPosAbnormalResponse {
	int32 Code = 148;
}

message EntityAdsorbRequest {
	int32 EntityId = 253;
}

message EntityAdsorbResponse {
	int32 ErrorCode = 47;
}

message BoneVisibleChangeRequest {
	BoneVisibleData BoneVisibleData = 89;
}

message BoneVisibleChangeResponse {
	int32 ErrorCode = 240;
}

message BoneVisibleChangeNotify {
	BoneVisibleData BoneVisibleData = 163;
}

message EquipComponentPb {
	int32 WeaponId = 1;
	int32 WeaponBreachLevel = 2;
}

message EntityEquipChangeNotify {
	int64 EntityId = 167;
	EquipComponentPb EquipComponent = 38;
}

message EntityStaticHookMoveRequest {
	int64 EntityId = 180;
	Vector Pos = 137;
}

message EntityStaticHookMoveResponse {
	int32 ErrorCode = 125;
}

message EntityStaticHookMoveNotify {
	int64 EntityId = 22;
	Vector Pos = 9;
}

message SilenceNpcNotify {
}

enum ELogicStateType {
	ELogicStateType_CharPositionState = 0;
	ELogicStateType_CharMoveState = 1;
	ELogicStateType_CharDirectionState = 2;
	ELogicStateType_CharPositionSubState = 3;
}

enum ECharPositionState {
	ECharPositionState_Ground = 0;
	ECharPositionState_Climb = 1;
	ECharPositionState_Air = 2;
	ECharPositionState_Water = 3;
}

enum ECharPositionSubState {
	ECharPositionSubState_None = 0;
	ECharPositionSubState_WaterSurface = 1;
}

enum ECharMoveState {
	ECharMoveState_MoveStateOther = 0;
	ECharMoveState_MoveStateStand = 1;
	ECharMoveState_MoveStateWalk = 2;
	ECharMoveState_MoveStateWalkStop = 3;
	ECharMoveState_MoveStateRun = 4;
	ECharMoveState_MoveStateRunStop = 5;
	ECharMoveState_MoveStateSprint = 6;
	ECharMoveState_MoveStateSprintStop = 7;
	ECharMoveState_MoveStateDodge = 8;
	ECharMoveState_MoveStateLandRoll = 9;
	ECharMoveState_MoveStateKnockDown = 10;
	ECharMoveState_MoveStateParry = 11;
	ECharMoveState_MoveStateSoftKnock = 12;
	ECharMoveState_MoveStateHeavyKnock = 13;
	ECharMoveState_MoveStateNormalClimb = 14;
	ECharMoveState_MoveStateFastClimb = 15;
	ECharMoveState_MoveStateGlide = 16;
	ECharMoveState_MoveStateKnockUp = 17;
	ECharMoveState_MoveStateFastSwim = 18;
	ECharMoveState_MoveStateNormalSwim = 19;
	ECharMoveState_MoveStateSwing = 20;
	ECharMoveState_MoveStateCaptured = 21;
	ECharMoveState_MoveStateSlide = 22;
	ECharMoveState_MoveStateFlying = 23;
	ECharMoveState_MoveStateEnterClimb = 24;
	ECharMoveState_MoveStateExitClimb = 25;
}

message EntityPatrolStartRequest {
	int64 EntityId = 17;
	bool Dir = 47;
}

message EntityPatrolStartResponse {
	int32 Code = 152;
}

message EntityPatrolStopRequest {
	int64 EntityId = 225;
}

message EntityPatrolStopResponse {
	int32 Code = 73;
}

message EntityPatrolChangeDirRequest {
	int64 EntityId = 26;
	bool Dir = 125;
}

message EntityPatrolChangeDirResponse {
	int32 Code = 20;
}

message PatrolComponentPb {
	bool Dir = 1;
}

message VfxNpcPatrolFinishRequest {
	int64 EntityId = 64;
}

message VfxNpcPatrolFinishResponse {
	int32 Code = 90;
}

message EntitySendEventRequest {
	int64 EntityId = 171;
	string EventKey = 242;
}

message EntitySendEventResponse {
	int32 ErrorCode = 136;
}

message AccessPasserbyNpcSpawnerRequest {
	int64 EntityId = 86;
	int32 SplineConfigId = 169;
	bool IsSplneNotValid = 55;
}

message AccessPasserbyNpcSpawnerResponse {
	int32 ErrorCode = 79;
}

message VisionSkillInformation {
	int32 SkillId = 1;
	int32 Level = 2;
	repeated int32 StoneIds = 3;
	int32 Quality = 4;
}

message VisionSkillChangeNotify {
	int64 EntityId = 245;
	repeated VisionSkillInformation VisionSkillInfos = 203;
	int64 VisionEntityId = 223;
}

message PartComponentPb {
	repeated PartInformation PartLifeInfos = 1;
}

message PartComponentInitRequest {
	int64 EntityId = 228;
	PartComponentPb PartComponent = 245;
}

message PartComponentInitResponse {
}

message PartComponentInitNotify {
	int64 EntityId = 84;
	PartComponentPb PartComponent = 167;
}

message PartInformation {
	int32 PartId = 1;
	float LifeValue = 2;
	float LifeMax = 3;
	bool Activated = 4;
	int32 PartTag = 5;
}

message PartUpdateInfo {
	int32 PartId = 1;
	bool Activated = 2;
	bool Reset = 3;
}

message PartUpdateRequest {
	int64 EntityId = 73;
	repeated PartUpdateInfo PartUpdateInfos = 88;
}

message PartUpdateResponse {
	int32 ErrorCode = 184;
}

message PartUpdateNotify {
	int64 EntityId = 203;
	repeated PartInformation PartInfos = 43;
}

enum ApplyGEType {
	ApplyGEType_Common = 0;
	ApplyGEType_UseExtraTime = 1;
}

message ApplyGameplayEffectRequest {
	oneof Duration_ {
		float Duration = 148;
	}

	int32 Handle = 60;
	int64 Id = 190;
	int32 Level = 110;
	int64 EntityId = 217;
	int64 InstigatorId = 123;
	int32 ApplyType = 21;
	int32 ServerId = 234;
	int32 StackCount = 220;
	bool IsActive = 81;
}

message ApplyGameplayEffectResponse {
	int32 ErrCode = 221;
}

message ApplyGameplayEffectNotify {
	oneof Duration_ {
		float Duration = 74;
	}

	int32 Handle = 9;
	int64 Id = 21;
	int32 Level = 208;
	int64 EntityId = 251;
	int64 InstigatorId = 246;
	int32 ApplyType = 136;
	bool IsActive = 145;
	int32 ServerId = 11;
	int32 StackCount = 37;
}

message RemoveGameplayEffectRequest {
	int32 Handle = 105;
	int64 EntityId = 145;
	bool IsPrematureRemoval = 189;
}

message RemoveGameplayEffectResponse {
	int32 ErrCode = 204;
	int32 Handle = 59;
}

message RemoveGameplayEffectNotify {
	int32 Handle = 209;
	int64 EntityId = 151;
}

message OrderApplyBuffRequest {
	oneof Duration_ {
		float Duration = 204;
	}

	int64 Id = 218;
	int32 Level = 3;
	int64 InstigatorId = 173;
	int32 ApplyType = 125;
	int32 ServerId = 228;
	int32 StackCount = 135;
	bool IsIterable = 90;
}

message OrderApplyBuffResponse {
	int32 ErrorCode = 11;
}

message OrderRemoveBuffRequest {
	int64 Id = 165;
	int32 StackCount = 52;
}

message OrderRemoveBuffResponse {
	int32 ErrorCode = 245;
}

message OrderApplyBuffNotify {
	oneof Duration_ {
		float Duration = 223;
	}

	int64 Id = 135;
	int32 Level = 235;
	int64 InstigatorId = 100;
	int32 ApplyType = 238;
	int32 ServerId = 152;
	int32 StackCount = 11;
	bool IsIterable = 191;
}

message OrderRemoveBuffNotify {
	int64 Id = 148;
	int32 StackCount = 202;
}

message ApplyBuffS2cRequestNotify {
	oneof Duration_ {
		float Duration = 126;
	}

	int64 Id = 100;
	int32 Level = 11;
	int64 InstigatorId = 247;
	int32 ApplyType = 41;
	int32 ServerId = 214;
	int32 StackCount = 112;
	bool IsIterable = 5;
	int32 Reason = 156;
}

message ApplyBuffS2cResponsePush {
	int32 ErrorCode = 144;
	int32 Handle = 112;
	bool IsActive = 169;
}

message RemoveBuffS2cRequestNotify {
	int32 Handle = 244;
	int32 StackCount = 127;
	int32 Reason = 243;
}

message RemoveBuffS2cResponsePush {
	int32 ErrorCode = 233;
}

message RemoveBuffByIdS2cRequestNotify {
	int64 BuffId = 198;
	int32 StackCount = 154;
	int32 Reason = 172;
}

message RemoveBuffByIdS2cResponsePush {
	int32 ErrorCode = 181;
}

message ActivateBuffRequest {
	int32 Handle = 103;
	bool On = 16;
}

message ActivateBuffResponse {
	int32 ErrorCode = 86;
}

message ActivateBuffNotify {
	int32 Handle = 219;
	bool On = 247;
}

message OrderRemoveBuffByTagsRequest {
	repeated int32 TagIds = 92;
}

message OrderRemoveBuffByTagsResponse {
	int32 ErrorCode = 66;
}

message OrderRemoveBuffByTagsNotify {
	repeated int32 TagIds = 245;
}

message AttributeEventEffectData {
	repeated int32 TriggeredActiveHandles = 1;
}

message FightBuffEffectContext {
	oneof EffectData_ {
		AttributeEventEffectData AttributeEventEffectData = 6;
	}

	float LeftCooldown = 1;
}

message BuffEffectExecuteRequest {
	int32 index = 46;
	FightBuffEffectContext Context = 199;
}

message BuffEffectExecuteResponse {
	int32 code = 68;
}

message BuffStackCountRequest {
	int32 HandleId = 80;
	int32 NewStackCount = 216;
	bool IsPrematureRemoval = 119;
	int64 InstigatorId = 56;
}

message BuffStackCountResponse {
	int32 ErrorCode = 109;
}

message BuffStackCountNotify {
	int32 HandleId = 99;
	int32 NewStackCount = 237;
}

message FormationBuff {
	oneof LeftDuration_ {
		float LeftDuration = 7;
	}

	int32 Handle = 1;
	int64 Id = 2;
	int32 Level = 3;
	int64 InstigatorId = 4;
	int32 ApplyType = 5;
	float Duration = 6;
	int32 ServerId = 8;
	int32 StackCount = 9;
	bool IsActive = 10;
}

message FormationBuffApplyRequest {
	oneof Duration_ {
		float Duration = 139;
	}

	int32 Handle = 72;
	int64 Id = 53;
	int32 Level = 167;
	int64 InstigatorId = 45;
	int32 ApplyType = 17;
	int32 ServerId = 56;
	int32 StackCount = 101;
	bool IsActive = 208;
}

message FormationBuffApplyResponse {
	int32 ErrCode = 243;
}

message FormationBuffApplyNotify {
	oneof Duration_ {
		float Duration = 236;
	}

	int32 Handle = 187;
	int64 Id = 117;
	int32 Level = 165;
	int64 InstigatorId = 208;
	int32 ApplyType = 237;
	int32 ServerId = 31;
	int32 StackCount = 30;
	bool IsActive = 96;
	int32 PlayerId = 24;
}

message FormationBuffRemoveRequest {
	int32 Handle = 209;
	bool IsPrematureRemoval = 170;
}

message FormationBuffRemoveResponse {
	int32 ErrCode = 255;
}

message FormationBuffRemoveNotify {
	int32 PlayerId = 33;
	int32 Handle = 19;
}

message FormationBuffActivateRequest {
	int32 Handle = 210;
	bool On = 139;
}

message FormationBuffActivateResponse {
	int32 ErrCode = 189;
}

message FormationBuffActivateNotify {
	int32 PlayerId = 63;
	int32 Handle = 119;
	bool On = 32;
}

message FormationBuffStackRequest {
	int32 HandleId = 152;
	int32 NewStackCount = 139;
}

message FormationBuffStackResponse {
	int32 ErrorCode = 110;
}

message FormationBuffStackNotify {
	int32 PlayerId = 196;
	int32 HandleId = 185;
	int32 NewStackCount = 165;
}

message FormationBuffApplyS2cRequestNotify {
	oneof Duration_ {
		float Duration = 214;
	}

	int64 Id = 53;
	int32 Level = 225;
	int64 InstigatorId = 131;
	int32 ApplyType = 211;
	int32 ServerId = 23;
	int32 StackCount = 250;
	int32 Reason = 55;
}

message FormationBuffApplyS2cResponsePush {
	int32 ErrCode = 169;
	int32 Handle = 235;
	bool IsActive = 159;
}

message FormationBuffRemoveS2cRequestNotify {
	int32 Handle = 35;
	int32 Reason = 182;
	int32 StackCount = 238;
}

message FormationBuffRemoveS2cResponsePush {
	int32 ErrCode = 213;
}

message FormationBuffRemoveByIdS2cRequestNotify {
	int64 BuffId = 119;
	int32 Reason = 142;
	int32 StackCount = 92;
}

message FormationBuffRemoveByIdS2cResponsePush {
	int32 ErrCode = 141;
}

message BuffEffectCd {
	int64 BuffId = 1;
	repeated int32 ListCdRemaining = 2;
}

message BuffEffectRequest {
	int32 HandleId = 146;
	int32 Index = 50;
}

message BuffEffectResponse {
	int32 ErrCode = 217;
}

message ChangeStateRequest {
	int32 FsmId = 18;
	int32 FromState = 6;
	int32 ToState = 205;
}

message ChangeStateResponse {
	int32 FsmId = 244;
	DErrorResult Error = 76;
}

message ChangeStateNotify {
	int32 FsmId = 233;
	int32 FromState = 201;
	int32 ToState = 28;
}

message ChangeStateConfirmRequest {
	int32 FsmId = 217;
	int32 State = 76;
}

message ChangeStateConfirmResponse {
	int32 FsmId = 81;
	int32 State = 216;
	DErrorResult Error = 43;
}

message ChangeStateConfirmNotify {
	int32 FsmId = 173;
	int32 State = 49;
}

message DFsm {
	int32 FsmId = 1;
	int32 CurrentState = 2;
	int32 Flag = 3;
}

message EntityFsmComponentPb {
	repeated DFsm Fsms = 1;
	int32 HashCode = 2;
	int32 CommonHashCode = 3;
	repeated DFsmBlackBoard BlackBoard = 4;
	FsmCustomBlackboardDatas FsmCustomBlackboardDatas = 5;
}

enum EFsmStateFlag {
	EFsmStateFlag_Changed = 0;
	EFsmStateFlag_Confirmed = 1;
}

message FsmConditionPassRequest {
	int32 FsmId = 42;
	int32 FromState = 140;
	int32 ToState = 111;
	int32 ConditionIndex = 14;
	bool Value = 65;
}

message FsmConditionPassResponse {
	int32 FsmId = 116;
	DErrorResult Error = 47;
}

message FsmResetNotify {
	EntityFsmComponentPb EntityFsmComponentPb = 228;
}

message FsmBlackboardNotify {
	repeated DFsmBlackBoard FsmBlackBoards = 191;
}

message FsmCustomBlackboardDatas {
	repeated DFsmBlackboardCustom BlackboardIntValues = 1;
}

message FsmCustomBlackboardNotify {
	FsmCustomBlackboardDatas FsmCustomBlackboardDatas = 77;
}

message DFsmBlackBoard {
	int32 Key = 1;
	int32 Value = 2;
}

message DFsmBlackboardCustom {
	string Key = 1;
	int32 Value = 2;
}

message GmEntityFsmGroupInfoRequest {
	int64 EntityId = 205;
}

message GmEntityFsmGroupInfoResponse {
	int64 EntityId = 181;
	repeated GmEntityFsmMachineInfo GmEntityFsmMachineInfos = 135;
}

message GmEntityFsmMachineInfo {
	int32 StateIndex = 1;
	repeated GmEntityFsmStateInfo GmEntityFsmStateInfos = 2;
}

message GmEntityFsmStateInfo {
	int32 StateIndex = 1;
	repeated GmEntityFsmTransitionInfo GmEntityFsmTransitionInfos = 2;
}

message GmEntityFsmTransitionInfo {
	int32 ToStateIndex = 1;
	repeated bool GmEntityFsmConditions = 2;
}

message BoardGridDynamicConfig {
	sint32 RowIndex = 1;
	sint32 ColumnIndex = 2;
	sint64 Flags = 3;
}

message PlacementItemPb {
	int32 LocatedBoardEntityConfigId = 1;
}

message BoardGridPositionInfo {
	int32 Row = 1;
	int32 Column = 2;
	int32 RotAngle = 3;
}

message OccupiedBoardGridInfo {
	BoardGridPositionInfo Pos = 1;
	int32 OccupyingEntityConfigId = 2;
	int32 EntityConfigType = 3;
}

message PositionAndRotate {
	Vector Pos = 1;
	Rotator Rot = 2;
}

message RemovePlacementFromBoardNotify {
	int64 BoardEntityId = 230;
	int32 PlacementEntityConfigId = 113;
	int32 EntityConfigType = 91;
}

message AddPlacementNotify {
	OccupiedBoardGridInfo GridInfo = 47;
	int64 BoardEntityId = 53;
}

message PlacementInfoChangeInfo {
	PlacementItemPb PlacementItemPb = 1;
	int64 PlacementEntityId = 2;
}

message PlacementInfoChangeNotify {
	repeated PlacementInfoChangeInfo ChangedList = 241;
}

message PlaceItemOnBoardRequest {
	oneof PositionAndRotateSet {
		PositionAndRotate PosRot = 201;
	}

	int64 TargetBoardEntityId = 124;
	int64 PlacementEntityId = 229;
	int32 ToPlace = 7;
	BoardGridPositionInfo PosOnBoard = 4;
}

message PlaceItemOnBoardResponse {
	int32 ErrCode = 172;
	int32 ToPlace = 39;
}

message PlaceItemOnBoardNotify {
	int64 TargetBoardEntityId = 229;
	int64 PlacementEntityId = 8;
	int32 ToPlace = 163;
	BoardGridPositionInfo PosOnBoard = 1;
}

message CommitBoardRequest {
	int64 BoardEntityId = 35;
}

message CommitBoardResponse {
	int32 ErrCode = 95;
}

message CommitBoardSuccessNotify {
	int64 BoardEntityId = 144;
}

message MovePlacementRequest {
	oneof PositionAndRotateSet {
		PositionAndRotate PosRot = 59;
	}

	int64 TargetBoardEntityId = 243;
	int64 PlacementEntityId = 230;
	BoardGridPositionInfo PosOnBoard = 86;
}

message MovePlacementResponse {
	int32 ErrCode = 158;
}

message MovePlacementNotify {
	oneof PositionAndRotateSet {
		PositionAndRotate PosRot = 199;
	}

	int64 TargetBoardEntityId = 187;
	int64 PlacementEntityId = 124;
	BoardGridPositionInfo PosOnBoard = 49;
}

message BoardGridDynamicConfigChangeNotify {
	int64 BoardEntityId = 79;
	repeated BoardGridDynamicConfig ChangedConfigs = 195;
}

message BlockListRequest {
}

message BlockListResponse {
	repeated PlayerDetails BlockList = 64;
	int32 ErrorCode = 199;
}

message BlockPlayerRequest {
	int32 Id = 185;
}

message BlockPlayerResponse {
	PlayerDetails Info = 149;
	int32 ErrorCode = 226;
}

message UnblockPlayerRequest {
	int32 Id = 92;
}

message UnblockPlayerResponse {
	int32 ErrorCode = 126;
}

message BuffItem {
	int32 ItemId = 1;
	int64 CdTime = 3;
}

message BuffItemRequest {
	int32 ItemId = 65;
	int32 Num = 71;
	int32 RoleId = 25;
}

message BuffItemResponse {
	int32 ErrorCode = 99;
	BuffItem BuffItemInfo = 11;
	int32 RoleId = 229;
}

message BuffItemNotify {
	repeated BuffItem ItemBuffList = 97;
}

message BuffItemUpdateNotify {
	BuffItem BuffItem = 160;
}

message CalabashDevelopConditionState {
	int32 ConditionId = 1;
	bool Rewarded = 2;
}

message CalabashDevelopInfo {
	int32 MonsterId = 1;
	repeated CalabashDevelopConditionState UnlockConditions = 2;
}

message CalabashMsg {
	int32 Level = 1;
	int32 Exp = 2;
	repeated int32 UnlockedLevels = 3;
	repeated CalabashDevelopInfo UnlockedDevelopRewards = 4;
	int32 IdentifyGuaranteeCount = 5;
}

message CalabashCfg {
	int32 LevelUpExp = 1;
	int32 LevelUpCondition = 3;
	map<int32, int32> CatchGain = 4;
}

message CalabashMsgNotify {
	CalabashMsg CalabashMsg = 93;
	CalabashCfg CalabashCfg = 96;
}

message CalabashMsgRequest {
}

message CalabashMsgResponse {
	int32 ErrCode = 102;
	CalabashMsg CalabashMsg = 99;
	CalabashCfg CalabashCfg = 129;
}

message CalabashExpAddNotify {
	int32 CurExp = 94;
	int32 AddExp = 133;
	int32 CurLevel = 57;
	CalabashCfg CalabashCfg = 17;
}

message CalabashDevelopRewardUnlockNotify {
	CalabashDevelopInfo UnlockedDevelopReward = 28;
	int32 itemId = 172;
	int32 IncrId = 44;
}

message CalabashLevelsRewardNotify {
	repeated int32 RewardedLevels = 114;
}

message CalabashLevelRewardRequest {
	int32 Level = 211;
}

message CalabashLevelRewardResponse {
	int32 ErrorCode = 181;
}

message CdKeyVerifyRequest {
	string CdKey = 110;
}

message CdKeyVerifyResponse {
	int32 ErrorCode = 13;
}

message ChatRequest {
	int32 ChannelId = 248;
	string Content = 196;
	repeated string ChatParams = 184;
}

message ChatResponse {
	int32 ErrorCode = 255;
	repeated string ErrorParams = 151;
	map<int32, string> Data = 45;
}

message ChatNotify {
	string Content = 69;
}

message SysInfoNotify {
	int32 ErrorCode = 53;
	repeated string ErrorParams = 125;
}

message SysErrorNotify {
	int32 ErrorCode = 232;
	repeated string ErrorParams = 149;
}

message ConsoleNotify {
	string Type = 50;
	string Content = 160;
}

enum ChatContentType {
	ChatContentType_Text = 0;
	ChatContentType_Emoji = 1;
}

message PrivateChatRequest {
	int32 TargetUID = 90;
	int32 ChatContentType = 188;
	string Content = 29;
}

message PrivateChatResponse {
	int32 TargetUID = 237;
	int32 ErrorCode = 135;
	string MsgId = 255;
	string FilterMsg = 182;
}

message ChatContentProto {
	int32 SenderUID = 1;
	int32 ChatContentType = 2;
	string Content = 3;
	bool OfflineMsg = 4;
	int64 UTCTime = 5;
	string MsgId = 6;
}

message PrivateMessageNotify {
	ChatContentProto ChatContent = 36;
}

message PrivateChatHistoryRequest {
	int32 TargetUID = 38;
	int32 StartIndex = 3;
}

message PrivateChatHistoryResponse {
	int32 ErrorCode = 176;
	PrivateChatHistoryContentProto Data = 88;
}

message PrivateChatHistoryContentProto {
	int32 TargetUID = 1;
	repeated ChatContentProto Chats = 2;
	bool HistoryIsEnd = 3;
	int32 TotalNums = 4;
}

message PrivateChatHistoryNotify {
	repeated PrivateChatHistoryContentProto AllChats = 14;
}

message PrivateChatDataRequest {
}

message PrivateChatDataResponse {
	int32 ErrorCode = 174;
}

message ChatMutePlayerRequest {
	int32 TargetUID = 39;
	bool Mute = 255;
}

message ChatMutePlayerResponse {
	int32 ErrorCode = 174;
	repeated int32 RemoveMutes = 56;
}

enum PrivateChatOperateType {
	PrivateChatOperateType_CloseChat = 0;
	PrivateChatOperateType_OpenChat = 1;
	PrivateChatOperateType_ReadMsg = 2;
}

message PrivateChatOperateRequest {
	int32 OperateType = 217;
	int32 TarPlayerId = 241;
}

message PrivateChatOperateResponse {
	int32 ErrorCode = 155;
}

message ChatMutePlayerListNotify {
	repeated int32 PlayerId = 102;
}

enum ChatChannelType {
	ChatChannelType_Default = 0;
	ChatChannelType_Private = 1;
	ChatChannelType_Team = 2;
}

enum SubChatChannelType {
	SubChatChannelType_WorldTeam = 0;
	SubChatChannelType_MatchTeam = 1;
}

message ChannelChatRequest {
	int32 ChannelType = 110;
	int32 SubChannelType = 156;
	int32 ChatContentType = 22;
	string Content = 194;
}

message ChannelChatResponse {
	int32 ErrorCode = 167;
}

message ChannelChatMessageNotify {
	int32 ChannelType = 70;
	int32 SubChannelType = 169;
	ChannelChatMessageInfo MessageInfo = 213;
}

enum ChatChannelNoticeType {
	ChatChannelNoticeType_None = 0;
	ChatChannelNoticeType_EnterTeam = 1;
	ChatChannelNoticeType_ExitTeam = 2;
}

message ChannelChatMessageInfo {
	int32 SenderId = 1;
	int32 SenderIcon = 2;
	string SenderName = 3;
	int32 ChatContentType = 4;
	string Content = 5;
	int32 NoticeType = 6;
	int64 SendTime = 7;
}

message ChannelChatHistoryNotify {
	int32 ChannelType = 26;
	int32 SubChannelType = 137;
	repeated ChannelChatMessageInfo MessageInfos = 228;
}

message CombatMessage {
	message CombatPushData {
		oneof Message {
			FormationBuffApplyS2cResponsePush FormationBuffApplyS2cResponsePush = 2;
			ApplyBuffS2cResponsePush ApplyBuffS2cResponsePush = 4;
			RemoveBuffByIdS2cResponsePush RemoveBuffByIdS2cResponsePush = 6;
		}

		CombatCommon CombatCommon = 1;
		FormationBuffRemoveS2cResponsePush FormationBuffRemoveS2cResponsePush = 3;
		RemoveBuffS2cResponsePush RemoveBuffS2cResponsePush = 5;
		FormationBuffRemoveByIdS2cResponsePush FormationBuffRemoveByIdS2cResponsePush = 7;
	}


	message CombatNotifyData {
		oneof Message {
			CreateBulletNotify CreateBulletNotify = 2;
			DamageExecuteNotify DamageExecuteNotify = 4;
			RemoveGameplayEffectNotify RemoveGameplayEffectNotify = 6;
			SkillNotify SkillNotify = 8;
			EndSkillNotify EndSkillNotify = 10;
			PartUpdateNotify PartUpdateNotify = 12;
			MaterialNotify MaterialNotify = 15;
			SwitchCharacterStateNotify SwitchCharacterStateNotify = 18;
			LogicStateInitNotify LogicStateInitNotify = 20;
			AttributeChangedNotify AttributeChangedNotify = 22;
			AnimationStateInitNotify AnimationStateInitNotify = 24;
			DrownNotify DrownNotify = 26;
			OrderRemoveBuffNotify OrderRemoveBuffNotify = 28;
			OrderRemoveBuffByTagsNotify OrderRemoveBuffByTagsNotify = 30;
			BattleStateChangeNotify BattleStateChangeNotify = 32;
			BoneVisibleChangeNotify BoneVisibleChangeNotify = 34;
			CaughtNotify CaughtNotify = 36;
			ChangeStateNotify ChangeStateNotify = 38;
			BuffStackCountNotify BuffStackCountNotify = 41;
			ANStartNotify ANStartNotify = 43;
			Debug.DamageRecordNotify DamageRecordNotify = 45;
			FsmBlackboardNotify FsmBlackboardNotify = 47;
			FormationBuffApplyNotify FormationBuffApplyNotify = 49;
			FormationBuffApplyS2cRequestNotify FormationBuffApplyS2cRequestNotify = 51;
			ApplyBuffS2cRequestNotify ApplyBuffS2cRequestNotify = 53;
			FormationBuffRemoveNotify FormationBuffRemoveNotify = 55;
			ActorVisibleNotify ActorVisibleNotify = 57;
			RemoveBuffByIdS2cRequestNotify RemoveBuffByIdS2cRequestNotify = 59;
			ShieldUpdateNotify ShieldUpdateNotify = 61;
			FsmCustomBlackboardNotify FsmCustomBlackboardNotify = 63;
			PassiveSkillRemoveNotify PassiveSkillRemoveNotify = 65;
		}

		CombatCommon CombatCommon = 1;
		DestroyBulletNotify DestroyBulletNotify = 3;
		ApplyGameplayEffectNotify ApplyGameplayEffectNotify = 5;
		HitNotify HitNotify = 7;
		UseSkillNotify UseSkillNotify = 9;
		EntityLoadCompleteNotify EntityLoadCompleteNotify = 11;
		PartComponentInitNotify PartComponentInitNotify = 14;
		EntityIsVisibleNotify EntityIsVisibleNotify = 17;
		PlayerRebackSceneNotify PlayerRebackSceneNotify = 19;
		SwitchLogicStateNotify SwitchLogicStateNotify = 21;
		AnimationStateChangedNotify AnimationStateChangedNotify = 23;
		ModifyBulletParamsNotify ModifyBulletParamsNotify = 25;
		OrderApplyBuffNotify OrderApplyBuffNotify = 27;
		ActivateBuffNotify ActivateBuffNotify = 29;
		Ai.AiInformationNotify AiInformationNotify = 31;
		AnimationGameplayTagNotify AnimationGameplayTagNotify = 33;
		Ai.AiBlackboardCdNotify AiBlackboardCdNotify = 35;
		EntityStaticHookMoveNotify EntityStaticHookMoveNotify = 37;
		ChangeStateConfirmNotify ChangeStateConfirmNotify = 40;
		MontagePlayNotify MontagePlayNotify = 42;
		FsmResetNotify FsmResetNotify = 44;
		Ai.AiHateNotify AiHateNotify = 46;
		CharacterBattleStateChangeNotify CharacterBattleStateChangeNotify = 48;
		FormationBuffStackNotify FormationBuffStackNotify = 50;
		FormationBuffRemoveS2cRequestNotify FormationBuffRemoveS2cRequestNotify = 52;
		RemoveBuffS2cRequestNotify RemoveBuffS2cRequestNotify = 54;
		FormationBuffActivateNotify FormationBuffActivateNotify = 56;
		RecoverPropChangedNotify RecoverPropChangedNotify = 58;
		FormationBuffRemoveByIdS2cRequestNotify FormationBuffRemoveByIdS2cRequestNotify = 60;
		PlayerBattleStateChangeNotify PlayerBattleStateChangeNotify = 62;
		PassiveSkillAddNotify PassiveSkillAddNotify = 64;
	}


	message CombatContext {
		oneof Message {
			FsmStateChangeContext FsmStateChangeContext = 1;
			MontageContext MontageContext = 3;
			BulletContext BulletContext = 5;
		}

		SkillContext SkillContext = 2;
		AddBuffContext AddBuffContext = 4;
	}


	message CombatRequestData {
		oneof Message_ {
			CreateBulletRequest CreateBulletRequest = 3;
			DamageExecuteRequest DamageExecuteRequest = 5;
			RemoveGameplayEffectRequest RemoveGameplayEffectRequest = 7;
			HitEndRequest HitEndRequest = 9;
			UseSkillRequest UseSkillRequest = 11;
			PartUpdateRequest PartUpdateRequest = 13;
			EntityIsVisibleRequest EntityIsVisibleRequest = 16;
			LogicStateInitRequest LogicStateInitRequest = 18;
			AnimationStateChangedRequest AnimationStateChangedRequest = 20;
			ModifyBulletParamsRequest ModifyBulletParamsRequest = 22;
			OrderApplyBuffRequest OrderApplyBuffRequest = 24;
			ActivateBuffRequest ActivateBuffRequest = 26;
			Ai.AiInformationRequest AiInformationRequest = 28;
			BattleStateChangeRequest BattleStateChangeRequest = 30;
			BoneVisibleChangeRequest BoneVisibleChangeRequest = 32;
			Ai.AiBlackboardCdRequest AiBlackboardCdRequest = 34;
			MonsterBoomRequest MonsterBoomRequest = 36;
			EntityStaticHookMoveRequest EntityStaticHookMoveRequest = 38;
			ChangeStateConfirmRequest ChangeStateConfirmRequest = 40;
			BuffStackCountRequest BuffStackCountRequest = 42;
			UseSkillFailRequest UseSkillFailRequest = 44;
			ExitViewDirectionRequest ExitViewDirectionRequest = 46;
			InterruptSkillInDelayRequest InterruptSkillInDelayRequest = 49;
			FormationBuffApplyRequest FormationBuffApplyRequest = 51;
			FormationBuffRemoveRequest FormationBuffRemoveRequest = 53;
			ActorVisibleRequest ActorVisibleRequest = 55;
			FragileChangeRequest FragileChangeRequest = 57;
			DrownEndTeleportRequest DrownEndTeleportRequest = 59;
			PassiveSkillRemoveRequest PassiveSkillRemoveRequest = 61;
			CombatMessage.CombatMaxCaseMessageRequest CombatMaxCaseMessageRequest = 99;
		}

		CombatCommon CombatCommon = 1;
		int32 RequestId = 2;
		DestroyBulletRequest DestroyBulletRequest = 4;
		ApplyGameplayEffectRequest ApplyGameplayEffectRequest = 6;
		HitRequest HitRequest = 8;
		SkillRequest SkillRequest = 10;
		EndSkillRequest EndSkillRequest = 12;
		MaterialRequest MaterialRequest = 14;
		SwitchCharacterStateRequest SwitchCharacterStateRequest = 17;
		SwitchLogicStateRequest SwitchLogicStateRequest = 19;
		AnimationStateInitRequest AnimationStateInitRequest = 21;
		DrownRequest DrownRequest = 23;
		OrderRemoveBuffRequest OrderRemoveBuffRequest = 25;
		OrderRemoveBuffByTagsRequest OrderRemoveBuffByTagsRequest = 27;
		ToughCalcExtraRatioChangeRequest ToughCalcExtraRatioChangeRequest = 29;
		AnimationGameplayTagRequest AnimationGameplayTagRequest = 31;
		Ai.AiBlackboardsRequest AiBlackboardsRequest = 33;
		Ai.AiHateRequest AiHateRequest = 35;
		CaughtRequest CaughtRequest = 37;
		ChangeStateRequest ChangeStateRequest = 39;
		FsmConditionPassRequest FsmConditionPassRequest = 41;
		ANStartRequest ANStartRequest = 43;
		EnterViewDirectionRequest EnterViewDirectionRequest = 45;
		PassiveSkillAddRequest PassiveSkillAddRequest = 47;
		TriggerExitSkillRequest TriggerExitSkillRequest = 50;
		FormationBuffStackRequest FormationBuffStackRequest = 52;
		FormationBuffActivateRequest FormationBuffActivateRequest = 54;
		BuffEffectRequest BuffEffectRequest = 56;
		RTimeStopRequest RTimeStopRequest = 58;
		MonsterDrownRequest MonsterDrownRequest = 60;
		RTimeStopInstRequest RTimeStopInstRequest = 62;
		CombatMessage.CombatContext Context = 100;
	}


	message CombatResponseData {
		oneof Message {
			CreateBulletResponse CreateBulletResponse = 3;
			DamageExecuteResponse DamageExecuteResponse = 5;
			RemoveGameplayEffectResponse RemoveGameplayEffectResponse = 7;
			HitEndResponse HitEndResponse = 9;
			UseSkillResponse UseSkillResponse = 11;
			PartUpdateResponse PartUpdateResponse = 13;
			EntityIsVisibleResponse EntityIsVisibleResponse = 16;
			LogicStateInitResponse LogicStateInitResponse = 18;
			AnimationStateChangedResponse AnimationStateChangedResponse = 20;
			ModifyBulletParamsResponse ModifyBulletParamsResponse = 22;
			OrderApplyBuffResponse OrderApplyBuffResponse = 24;
			ActivateBuffResponse ActivateBuffResponse = 26;
			Ai.AiInformationResponse AiInformationResponse = 28;
			BattleStateChangeResponse BattleStateChangeResponse = 30;
			BoneVisibleChangeResponse BoneVisibleChangeResponse = 32;
			Ai.AiBlackboardCdResponse AiBlackboardCdResponse = 34;
			MonsterBoomResponse MonsterBoomResponse = 36;
			EntityStaticHookMoveResponse EntityStaticHookMoveResponse = 38;
			ChangeStateConfirmResponse ChangeStateConfirmResponse = 40;
			BuffStackCountResponse BuffStackCountResponse = 42;
			UseSkillFailResponse UseSkillFailResponse = 44;
			ExitViewDirectionResponse ExitViewDirectionResponse = 46;
			InterruptSkillInDelayResponse InterruptSkillInDelayResponse = 49;
			FormationBuffApplyResponse FormationBuffApplyResponse = 51;
			FormationBuffRemoveResponse FormationBuffRemoveResponse = 53;
			ActorVisibleResponse ActorVisibleResponse = 55;
			FragileChangeResponse FragileChangeResponse = 57;
			DrownEndTeleportResponse DrownEndTeleportResponse = 59;
			PassiveSkillRemoveResponse PassiveSkillRemoveResponse = 61;
		}

		CombatCommon CombatCommon = 1;
		int32 RequestId = 2;
		DestroyBulletResponse DestroyBulletResponse = 4;
		ApplyGameplayEffectResponse ApplyGameplayEffectResponse = 6;
		HitResponse HitResponse = 8;
		SkillResponse SkillResponse = 10;
		EndSkillResponse EndSkillResponse = 12;
		MaterialResponse MaterialResponse = 14;
		SwitchCharacterStateResponse SwitchCharacterStateResponse = 17;
		SwitchLogicStateResponse SwitchLogicStateResponse = 19;
		AnimationStateInitResponse AnimationStateInitResponse = 21;
		DrownResponse DrownResponse = 23;
		OrderRemoveBuffResponse OrderRemoveBuffResponse = 25;
		OrderRemoveBuffByTagsResponse OrderRemoveBuffByTagsResponse = 27;
		ToughCalcExtraRatioChangeResponse ToughCalcExtraRatioChangeResponse = 29;
		AnimationGameplayTagResponse AnimationGameplayTagResponse = 31;
		Ai.AiBlackboardsResponse AiBlackboardsResponse = 33;
		Ai.AiHateResponse AiHateResponse = 35;
		CaughtResponse CaughtResponse = 37;
		ChangeStateResponse ChangeStateResponse = 39;
		FsmConditionPassResponse FsmConditionPassResponse = 41;
		ANStartResponse ANStartResponse = 43;
		EnterViewDirectionResponse EnterViewDirectionResponse = 45;
		PassiveSkillAddResponse PassiveSkillAddResponse = 47;
		TriggerExitSkillResponse TriggerExitSkillResponse = 50;
		FormationBuffStackResponse FormationBuffStackResponse = 52;
		FormationBuffActivateResponse FormationBuffActivateResponse = 54;
		BuffEffectResponse BuffEffectResponse = 56;
		RTimeStopResponse RTimeStopResponse = 58;
		MonsterDrownResponse MonsterDrownResponse = 60;
		RTimeStopInstResponse RTimeStopInstResponse = 62;
	}


	message CombatSendData {
		oneof Message_ {
			CombatMessage.CombatPushData Push = 2;
		}

		CombatMessage.CombatRequestData Request = 3;
	}


	message CombatReceiveData {
		oneof Message_ {
			CombatMessage.CombatNotifyData CombatNotifyData = 2;
		}

		CombatMessage.CombatResponseData CombatResponseData = 3;
	}


	message CombatSendPackRequest {
		repeated CombatSendData Data = 111;
	}


	message CombatSendPackResponse {
		int32 ErrorCode = 96;
		CombatMessage.CombatReceivePackNotify ReceivePackNotify = 206;
	}


	message CombatReceivePackNotify {
		repeated CombatReceiveData Data = 207;
	}


	message CombatMaxCaseMessageRequest {
	}


	message CombatMaxCaseMessageResponse {
	}


	message CombatMessagePrefixInfoRequest {
		string Id = 56;
	}


	message CombatMessagePrefixInfoResponse {
		bytes PrefixInfo = 235;
	}


	message CombatMessagePostInfoRequest {
		bytes PostId = 83;
	}


	message CombatMessagePostInfoResponse {
		string PostInfo = 180;
	}


}

message SceneItemStateRequest {
	int64 EntityId = 228;
	int32 OperateType = 67;
}

message SceneItemStateResponse {
	int32 ErrorCode = 213;
}

message EntityLoadCompleteRequest {
	repeated int64 EntityIds = 18;
}

message EntityLoadCompleteResponse {
}

message EntityLoadCompleteNotify {
	int32 PlayerId = 114;
	repeated int64 EntityIds = 213;
	repeated int64 EntityIdsUnload = 110;
}

message MaterialRequest {
	MaterialInfo MaterialInfo = 93;
	CombatCommon CombatCommon = 196;
}

message MaterialInfo {
	int64 EntityId = 1;
	string AssetName = 2;
	bool IsGroup = 3;
}

message MaterialResponse {
	int32 ErrorCode = 238;
}

message MaterialNotify {
	MaterialInfo MaterialInfo = 23;
	CombatCommon CombatCommon = 10;
}

message CommonOrganResetTimeRequest {
	int64 EntityId = 186;
}

message CommonOrganResetTimeResponse {
	int32 ErrorCode = 11;
	int64 EntityId = 249;
	int32 ResetTime = 44;
}

message DynamicEntityInformation {
	int64 Id = 1;
	int32 EntityType = 2;
	int32 ConfigId = 3;
	int32 PlayerId = 4;
	int64 OwnerId = 5;
	MovementInformation movementInformation = 6;
	repeated GameplayAttributeData GameAttributes = 7;
	bool InitAttribute = 8;
	bool IsVisible = 9;
	repeated int32 AnimationStates = 10;
	bool InitGameplayTag = 11;
	repeated GameplayTagData GameplayTags = 12;
	int32 Level = 13;
	repeated BlackboardParam BlackboardParams = 14;
	repeated string Tags = 15;
	repeated PrivateTag PrivateTags = 16;
	bool DeathStatus = 17;
	int32 HardnessModeId = 19;
	repeated PartInformation PartLifeInfos = 20;
	repeated VisionSkillInformation VisionSkillInfos = 21;
	repeated FightBuffInformation FightBuffInfos = 22;
	int32 CreatureGroup = 23;
	ListenInformation ListenInformation = 24;
	repeated SysBuffInformation SysBuffInfos = 25;
	int32 LivingStatus = 26;
	repeated int32 EntityCommonTags = 27;
	int32 WeaponConfId = 28;
	int32 DurabilityValue = 29;
	Vector InitLocation = 30;
	SummonInfo SummonInfo = 31;
	repeated EntityComponentPb ComponentPbs = 32;
}

message EntityLivingStatusNotify {
	int64 Id = 175;
	int32 LivingStatus = 86;
	repeated DropVisionItemResult DropVisionItem = 236;
}

message DropVisionItemResult {
	int32 PlayerId = 1;
	bool Drop = 2;
}

message ListenInformation {
	repeated int32 Id = 1;
	float Range = 2;
}

message ScenePlayerInformation {
	int32 PlayerId = 1;
	string PlayerName = 2;
	int32 PlayerIcon = 3;
	int32 Level = 4;
	string GuildName = 5;
	string GuildIntro = 6;
	Vector Location = 7;
	bool IsOffline = 8;
	int32 PlayerPrefix = 9;
	int32 PlayerGEIncHandle = 10;
	repeated FightRoleInformation FightRoleInfos = 11;
	repeated FormationBuff FormationBuffs = 12;
	Rotator Rotation = 13;
}

message FightRoleInformation {
	int32 RoleId = 1;
	int64 EntityId = 2;
	bool IsControl = 5;
}

message UpdatePlayerAllFightRoleNotify {
	int32 PlayerId = 113;
	repeated FightRoleInformation FightRoleInfos = 141;
}

message PlayerFightRolesInfo {
	int32 PlayerId = 1;
	repeated FightRoleInformation FightRolesInfo = 2;
	bool IsPhantom = 3;
	bool IsRetain = 4;
}

message UpdatePlayersFightRolesInfoNotify {
	repeated PlayerFightRolesInfo PlayersFightRoles = 184;
}

message UpdatePlayerSingleFightRoleNotify {
	int32 PlayerId = 254;
	FightRoleInformation FightRoleInfo = 150;
}

message ChangePlayerFightRoleNotify {
	int32 PlayerId = 47;
	repeated FightRoleInformation FightRoleInfos = 96;
	bool IsPhantom = 185;
}

message SceneInformation {
	string SceneId = 1;
	int32 InstanceId = 2;
	int32 OwnerId = 3;
	repeated ScenePlayerInformation PlayerInfos = 4;
	repeated DynamicEntityInformation DynamicEntityList = 5;
	repeated BlackboardParam BlackboardParams = 6;
	int64 EndTime = 8;
	PlayerSceneAoiData AoiData = 11;
	repeated int64 OwnerFinishMingSuGens = 12;
	int32 Mode = 13;
	SceneTimeInfo TimeInfo = 14;
	repeated int32 HostFogIds = 15;
	repeated string LoadedSubLevels = 16;
	repeated SceneAreaState AreaStates = 17;
	int32 ResetPointEntityId = 18;
	repeated int32 DataLayers = 19;
	map<int32, int32> AreaMpc = 20;
	int64 CurContextId = 21;
}

message SceneAreaState {
	int32 AreaId = 1;
	bool State = 2;
}

message SceneAreaStateNotify {
	SceneAreaState AreaState = 50;
}

message HostTeleportUnlockNotify {
	int32 HostPlayerId = 56;
	int32 HostTeleportId = 179;
}

message HostFogIdUnlockNotify {
	int32 HostPlayerId = 154;
	int32 HostFogId = 218;
}

message SceneTimeInfo {
	int32 Hour = 1;
	int32 Minute = 2;
	int64 OwnerTimeClock_TimeSpan = 3;
}

message SyncSceneTimeNotify {
	SceneTimeInfo TimeInfo = 209;
}

enum SceneMode {
	SceneMode_Single = 0;
	SceneMode_Multi = 1;
}

message ChangeSceneModeNotify {
	string SceneId = 238;
	int32 Mode = 204;
}

message ChangeSceneModeEndNotify {
}

message SceneModeChangeFinishRequest {
}

message SceneModeChangeFinishResponse {
	int32 ErrorCode = 208;
}

message ScenePlayerOfflineNotify {
	int32 PlayerId = 31;
	bool IsOffline = 145;
	bool IsReLogin = 140;
}

message JoinSceneNotify {
	SceneInformation SceneInfo = 213;
	int64 MaxEntityId = 169;
	TransitionOptionPb TransitionOption = 68;
}

message OtherJoinSceneNotify {
	ScenePlayerInformation playerInfo = 241;
}

enum InstanceType {
	InstanceType_NoneInstance = 0;
	InstanceType_BigWorldInstance = 1;
	InstanceType_NormalInstance = 2;
	InstanceType_MirrorInstance = 3;
	InstanceType_TowerChallengeInstance = 4;
	InstanceType_CycleTowerChallenge = 5;
}

enum LeaveReason {
	LeaveReason_Initiative = 0;
	LeaveReason_BeKick = 1;
	LeaveReason_Dissolve = 2;
}

message LeaveSceneNotify {
	int32 PlayerId = 138;
	string SceneId = 180;
	TransitionOptionPb TransitionOption = 72;
}

message MovingEntityData {
	int64 EntityId = 1;
	int64 Originator = 2;
	repeated MoveReplaySample MoveInfos = 3;
}

message MovePackagePush {
	repeated MovingEntityData MovingEntities = 212;
}

message MovePackageNotify {
	repeated MovingEntityData MovingEntities = 253;
}

message UDPMovePackagePush {
	repeated MovingEntityData MovingEntities = 107;
}

message UDPMovePackageNotify {
	repeated MovingEntityData MovingEntities = 136;
}

message EntitySimplyMoveInfoPackagePush {
	repeated EntitySimplyMoveInfo MoveInfos = 91;
}

message MoveSampleSceneItem {
	Vector LinearVelocity = 1;
	Vector Location = 2;
	Rotator Rotation = 3;
	float TimeStamp = 4;
}

message MoveSceneItemPush {
	CombatCommon CombatCommon = 56;
	repeated MoveSampleSceneItem MoveInfos = 127;
}

message MoveSceneItemNotify {
	CombatCommon CombatCommon = 37;
	repeated MoveSampleSceneItem MoveInfos = 212;
}

message ChangeMonsterRoleNotify {
	int64 Id = 30;
	int32 PlayerId = 160;
}

message CaptureEntityRequest {
	int64 Id = 120;
}

message CaptureEntityResponse {
	int32 ErrCode = 174;
	int64 Id = 8;
}

message RemoveSummonEntityRequest {
	int64 SummonerId = 150;
	int32 SkillId = 55;
	int32 RemoveType = 175;
	repeated int64 RemoveEntityIds = 159;
}

message RemoveSummonEntityResponse {
	int32 ErrCode = 111;
}

message ChangeEntityRoleRequest {
	int64 Id = 169;
	int32 PlayerId = 7;
}

message ChangeEntityRoleResponse {
	bool Success = 247;
	int64 Id = 162;
	int32 PlayerId = 215;
}

message EntityOnLandedRequest {
	int64 Id = 31;
}

message EntityOnLandedResponse {
}

message EntityOnLandedNotify {
	int64 Id = 72;
}

message AttributeInitRequest {
	int64 Id = 22;
	repeated GameplayAttributeData Attributes = 134;
}

message AttributeInitResponse {
	bool Success = 66;
	int64 Id = 20;
}

message AttributeInitNotify {
	int64 Id = 217;
	repeated GameplayAttributeData Attributes = 251;
}

message AttributeChangedRequest {
	int64 Id = 94;
	repeated GameplayAttributeData Attributes = 15;
}

message AttributeChangedResponse {
	int32 ErrorCode = 253;
}

message AttributeChangedNotify {
	int64 Id = 89;
	repeated GameplayAttributeData Attributes = 30;
}

message MonsterLevelNotify {
	int64 Id = 88;
	int32 Level = 94;
}

message MonsterLevelArrayNotify {
	repeated MonsterLevelNotify Monsters = 18;
}

message MonsterAttributeNotify {
	int64 Id = 118;
	map<int32, int32> Attributes = 245;
}

message MonsterAttributeArrayNotify {
	repeated MonsterAttributeNotify Monsters = 104;
}

message AnimationStateInitRequest {
	CombatCommon CombatCommon = 58;
	int64 Id = 131;
	repeated int32 States = 219;
	repeated int32 SpecialStates = 23;
}

message AnimationStateInitResponse {
	int32 ErrorCode = 252;
}

message AnimationStateInitNotify {
	CombatCommon CombatCommon = 217;
	int64 Id = 115;
	repeated int32 States = 15;
	float TimeStamp = 119;
	repeated int32 SpecialStates = 243;
}

message AnimationStateChangedRequest {
	CombatCommon CombatCommon = 75;
	int64 Id = 189;
	repeated int32 States = 66;
	repeated int32 SpecialStates = 39;
}

message AnimationStateChangedResponse {
	int32 ErrorCode = 221;
}

message AnimationStateChangedNotify {
	CombatCommon CombatCommon = 31;
	int64 Id = 253;
	repeated int32 States = 13;
	float TimeStamp = 19;
	repeated int32 SpecialStates = 236;
}

message GameplayTagInitNotify {
	int64 Id = 152;
	repeated GameplayTagData Tags = 241;
}

message GameplayTagChangedNotify {
	int64 Id = 145;
	repeated GameplayTagData Tags = 61;
}

message EntityCommonTagNotify {
	int64 Id = 251;
	repeated CommonTagData Tags = 175;
}

message ChangeControlRoleNotify {
	int64 upId = 250;
	int64 downId = 91;
	int32 PlayerId = 126;
	bool NeedSetLocation = 138;
	Vector Location = 155;
}

message RoleDeathStatus {
	int64 EntityId = 1;
	bool Status = 2;
}

message HardnessModeChangedRequest {
	int64 EntityId = 129;
	int32 HardnessModeId = 177;
}

message HardnessModeChangedResponse {
	int32 ErrorCode = 161;
}

message HardnessModeChangedNotify {
	int64 EntityId = 120;
	int32 HardnessModeId = 25;
}

message SummonRequestInfo {
	int64 SummonEntityId = 1;
	int32 SkillId = 2;
	int32 SummonConfigId = 3;
	Vector Pos = 4;
	Rotator Rot = 5;
	bool IsVisible = 6;
}

message SummonRequest {
	int64 SummonerEntityId = 12;
	SummonRequestInfo SummonInfo = 70;
}

message SummonResponse {
	int32 ErrorCode = 69;
}

message Summon2Request {
	int64 SummonerEntityId = 254;
	SummonRequestInfo SummonInfo = 56;
	int32 Version = 133;
}

message Summon2Response {
	int32 ErrorCode = 3;
	int32 Version = 254;
}

message SummonEntityNotify {
	int64 SummonerId = 163;
	repeated int64 SummonIds = 69;
}

message VisionSkillCallNotify {
	int32 PlayerId = 113;
	DynamicEntityInformation EntityInfo = 5;
}

message PlayerLocation {
	int32 PlayerId = 1;
	Vector Location = 2;
}

message InstanceTimer {
	int32 Status = 1;
	int32 RemainTick = 2;
}

message InstanceTimerNotify {
	map<int32, InstanceTimer> InstanceTimers = 47;
}

message UpdateInstanceTimerNotify {
	map<int32, InstanceTimer> InstanceTimers = 235;
}

message RemoveInstanceTimerNotify {
	int32 TimerId = 245;
}

message RemoveInstanceTimerRequest {
	int32 TimerId = 254;
}

message RemoveInstanceTimerResponse {
	int32 ErrorCode = 118;
	int32 TimerId = 244;
}

message QuestTimer {
	int32 Status = 1;
	int32 RemainTick = 2;
}

message QuestTimerNotify {
	map<int32, QuestTimer> QuestTimers = 1;
}

message UpdateQuestTimerNotify {
	map<int32, QuestTimer> QuestTimers = 1;
}

message RemoveQuestTimerNotify {
	int32 TimerId = 1;
}

message RemoveQuestTimerRequest {
	int32 TimerId = 1;
}

message RemoveQuestTimerResponse {
	int32 ErrorCode = 1;
	int32 TimerId = 2;
}

message UpdateInstanceOwnerInfoNotify {
	int64 Id = 129;
	InstanceOwnerInfo InstanceOwnerInfo = 108;
}

message UpdateOwnerMingSuGenNotify {
	int64 Id = 180;
}

message AddSysBuffNotify {
	int64 EntityId = 144;
	repeated SysBuffInformation BuffInfos = 224;
}

message UpdateSysBuffNotify {
	int64 EntityId = 107;
	repeated SysBuffInformation BuffInfos = 31;
}

message RemoveSysBuffNotify {
	int64 EntityId = 12;
	repeated int32 Ids = 35;
}

message ChangeSceneClockPush {
	int32 Hour = 144;
	int32 Minute = 39;
	bool IsAdjust = 233;
}

enum SceneDateUpdateReason {
	SceneDateUpdateReason_TimeFlowAuto = 0;
	SceneDateUpdateReason_LevelPlayAuto = 1;
	SceneDateUpdateReason_PlayerOperate = 2;
}

message UpdateSceneDateRequest {
	uint32 AddDays = 40;
	int32 Hour = 129;
	int32 Minute = 154;
	int32 Reason = 107;
}

message UpdateSceneDateResponse {
	int32 ErrorCode = 115;
	uint32 CurrDate = 209;
}

message SceneDateNotify {
	uint32 CurrDate = 201;
}

message HoldWeaponPush {
	int64 EntityId = 209;
	int64 WeaponEntityId = 42;
}

message DiscardWeaponPush {
	int64 EntityId = 186;
	MovementInformation movementInformation = 12;
}

message DiscardWeaponRequest {
	int64 EntityId = 41;
	MovementInformation movementInformation = 84;
}

message DiscardWeaponResponse {
	bool DiscardSucc = 161;
}

message HoldWeaponNotify {
	int64 EntityId = 93;
	int32 WeaponConfId = 149;
}

message CreatStoryCharacterRequest {
}

message CreatStoryCharacterResponse {
	int32 ErrorCode = 201;
	int64 EntityId = 160;
}

message DeleteStoryCharacterRequest {
}

message DeleteStoryCharacterResponse {
	int32 ErrorCode = 237;
	int32 FightRoleId = 213;
}

message EnterAoiNotify {
	repeated DynamicEntityInformation EntityInfos = 186;
}

message AddEntityAoiNotify {
	repeated DynamicEntityInformation EntityInfos = 15;
}

message LeaveAoiNotify {
	repeated int64 EntityIds = 22;
}

message RemoveEntityAoiNotify {
	repeated EntityRemoveInfo RemoveInfos = 151;
}

message PlayerAoiRangeNotify {
	int32 MinX = 158;
	int32 MaxX = 149;
	int32 MinY = 178;
	int32 MaxY = 151;
}

message PlayerSceneAoiData {
	repeated DynamicEntityInformation DynamicEntityList = 1;
	repeated int64 GenIds = 2;
	repeated EntityPb Entities = 3;
}

message SceneGamePlayInfo {
	int32 GamePlayId = 1;
	bool IsFirst = 2;
	int32 Status = 3;
	uint32 OpenTime = 4;
}

message SceneGamePlayInfoNotify {
	repeated SceneGamePlayInfo GamePlayInfo = 158;
}

message SceneGamePlayFirstNotify {
	int32 GamePlayId = 119;
}

message SceneGamePlayStatusNotify {
	int32 GamePlayId = 223;
	int32 Status = 87;
}

message SceneGamePlayScopeNotify {
	int32 GamePlayId = 75;
	bool IsEnter = 156;
}

message SceneGamePlayOpenTimeNotify {
	int32 GamePlayId = 182;
	uint32 OpenTime = 213;
}

message CreatureDetailRequest {
	int64 Id = 30;
}

message CreatureDetailResponse {
	int32 ErrorCode = 41;
	int64 Id = 167;
	int32 CurCount = 6;
	int64 NextRefreshTime = 168;
	int32 ConfigIndex = 51;
	int32 AreaIndex = 30;
	int32 ExistCount = 80;
	bool ConditionSatisfy = 137;
	repeated DynamicEntityInformation AliveEntities = 151;
}

message ResetLocationForZRangeNotify {
	int64 EntityId = 59;
	Vector ResetLocation = 110;
	Rotator Rotation = 115;
	bool NotifyRot = 34;
	bool ChangeInitPos = 99;
}

message ChangeEntityStateRequest {
	int32 EntityId = 21;
	int32 StateTagId = 12;
}

message ChangeEntityStateResponse {
	int32 ErrorCode = 84;
}

message FoundationRequest {
	int64 EntityId = 74;
	int64 AccusedEntityId = 44;
	int32 ActiveOperate = 230;
	Vector Pos = 150;
	Rotator Rot = 138;
}

message FoundationResponse {
	int32 ErrorCode = 26;
	int32 ActiveOperate = 158;
}

message BeControlledPosInFoundationNotify {
	int64 FoundationEntityId = 188;
	int64 BeControlledEntityId = 150;
	int32 InstId = 149;
}

message BeControlledRequest {
	int64 EntityId = 232;
	bool IsControl = 75;
}

message BeControlledResponse {
	int32 ErrorCode = 199;
}

message BeControlledNotify {
	int64 EntityId = 238;
	int64 RoleEntityId = 69;
	bool NeedReset = 149;
}

message BeControlledShowRequest {
	int64 EntityId = 209;
	bool IsShow = 241;
}

message BeControlledShowResponse {
	int32 ErrorCode = 255;
}

message BeControlledShowNotify {
	int64 EntityId = 178;
	int64 RoleEntityId = 25;
	bool IsShow = 156;
}

enum TeleControlThrowWay {
	TeleControlThrowWay_ThrowCreateBullet = 0;
	TeleControlThrowWay_ThrowLetGo = 1;
	TeleControlThrowWay_ThrowThrow = 2;
}

message BeControlledThrowRequest {
	int64 EntityId = 142;
	int32 ThrowType = 251;
}

message BeControlledThrowResponse {
	int32 ErrorCode = 102;
}

message RelationIdNotify {
	int32 EntityConfigId = 161;
	int32 RelationId = 191;
	int32 IstId = 232;
}

message SummonInfo {
	int32 SummonCfgId = 1;
	int64 SummonerId = 2;
	int32 SummonSkillId = 3;
}

message EntityPosResetNotify {
	int32 EntityId = 246;
}

message GravityGearRequest {
	int32 EntityConfId = 171;
	int32 ActiveOperate = 228;
}

message GravityGearResponse {
	int32 ErrorCode = 16;
}

message CanTrampleRequest {
	int32 EntityConfId = 246;
	int32 ActiveOperate = 68;
}

message CanTrampleResponse {
	int32 ErrorCode = 59;
}

message WeatherNotify {
	int32 WeatherId = 82;
	bool IsClient = 240;
}

message ChangeWeatherRequest {
	int32 WeatherId = 89;
}

message ChangeWeatherResponse {
	int32 ErrorCode = 58;
	int32 WeatherId = 112;
}

message FollowTrackRequest {
	int64 EntityId = 177;
}

message FollowTrackResponse {
	int32 ErrorCode = 133;
}

message SetInitTagRequest {
	int64 EntityId = 107;
}

message SetInitTagResponse {
	int32 ErrorCode = 181;
}

message PlayerRebackSceneNotify {
	int64 CurControlEntityId = 158;
}

message SwitchBigWorldRequest {
	int32 InstId = 172;
	int32 PosEntityId = 21;
}

message SwitchBigWorldResponse {
	int32 ErrorCode = 206;
}

message DrownRequest {
}

message DrownResponse {
	int32 ErrorCode = 50;
}

message DrownNotify {
}

message DrownEndTeleportRequest {
}

message DrownEndTeleportResponse {
	int32 ErrorCode = 233;
}

message MonsterDrownRequest {
	Vector Pos = 86;
}

message MonsterDrownResponse {
	int32 ErrorCode = 237;
}

message EnableNearbyTrackingNotify {
	repeated int32 EntityConfigId = 70;
	int32 InstanceId = 178;
}

message SceneSubLevelsChangedNotify {
	repeated string NewLoaded = 11;
	repeated string NewUnloaded = 47;
	int32 TeleportEntityId = 133;
}

message SceneSubLevelsNotify {
	repeated string CurLoaded = 132;
}

message SceneLoadingFinishRequest {
	string SceneId = 173;
}

message SceneLoadingFinishResponse {
	int32 ErrorCode = 90;
}

message SceneLoadingTimeOutNotify {
}

message SceneLoadingFinishNotify {
	int32 PlayerId = 127;
}

message ResetPointEntityNotify {
	int32 ResetPointEntityId = 3;
}

message SitChairRequest {
	int64 EntityId = 219;
	bool IsSitDown = 27;
	CombatCommon Data = 191;
	AnimationStateChangedRequest Request = 112;
}

message SitChairResponse {
	int32 ErrorCode = 90;
}

message BeControlledDestroyRequest {
	int64 EntityId = 169;
}

message BeControlledDestroyResponse {
	int32 ErrorCode = 254;
}

message SceneTestNotify {
	int32 ErrorCode = 228;
	string ErrorMsg = 96;
	int32 PlayerId = 177;
}

message SceneChangeDataLayerNotify {
	repeated int32 LoadDataLayers = 33;
	repeated int32 UnloadDataLayers = 246;
	int32 EntityId = 46;
}

message ChangeDataLayerFinishRequest {
	int32 InstId = 250;
}

message ChangeDataLayerFinishResponse {
	int32 ErrorCode = 220;
}

message MoveSceneItemResetPositionRequest {
	int64 EntityId = 172;
	int64 ResetEntityId = 216;
}

message MoveSceneItemResetPositionResponse {
	int32 ErrorCode = 5;
}

message HookLockPointRequest {
	int64 EntityId = 18;
}

message HookLockPointResponse {
	int32 ErrorCode = 206;
}

message TeleportUpdateNotify {
	repeated int32 Ids = 199;
}

message TeleportDataRequest {
}

message TeleportDataResponse {
	int32 ErrCode = 76;
	repeated int32 Ids = 172;
}

message TeleportTransferRequest {
	int32 Id = 223;
}

message TeleportTransferResponse {
	int32 ErrorCode = 105;
	int32 MapId = 7;
	float PosX = 27;
	float PosY = 193;
	float PosZ = 215;
	float Pitch = 234;
	float Yaw = 225;
	float Roll = 169;
}

message UnlockTeleportRequest {
	int32 Id = 50;
}

message UnlockTeleportResponse {
	int32 ErrorCode = 80;
}

enum TeleportReason {
	TeleportReason_Transfer = 0;
	TeleportReason_ApiTeleport = 1;
	TeleportReason_BtRollbackFailed = 2;
	TeleportReason_ParkourTrans = 3;
	TeleportReason_Gm = 4;
	TeleportReason_Rouge = 5;
	TeleportReason_Fall = 6;
	TeleportReason_Action = 7;
	TeleportReason_UnOpenedAreaPullback = 8;
	TeleportReason_TemporaryTransfer = 9;
	TeleportReason_FlowAction = 10;
	TeleportReason_Drown = 11;
}

message TeleportNotify {
	int32 MapId = 183;
	float PosX = 77;
	float PosY = 18;
	float PosZ = 72;
	float PosA = 222;
	int32 Reason = 185;
	GameCtxPb GameCtx = 214;
	TransitionOptionPb TransitionOption = 193;
}

enum TransitionType {
	TransitionType_Empty = 0;
	TransitionType_PlayEffect = 1;
	TransitionType_PlayMp4 = 2;
	TransitionType_CenterText = 3;
}

message TransitionOptionPb {
	oneof Option {
		string ResourePath = 2;
	}

	int32 TransitionType = 1;
	TransitionFlowPb TransitionFlow = 3;
}

message TransitionFlowPb {
	string FlowListName = 1;
	int32 FlowId = 2;
	int32 StateId = 3;
}

message TeleportFinishRequest {
}

message TeleportFinishResponse {
	int32 ErrorCode = 205;
}

message FallFinishNotify {
}

message UnOpenedAreaPullbackRequest {
}

message UnOpenedAreaPullbackResponse {
	int32 ErrorCode = 207;
}

message TeleportDungeonRequest {
	int32 InstanceId = 10;
	repeated int32 RoleIds = 171;
	int32 PosEntityId = 14;
	TransitionOptionPb TransitionOption = 204;
}

message TeleportDungeonResponse {
	int32 ErrorCode = 55;
}

enum EEntityFsmChangeType {
	EEntityFsmChangeType_Enter = 0;
	EEntityFsmChangeType_Exit = 1;
	EEntityFsmChangeType_BindStart = 3;
	EEntityFsmChangeType_BindEnd = 4;
	EEntityFsmChangeType_Task = 5;
}

enum EBulletCreateSource {
	EBulletCreateSource_NormalSource = 0;
	EBulletCreateSource_ReboundSource = 1;
}

message FsmStateChangeContext {
	int32 FsmId = 1;
	int32 State = 2;
	int32 ChangeType = 3;
	int32 Index = 4;
	int64 ContextId = 5;
}

message SkillContext {
	int32 SkillId = 1;
	int64 ContextId = 2;
}

message MontageContext {
	int32 SkillId = 1;
	int32 MontageIndex = 2;
	int64 ContextId = 3;
}

message AddBuffContext {
	int32 BuffHandle = 1;
	int64 ContextId = 2;
}

message BulletContext {
	ActiveBulletHandle Handle = 1;
	int64 ContextId = 2;
}

message UseSkillInformation {
	CombatCommon CombatCommon = 1;
	int64 Id = 2;
	int32 SkillId = 3;
	MovementInformation MovementInformation = 4;
	Vector Location = 5;
	int64 TargetId = 6;
	float TimeStamp = 7;
	bool IsSpecialSkill = 8;
	int32 Duration = 9;
	int32 SkillInterruptLevel = 10;
	int32 FightState = 11;
}

message HitInformation {
	int64 Originator = 1;
	int64 Id = 2;
	int64 TargetId = 3;
	int64 BulletId = 4;
	bool HasBeHitData = 5;
	Vector HitEffectPos = 6;
	Rotator HitEffectRotate = 7;
	bool IsShake = 8;
	Vector HitPos = 9;
	bool EnterFk = 10;
	bool IsHitWeakness = 11;
	bool IsTriggerCounterattack = 12;
	Rotator VictimRotation = 13;
	bool IsChangeVictimRotation = 14;
	string HitPart = 15;
	bool IsTriggerVisionCounterAttack = 16;
	int32 SkillId = 17;
	int32 FightState = 18;
	int32 BeHitAnim = 19;
	int32 Source = 20;
}

message SkillNodeInfo {
	int32 SubProtocol = 1;
	int32 MontageIndex = 2;
	float SpeedRatio = 3;
	int32 SkillSingleId = 4;
	int32 SkillIndex = 5;
	string StartSection = 6;
	float StartTimeSeconds = 7;
}

message SkillRequest {
	UseSkillInformation UseSkillInfo = 255;
	SkillNodeInfo SkillNodeInfos = 23;
}

message SkillResponse {
	int32 ErrorCode = 21;
}

message SkillNotify {
	UseSkillInformation UseSkillInfo = 227;
	SkillNodeInfo SkillNodeInfos = 158;
}

message UseSkillRequest {
	CombatCommon CombatCommon = 150;
	UseSkillInformation UseSkillInfo = 9;
	int32 SkillSingleId = 246;
}

message UseSkillResponse {
	UseSkillInformation UseSkillInfo = 208;
	int32 SkillSingleId = 48;
	int32 ErrorCode = 182;
}

message UseSkillNotify {
	CombatCommon CombatCommon = 38;
	UseSkillInformation UseSkillInfo = 2;
	int32 SkillSingleId = 211;
}

message EndSkillRequest {
	CombatCommon CombatCommon = 249;
	UseSkillInformation UseSkillInfo = 199;
	int32 SkillSingleId = 73;
}

message EndSkillResponse {
	UseSkillInformation UseSkillInfo = 129;
	int32 SkillSingleId = 9;
}

message EndSkillNotify {
	CombatCommon CombatCommon = 9;
	UseSkillInformation UseSkillInfo = 16;
	int32 SkillSingleId = 101;
}

message InterruptSkillInDelayRequest {
	int32 SkillId = 215;
}

message InterruptSkillInDelayResponse {
	int32 SkillId = 176;
}

message UseSkillFailRequest {
	int32 SkillId = 89;
}

message UseSkillFailResponse {
	int32 SkillId = 240;
	DErrorResult Error = 228;
}

message HitRequest {
	CombatCommon CombatCommon = 67;
	HitInformation HitInfo = 188;
}

message HitResponse {
	HitInformation HitInfo = 234;
	int32 ErrorCode = 28;
}

message HitNotify {
	CombatCommon CombatCommon = 83;
	HitInformation HitInfo = 228;
}

message HitEndRequest {
	CombatCommon CombatCommon = 61;
	int64 TargetId = 14;
}

message HitEndResponse {
	int32 ErrorCode = 133;
}

message CaughtInfo {
	int64 Attacker = 1;
	int64 CaughtInfoId = 2;
	bool IsEnd = 3;
	int32 FightState = 4;
}

message CaughtRequest {
	CaughtInfo Info = 156;
}

message CaughtResponse {
	int32 ErrorCode = 235;
}

message CaughtNotify {
	CaughtInfo Info = 91;
}

message ActiveBulletHandle {
	int32 PlayerId = 1;
	int32 HandleId = 2;
}

message CreateBulletRequest {
	oneof ParentHandle_ {
		ActiveBulletHandle ParentHandle = 207;
	}

	CombatCommon CombatCommon = 99;
	ActiveBulletHandle Handle = 70;
	int64 OwnerEntityId = 131;
	int64 BulletId = 108;
	int32 SkillId = 35;
	Vector Location = 202;
	Rotator Rotation = 137;
	int64 TargetId = 97;
	int64 SpawnEntityId = 195;
	int64 SpawnVelocityEntityId = 241;
	bool IsLocal = 7;
}

message CreateBulletResponse {
	int32 ErrorCode = 102;
}

message CreateBulletNotify {
	oneof LocationEntityId_ {
		int64 LocationEntityId = 26;
	}

	CombatCommon CombatCommon = 24;
	ActiveBulletHandle Handle = 157;
	int64 OwnerEntityId = 41;
	int64 BulletId = 169;
	int32 SkillId = 8;
	Vector Location = 208;
	Rotator Rotation = 103;
	ActiveBulletHandle ParentHandle = 50;
	int64 TargetId = 242;
	int64 SpawnEntityId = 158;
	int64 SpawnVelocityEntityId = 107;
}

message DestroyBulletRequest {
	CombatCommon CombatCommon = 184;
	ActiveBulletHandle Handle = 45;
}

message DestroyBulletResponse {
	int32 ErrorCode = 99;
}

message DestroyBulletNotify {
	CombatCommon CombatCommon = 181;
	ActiveBulletHandle Handle = 110;
	bool IsCreateSubBullet = 239;
}

message ModifyBulletParams {
	CombatCommon CombatCommon = 1;
	ActiveBulletHandle Handle = 2;
	int64 TargetId = 3;
}

message ModifyBulletParamsRequest {
	ModifyBulletParams ModifyBulletParams = 209;
}

message ModifyBulletParamsResponse {
	int32 ErrorCode = 218;
}

message ModifyBulletParamsNotify {
	ModifyBulletParams ModifyBulletParams = 111;
}

enum DamageSourceType {
	DamageSourceType_FromBullet = 0;
	DamageSourceType_FromEffect = 1;
}

message DamageContext {
	oneof SkillId_ {
		int32 SkillId = 4;
	}

	int32 SourceType = 1;
	int64 BulletId = 2;
	repeated int32 BulletTags = 3;
}

message DamageExecuteRequest {
	int64 DamageId = 13;
	int32 SkillLevel = 31;
	int64 AttackerEntityId = 120;
	int64 TargetEntityId = 236;
	bool IsAddEnergy = 81;
	bool IsCounterAttack = 225;
	bool ForceCritical = 134;
	bool IsBlocked = 168;
	int32 PartId = 201;
	int64 CounterSkillMessageId = 4;
	DamageContext DamageContext = 83;
	int32 RandomSeed = 188;
}

message DamageExecuteResponse {
	int32 ErrorCode = 7;
	int64 AttackerEntityId = 102;
	int64 TargetEntityId = 123;
	int32 Damage = 40;
	int32 PartId = 154;
	bool IsCrit = 167;
	bool KilledTarget = 75;
	int32 ShieldCoverDamage = 130;
	int32 ImmuneType = 133;
}

message DamageExecuteNotify {
	int64 DamageId = 198;
	int64 AttackerEntityId = 132;
	int64 TargetEntityId = 179;
	int32 Damage = 238;
	int32 PartId = 21;
	bool IsCrit = 84;
	bool KilledTarget = 93;
	int32 ShieldCoverDamage = 39;
	int32 SkillLevel = 251;
	DamageContext DamageContext = 206;
	int32 ImmuneType = 246;
}

message PassiveSkillAddRequest {
	int64 PassiveSkillId = 66;
	int64 TargetEntityId = 188;
}

message PassiveSkillAddResponse {
	int32 ErrorCode = 232;
}

message PassiveSkillRemoveRequest {
	int64 PassiveSkillId = 206;
	int64 TargetEntityId = 66;
}

message PassiveSkillRemoveResponse {
	int32 ErrorCode = 214;
}

message PassiveSkillAddNotify {
	int64 EntityId = 26;
	repeated PassiveSkillItemPb PassiveSkillItemPbList = 187;
}

message PassiveSkillRemoveNotify {
	int64 EntityId = 160;
	repeated int64 SkillIdList = 58;
}

message EnterViewDirectionRequest {
}

message EnterViewDirectionResponse {
}

message ExitViewDirectionRequest {
}

message ExitViewDirectionResponse {
}

message TriggerExitSkillRequest {
	int64 EnterEntityId = 166;
	int64 LeaveEntityId = 165;
}

message TriggerExitSkillResponse {
}

message MonsterInfo {
	int32 MonsterId = 1;
	int32 Num = 2;
	int64 GenId = 3;
}

enum BattleResult {
	BattleResult_AllKill = 0;
	BattleResult_Death = 1;
	BattleResult_Run = 2;
	BattleResult_Kill = 3;
}

enum MonsterResult {
	MonsterResult_MonsterResultDeath = 0;
	MonsterResult_MonsterResultRun = 1;
}

message CharacterDeathPush {
	int32 RoleId = 182;
	int32 Result = 38;
}

message CharacterDeathRequest {
	int32 RoleId = 75;
	int32 Result = 242;
}

message CharacterDeathResponse {
}

message SkillReport {
	int32 SkillId = 1;
	int32 UseCount = 2;
	int32 HitCount = 3;
	int32 ExpectHitCount = 4;
	int32 RealHitCount = 5;
	int64 Damage = 6;
}

message InstFightEndPush {
	int32 InstId = 142;
	string FightId = 214;
	int32 CostTime = 196;
	int64 AccDamage = 15;
	int64 AccShieldDamage = 133;
	int64 AccSelfDamage = 247;
	int64 AccSkillHeal = 151;
	int64 AccItemHeal = 17;
	int32 StopTimes = 104;
	int32 DamageMax = 152;
	int32 ComboMax = 130;
	int32 AccDodgaTimes = 237;
	int32 DodgeSuccTimes = 205;
}

enum BattleModule {
	BattleModule_Damage = 0;
	BattleModule_GameplayEffect = 1;
	BattleModule_Log = 2;
}

message SwitchBattleModeRequest {
	bool Client = 205;
	int32 ClientControllerModule = 171;
}

message SwitchBattleModeResponse {
	bool Client = 230;
}

message SwitchBattleModeNotify {
	repeated int32 ServerControllerModules = 52;
	repeated int32 ClientControllerModules = 242;
}

message BattleLogNotify {
	string Log = 56;
}

message LandingDamageRequest {
	int64 EntityId = 132;
	float SpeedZ = 79;
	int32 TimeExceeding = 167;
}

message LandingDamageResponse {
	int32 ErrorCode = 113;
}

message EntityIsVisibleRequest {
	int64 Id = 77;
	bool IsVisible = 196;
	CombatCommon CombatCommon = 54;
}

message EntityIsVisibleResponse {
	int32 ErrorCode = 42;
}

message EntityIsVisibleNotify {
	int64 Id = 161;
	bool IsVisible = 138;
	CombatCommon CombatCommon = 199;
}

message ActorVisibleRequest {
	int64 Id = 17;
	bool IsActorVisible = 189;
}

message ActorVisibleResponse {
	int32 ErrorCode = 109;
}

message ActorVisibleNotify {
	int64 Id = 62;
	bool IsActorVisible = 97;
}

message SwitchCharacterStateRequest {
	CombatCommon CombatCommon = 59;
	int64 Id = 48;
	int32 OldState = 23;
	int32 NewState = 44;
}

message SwitchCharacterStateResponse {
}

message SwitchCharacterStateNotify {
	CombatCommon CombatCommon = 38;
	int64 Id = 158;
	int32 OldState = 29;
	int32 NewState = 212;
}

message BattleStateChangeRequest {
	int64 EntityId = 149;
	bool InBattle = 103;
}

message BattleStateChangeResponse {
	int32 ErrorCode = 39;
}

message BattleStateChangeNotify {
	int64 EntityId = 64;
	bool InBattle = 110;
}

message ToughCalcExtraRatioChangeRequest {
	int64 Id = 113;
	int32 Duration = 243;
}

message ToughCalcExtraRatioChangeResponse {
	int32 ErrorCode = 56;
}

message MonsterBoomRequest {
	int32 Delay = 159;
}

message MonsterBoomResponse {
	int32 ErrorCode = 74;
}

message EntityBattleTagInfo {
	int32 TagId = 1;
	int32 Count = 2;
}

message EntityBattleInfoRequest {
	int64 EntityId = 81;
}

message EntityBattleInfoResponse {
	int64 EntityId = 23;
	int32 ErrorCode = 151;
	FightBuffComponentPb FightBuffComponentPb = 44;
	repeated EntityBattleTagInfo EntityBattleTagInfo = 66;
	repeated GameplayAttributeData Attributes = 198;
	repeated FormationAttr FormationAttrs = 218;
	repeated FormationBuff FormationBuffs = 18;
	PartComponentPb PartComponentPb = 113;
	repeated Ai.AiHateEntity HateList = 179;
	ShieldComponentPb ShieldComponentPb = 180;
	repeated EntityBattleTagInfo PlayerTagInfos = 117;
}

message MontagePlayRequest {
	int32 MontageIndex = 227;
}

message MontagePlayResponse {
	int32 SkillId = 44;
	int32 MontageIndex = 74;
	DErrorResult Error = 224;
}

message MontagePlayNotify {
	int32 SkillId = 110;
	int32 MontageIndex = 167;
}

message ANStartRequest {
	int32 SkillId = 14;
	int32 MontageIndex = 233;
	int32 AnIndex = 79;
}

message ANStartResponse {
	int32 SkillId = 103;
	int32 MontageIndex = 68;
	int32 AnIndex = 205;
	DErrorResult Error = 197;
}

message ANStartNotify {
	int32 SkillId = 134;
	int32 MontageIndex = 141;
	int32 AnIndex = 103;
}

enum EDamageImmune {
	EDamageImmune_EDamageImmune_Default = 0;
	EDamageImmune_EDamageImmune_Invincible = 1;
	EDamageImmune_EDamageImmune_BuffEffectElement = 2;
}

message CharacterBattleStateInfo {
	int64 EntityId = 1;
	bool InBattle = 2;
}

message CharacterBattleStateChangeNotify {
	repeated CharacterBattleStateInfo CharacterBattleStateInfo = 149;
}

message PlayerBattleStateChangeNotify {
	int32 PlayerId = 177;
	bool InBattle = 9;
}

enum EShieldUpdateType {
	EShieldUpdateType_EShieldUpdateTypeAdd = 0;
	EShieldUpdateType_EShieldUpdateTypeDel = 1;
	EShieldUpdateType_EShieldUpdateTypeModify = 2;
}

message ShieldUpdateInfo {
	int32 Handle = 1;
	int32 ConfigId = 2;
	int32 ShieldValue = 3;
	int32 UpdateType = 4;
}

message ShieldUpdateNotify {
	repeated ShieldUpdateInfo Shields = 214;
}

message ShieldInfoPb {
	int32 Handle = 1;
	int32 ConfigId = 2;
	int32 ShieldValue = 3;
	int32 Priority = 4;
	int32 BuffHandle = 5;
	bool IsValid = 6;
}

message ShieldComponentPb {
	repeated ShieldInfoPb ShieldInfoPbList = 1;
	int32 ShieldValueTotal = 2;
}

message FormationAttr {
	int32 AttrId = 1;
	int32 Ratio = 2;
	int32 BaseMaxValue = 3;
	int32 MaxValue = 4;
	int32 CurrentValue = 5;
}

message FormationAttrNotify {
	int64 CurTime = 52;
	repeated FormationAttr FormationAttrs = 44;
}

message FormationAttrRequest {
	int64 CurTime = 72;
	repeated FormationAttr FormationAttrs = 245;
}

message FormationAttrResponse {
	int32 ErrorCode = 81;
}

message RecoverAttr {
	int32 AttrId = 1;
	int32 Ratio = 2;
	int32 MaxValue = 4;
	int32 CurrentValue = 5;
}

message RecoverPropChangedNotify {
	int64 Id = 185;
	repeated RecoverAttr Attributes = 26;
	int64 CurTime = 74;
}

message FragileChangeRequest {
	int64 EntityId = 70;
	bool Flag = 31;
}

message FragileChangeResponse {
	int32 ErrorCode = 102;
}

message Debug {
	enum ECheatInput {
		ECheatInput_ECheatInputDefault = 0;
		ECheatInput_ECheatInputDel = 1;
		ECheatInput_ECheatInputEnd = 2;
	}


	message CheatInputRequest {
		int32 Type = 105;
		int32 AoeDestroyEnemyRange = 209;
		repeated int64 EntityList = 66;
	}


	message CheatInputResponse {
		int32 ErrorCode = 126;
	}


	message DamageRecordEntity {
		int64 EntityId = 1;
		repeated int64 BuffIds = 2;
		repeated GameplayAttributeData Attr = 3;
		repeated GameplayAttributeData AttrSnapshot = 4;
	}


	message DamageRecordNotify {
		int64 TimestampMs = 177;
		int64 DamageConfId = 205;
		int32 DamageValue = 180;
		int32 SkillId = 206;
		int32 SkillLevel = 174;
		int64 BulletId = 103;
		int32 DamageSourceType = 255;
		bool IsCritical = 111;
		Debug.DamageRecordEntity Attacker = 165;
		Debug.DamageRecordEntity Victim = 76;
	}


	message EnableDamageRecordRequest {
		bool Enable = 96;
	}


	message EnableDamageRecordResponse {
		int32 ErrorCode = 136;
	}


	message GmVoxelInfoNotify {
		float CellSize = 202;
		repeated Debug.VoxelSpan Spans = 192;
	}


	message GmIsOverlapNotify {
		float CellSize = 138;
		Debug.VoxelSpan Box = 83;
		bool IsOverlap = 74;
	}


	message VoxelSpan {
		float X = 1;
		float Y = 2;
		float Smin = 3;
		float Smax = 4;
	}


	message OutputDebugInfoRequest {
		string ClientInfo = 233;
	}


	message OutputDebugInfoResponse {
	}


}

message TimeStopPush {
	float TimeDilation = 93;
}

message RTimeStopRequest {
	bool Flag = 28;
	bool IsStopCharacter = 224;
	int32 Duration = 120;
}

message RTimeStopResponse {
	int32 ErrorCode = 173;
}

message RTimeStopInstRequest {
	bool Flag = 200;
	int32 Duration = 118;
}

message RTimeStopInstResponse {
	int32 ErrorCode = 84;
}

message ConditionExtraParams {
	int32 RoleId = 1;
}

message PhotographPush {
}

enum ControlType {
	ControlType_Unknown = 0;
	ControlType_TemporaryTeleportCtrl = 1;
}

message ControlTemporaryTeleportParam {
	repeated int64 TemporaryTeleportIds = 1;
}

message ControlParam {
	oneof Param_ {
		ControlTemporaryTeleportParam TemporaryTeleportParam = 2;
	}

	int32 ControlType = 1;
}

message ControlInfoNotify {
	repeated ControlParam ForbidList = 35;
}

message AddForbidControlNotify {
	repeated ControlParam ForbidList = 41;
}

message RemoveForbidControlNotify {
	repeated ControlParam ForbidList = 234;
}

message SingleItemInfo {
	int32 ItemId = 1;
	int32 ItemNum = 2;
}

message CookingInfo {
	int32 CookingLevel = 1;
	int32 TotalProficiencys = 2;
}

message SingleFoodFormulaInfo {
	int32 Id = 1;
	int32 CookCount = 2;
	int32 LastRoleId = 3;
	int32 LimitCount = 4;
	int32 LimitCookCount = 5;
	int64 LimitBeginTime = 6;
	int64 LimitEndTime = 7;
}

message OneFormulaConfig {
	int32 Id = 1;
	int64 LimitBeginTime = 2;
	int64 LimitEndTime = 3;
}

message SingleProcessedFoodFormulaInfo {
	int32 Id = 1;
	bool LockState = 2;
	repeated int32 Interations = 3;
	repeated int32 UnlockParams = 4;
}

message FixToolRequest {
	int32 FixTool = 182;
	int64 EntityId = 179;
}

message FixToolResponse {
	int32 Code = 32;
	int64 EntityId = 2;
}

message CookFormulaRequest {
	int32 CookFormulaId = 245;
}

message CookFormulaResponse {
	int32 Code = 232;
	int32 CookFormulaId = 25;
}

message CookFoodRequest {
	int32 Id = 3;
	int32 RoleId = 255;
	int32 CookCount = 55;
	int64 InteractEntityId = 220;
}

message CookFoodResponse {
	int32 Code = 233;
	int32 Id = 51;
	repeated SingleItemInfo ItemInfos = 50;
	int32 ActiveSkillType = 129;
	repeated SingleItemInfo ExtraItemInfos = 13;
	int32 RoleId = 121;
}

message FoodProcessRequest {
	int32 Id = 51;
	repeated SingleItemInfo PrimaryFood = 66;
	int32 CookCount = 177;
}

message FoodProcessResponse {
	int32 Code = 116;
	int32 Id = 18;
	repeated SingleItemInfo FinalFood = 159;
	bool LockState = 186;
	repeated int32 UnlockParam = 48;
}

message CertificateLevelRewardRequest {
}

message CertificateLevelRewardResponse {
	int32 Code = 23;
}

message CookingInfoUpdateNotify {
	CookingInfo CookingInfo = 31;
}

message CookingFormulaUpdateNotify {
	repeated SingleFoodFormulaInfo FoodFormulaInfos = 83;
	repeated SingleProcessedFoodFormulaInfo ProcessedFoodFormulaInfos = 134;
}

message CookingDataRequest {
}

message CookingDataResponse {
	int32 Code = 169;
	CookingInfo CookingInfo = 215;
	repeated SingleFoodFormulaInfo FoodFormulaInfos = 96;
	repeated SingleProcessedFoodFormulaInfo ProcessedFoodFormulaInfos = 255;
	repeated OneFormulaConfig FormulaConfigs = 204;
	int64 LimitRefreshTime = 71;
}

message InteractiveUpdateRequest {
	int32 InteractiveId = 35;
}

message InteractiveUpdateResponse {
	int32 Code = 156;
	int32 InteractiveId = 94;
}

message DropBagItemInfo {
	int32 ShowPlanId = 1;
	int32 ItemId = 2;
	int32 ItemCount = 3;
}

message DropInBagNotify {
	int32 DropId = 71;
	repeated DropBagItemInfo DropItemInfos = 154;
}

message PickUpDropItemRequest {
	int64 DropEntityId = 221;
}

message PickUpDropItemResponse {
	int32 ErrorCode = 253;
}

enum ElevatorState {
	ElevatorState_End = 0;
	ElevatorState_Forward = 1;
	ElevatorState_Reverse = 2;
}

message ElevatorStateChangeRequest {
	int64 EntityId = 26;
	int32 State = 83;
	int32 TagState = 27;
}

message ElevatorStateChangeResponse {
	int32 ErrorCode = 215;
}

message ElevatorMoveNotify {
	int64 EntityId = 50;
	int32 Location = 130;
}

message EnergyInfo {
	int32 EnergyCount = 1;
	int32 LastRenewEnergyTime = 2;
}

message EnergyUpdateNotify {
	EnergyInfo UpdateInfo = 58;
}

message EnergySyncRequest {
}

message EnergySyncResponse {
	int32 ErrCode = 171;
	EnergyInfo SyncInfo = 24;
}

message ExploreProgressRequest {
	repeated int32 AreaIds = 229;
}

message AreaExploreInfo {
	int32 AreaId = 1;
	repeated OneExploreItem ExploreProgress = 2;
	int32 ExplorePercent = 3;
}

message OneExploreItem {
	int32 ExploreProgressId = 1;
	int32 ExplorePercent = 2;
}

message ExploreProgressResponse {
	repeated AreaExploreInfo areaProgress = 219;
}

message ExploreScoreRewardRequest {
	int32 AreaId = 85;
	int32 ExploreProgress = 5;
}

message ExploreScoreRewardResponse {
	int32 ErrorCode = 232;
}

message CountryExploreScoreInfoRequest {
	int32 CountryId = 199;
}

message CountryExploreScoreInfoResponse {
	int32 CountryExploreScore = 209;
	repeated ExploreProgressRewardTake ExploreProgressRewardTakes = 237;
}

message ExploreProgressRewardTake {
	int32 areaId = 1;
	repeated int32 ExploreProgress = 2;
}

message CountryExploreLevel {
	int32 CountryId = 1;
	int32 ExploreLevel = 2;
}

message ExploreLevelNotify {
	repeated CountryExploreLevel CountryExploreLevel = 222;
}

message DetectionEntityPosInfo {
	Vector Pos = 1;
	int32 ConfigId = 2;
}

message ExploreToolUpdateNotify {
	int32 SkillId = 220;
}

message ExploreToolAllNotify {
	repeated int32 SkillList = 7;
	int32 ExploreSkill = 200;
}

enum RouletteType {
	RouletteType_Explore = 0;
	RouletteType_Function = 1;
}

message ExploreSkillRouletteUpdateNotify {
	repeated ExploreSkillRoulette RouletteInfo = 43;
}

message VisionExploreSkillSetRequest {
	int32 SkillId = 31;
}

message VisionExploreSkillSetResponse {
	int32 ErrCode = 180;
	int32 SkillId = 5;
}

message VisionExploreSkillNotify {
	int32 ExploreSkill = 132;
}

message ExploreSkillRoulette {
	repeated int32 SkillIds = 1;
	int32 ExtraItemId = 2;
}

message ExploreSkillRouletteSetRequest {
	repeated ExploreSkillRoulette SkillRoulettes = 96;
}

message ExploreSkillRouletteSetResponse {
	int32 ErrCode = 15;
	repeated ExploreSkillRoulette SkillRoulettes = 152;
}

message ExploreSkillPullGiantRequest {
	int64 EntityId = 148;
}

message ExploreSkillPullGiantResponse {
	int64 EntityId = 251;
	int32 Code = 42;
}

message UseDetectionSkillRequest {
	int32 SkillId = 213;
	Vector Pos = 201;
	Rotator Rot = 27;
	bool ConfirmUseDetectionSkill = 6;
}

message UseDetectionSkillResponse {
	int32 Code = 114;
	repeated DetectionEntityPosInfo DetectionEntityPosInfo = 221;
	int64 DetectionSlotId = 193;
}

message ExploreToolAuthorizationNotify {
	repeated int32 AuthorizationItems = 142;
}

message SetFanNumberOfTurnsRequest {
	int64 EntityId = 50;
	int32 NumberOfTurns = 170;
}

message SetFanNumberOfTurnsResponse {
	int32 ErrCode = 154;
}

message SetBaoziStateRequest {
	int64 FanEntityId = 229;
	int64 BaoziEntityId = 183;
	int32 IsActive = 195;
}

message SetBaoziStateResponse {
	int32 ErrCode = 10;
}

message SetFanStateRequest {
	int64 FanEntityId = 120;
	int32 IsActive = 9;
}

message SetFanStateResponse {
	int32 ErrCode = 252;
}

message FavorQuest {
	int32 Chapter = 1;
	int32 Status = 2;
}

enum FavorQuestStatus {
	FavorQuestStatus_Locked = 0;
	FavorQuestStatus_CanAccept = 1;
	FavorQuestStatus_Accepted = 2;
	FavorQuestStatus_Completed = 3;
}

enum FavorItemStatus {
	FavorItemStatus_ItemLocked = 0;
	FavorItemStatus_ItemCanUnLock = 1;
	FavorItemStatus_ItemUnLocked = 2;
}

enum FavorItemType {
	FavorItemType_Word = 0;
	FavorItemType_Story = 1;
	FavorItemType_Goods = 2;
}

message FavorItem {
	int32 Id = 1;
	int32 Status = 2;
}

message RoleFavor {
	int32 RoleId = 1;
	int32 Level = 2;
	int32 Exp = 3;
	repeated FavorItem WordIds = 4;
	repeated FavorItem StoryIds = 5;
	repeated FavorItem GoodsIds = 6;
	FavorQuest FavorQuest = 7;
}

message RoleFavorListRequest {
}

message RoleFavorListResponse {
	int32 ErrCode = 107;
	repeated RoleFavor FavorList = 175;
}

message RoleFavorListNotify {
	repeated RoleFavor FavorList = 77;
	map<int32, ConditionInfo> RoleConditionInfoMap = 31;
}

message RoleFavorActiveNotify {
	RoleFavor RoleFavorInfo = 60;
}

message RoleFavorLevelUpdateNotify {
	int32 RoleId = 113;
	int32 Level = 199;
	int32 Exp = 219;
}

message RoleFavorNewCanUnLockNotify {
	int32 ItemType = 63;
	int32 RoleId = 254;
	int32 CanUnLockId = 144;
}

message RoleFavorExpTipsNotify {
	repeated ExpTips ExpTips = 148;
	int32 ItemId = 53;
	int32 Count = 188;
}

message ExpTips {
	int32 RoleId = 1;
	int32 Exp = 2;
}

message ItemFinishList {
	repeated int32 ConditionIdList = 1;
}

message ConditionItem {
	map<int32, ItemFinishList> ItemFinishMap = 1;
}

message ConditionInfo {
	map<int32, ConditionItem> FinishConditionMap = 2;
}

message RoleFavorFinishConditionNotify {
	map<int32, ConditionInfo> RoleConditionInfoMap = 176;
}

message RoleFavorUnLockRequest {
	int32 ItemType = 63;
	int32 RoleId = 107;
	int32 UnLockId = 7;
}

message RoleFavorUnLockResponse {
	int32 ErrCode = 229;
	int32 ItemType = 114;
	int32 RoleId = 13;
	int32 UnLockId = 198;
}

message RoleFavorNewQuestUpdateNotify {
	int32 RoleId = 183;
	FavorQuest FavorQuest = 223;
}

enum FavorQuestType {
	FavorQuestType_Talk = 0;
	FavorQuestType_Favor = 1;
}

message RoleFavorAcceptQuestRequest {
	int32 RoleId = 41;
	int32 QuestType = 2;
	int32 Chapter = 9;
}

message RoleFavorAcceptQuestResponse {
	int32 ErrCode = 107;
	int32 RoleId = 239;
	int32 QuestType = 169;
}

message RoleFavorTalkScoreRequest {
	int32 Score = 215;
	int32 ErrorCount = 224;
}

message RoleFavorTalkScoreResponse {
	int32 ErrCode = 20;
	bool IsComplete = 150;
}

message RoleMotionUnLockRequest {
	int32 RoleId = 27;
	int32 UnLockId = 12;
}

message RoleMotionUnLockResponse {
	int32 ErrCode = 142;
	int32 RoleId = 198;
	int32 UnLockId = 183;
}

message RoleMotionNewCanUnLockNotify {
	int32 RoleId = 197;
	int32 CanUnLockId = 154;
}

message RoleMotion {
	int32 RoleId = 1;
	repeated FavorItem MotionIds = 2;
}

message RoleMotionActiveNotify {
	RoleMotion RoleMotionInfo = 144;
}

message RoleMotionListNotify {
	repeated RoleMotion MotionList = 111;
	map<int32, ConditionInfo> RoleConditionInfoMap = 149;
}

message RoleMotionFinishConditionNotify {
	map<int32, ConditionInfo> RoleConditionInfoMap = 114;
}

enum SwitchRoleType {
	SwitchRoleType_SignleWorld = 0;
	SwitchRoleType_MultiWorld = 1;
	SwitchRoleType_FbInstance = 2;
}

message FormationRoleInfo {
	int32 RoleId = 1;
	int32 MaxHp = 2;
	int32 CurHp = 3;
	int32 Level = 4;
}

message FightFormationNotifyInfo {
	int32 FormationId = 1;
	int32 CurRole = 2;
	repeated FormationRoleInfo RoleInfos = 3;
	bool IsCurrent = 4;
}

message FightFormation {
	int32 FormationId = 1;
	int32 CurRole = 2;
	repeated int32 RoleIds = 3;
	bool IsCurrent = 4;
}

message SwitchRoleRequest {
	int32 RoleId = 202;
	int32 SwitchType = 94;
}

message SwitchRoleResponse {
	int32 ErrorCode = 56;
	int32 RoleId = 197;
}

message SwitchRoleNotify {
	int32 PlayerId = 97;
	int64 UpEntityId = 39;
	int64 DownEntityId = 190;
}

message DieSwitchRoleNotify {
	int32 CurRoleId = 148;
}

message UpdateFormationRequest {
	repeated FightFormation Formations = 234;
}

message UpdateFormationResponse {
	int32 ErrorCode = 246;
	FightFormation Formation = 227;
}

message PlayerFightFormations {
	int32 PlayerId = 1;
	repeated FightFormationNotifyInfo Formations = 2;
}

message UpdateFormationNotify {
	repeated PlayerFightFormations PlayersFormations = 138;
}

message UpdateFightRoleRequest {
	int32 CurRoleId = 154;
	repeated int32 RoleIds = 196;
}

message UpdateFightRoleResponse {
	int32 ErrorCode = 87;
}

message FormationAutoAddRoleNotify {
	repeated int32 Roles = 9;
	int32 FormationId = 159;
}

message GetFormationDataRequest {
}

message GetFormationDataResponse {
	int32 ErrorCode = 197;
	repeated FightFormation formations = 140;
}

message FormationUpdateNotify {
	repeated int32 RemoveFormationIds = 2;
	repeated FightFormation Formation = 141;
	int32 FormationId = 201;
}

message FlowStartNotify {
	int64 FlowIncId = 241;
	string FlowListName = 189;
	int32 FlowId = 159;
	int32 StateId = 116;
	GameCtxPb GameCtx = 196;
	string PlotMode = 211;
	bool Async = 114;
	bool IsSkip = 78;
}

message FlowEndRequest {
	int64 FlowIncId = 181;
	bool IsSkip = 231;
	map<int32, FlowOptionInfoList> OptionInfos = 232;
}

message FlowOptionInfoList {
	repeated FlowOptionInfo OptionIndexList = 1;
}

message FlowOptionInfo {
	int32 TalkId = 1;
	int32 OptionIndex = 2;
}

message FlowEndResponse {
	int32 Code = 87;
}

message FlowEndNotify {
	int64 FlowIncId = 194;
	bool Async = 165;
	bool IsFinished = 166;
}

message FlowRestartRequest {
	int64 FlowIncId = 94;
}

message FlowRestartResponse {
	int32 Code = 43;
}

message FlowActionRequest {
	int64 FlowIncId = 242;
	int32 ActionId = 101;
}

message FlowActionResponse {
	int32 Code = 50;
}

message FlowShowEntityNotify {
	bool IsHide = 127;
	repeated int32 EntityIds = 44;
}

message ShowPasserByNpcNotify {
	bool IsHide = 218;
	repeated int64 EntityIds = 158;
}

message FlowServerSkipNotify {
	string FlowListName = 124;
	int32 FlowId = 46;
	int32 StateId = 159;
	bool FadeOutScreen = 7;
}

message ForgeInfoRequest {
}

message ForgeInfoResponse {
	int32 Code = 230;
	repeated OneForgeInfo ForgeInfoList = 205;
	repeated OneForgeConfig ForgeConfigs = 182;
	int64 LimitRefreshTime = 70;
}

message OneForgeInfo {
	int32 Id = 1;
	int32 LastRoleId = 3;
	int32 LimitCount = 4;
	int32 LimitForgeCount = 5;
	int64 LimitBeginTime = 6;
	int64 LimitEndTime = 7;
}

message OneForgeConfig {
	int32 Id = 1;
	int64 LimitBeginTime = 2;
	int64 LimitEndTime = 3;
}

message ForgeItemRequest {
	int32 Id = 175;
	int32 RoleId = 194;
	int32 Count = 60;
	int64 InteractEntityId = 208;
}

message ForgeItemResponse {
	int32 Code = 130;
	int32 Id = 132;
	repeated SingleItemInfo ItemInfos = 96;
	int32 ActiveSkillType = 36;
	repeated SingleItemInfo ExtraItemInfos = 160;
	int32 RoleId = 72;
}

message ForgeItemInfoUpdateNotify {
	repeated OneForgeInfo ForgeInfoList = 93;
}

message ForgeFormulaUnlockRequest {
	int32 Id = 10;
}

message ForgeFormulaUnlockResponse {
	int32 Code = 101;
	int32 Id = 6;
}

message Formation {
	int32 Id = 1;
	int32 RoleIndex = 2;
	repeated int32 Role = 3;
	bool IsCurrent = 4;
}

message FormationRequest {
}

message FormationResponse {
	repeated Formation Formation = 43;
	int32 ErrorCode = 235;
}

message FormationSwitchCurrentRequest {
	int32 Id = 199;
}

message FormationSwitchCurrentResponse {
	int32 CurrentId = 90;
	int32 ErrorCode = 136;
}

message FormationModifyRequest {
	int32 Id = 148;
	repeated int32 Role = 60;
}

message FormationModifyResponse {
	Formation Formation = 73;
	int32 ErrorCode = 58;
}

message FormationChangeInfo {
	int32 Id = 1;
	repeated int32 Role = 2;
}

message FormationChangeRequest {
	repeated FormationChangeInfo ChangeList = 243;
	int32 FormationId = 65;
}

message FormationChangeResponse {
	repeated FormationChangeInfo ChangeList = 50;
	int32 FormationId = 231;
	int32 ErrorCode = 53;
}

message FormationSwitchRoleRequest {
	int32 RoleIndex = 77;
}

message FormationSwitchRoleResponse {
	int32 RoleIndex = 207;
	int32 ErrorCode = 84;
}

message PbFormationAutoAddRoleNotify {
	repeated int32 Roles = 201;
	int32 FormationId = 105;
}

message PhantomFormationChangeNotify {
	int32 CurrRole = 121;
	repeated int32 RoleIds = 57;
	int32 FormationId = 115;
	bool IsExit = 73;
}

message ClientCurrentRoleReportRequest {
	int32 PlayerId = 72;
	int32 CurrentRoleId = 122;
	int64 CurrentEntityId = 154;
}

message ClientCurrentRoleReportResponse {
	int32 PlayerId = 36;
	int64 CurrentEntityId = 48;
}

message FriendInfo {
	PlayerDetails Info = 1;
	string Remark = 2;
}

message FriendApply {
	PlayerDetails Info = 1;
	int64 CreatedTime = 2;
}

message FriendAllRequest {
}

message FriendAllResponse {
	repeated FriendInfo FriendInfoList = 215;
	repeated FriendApply FriendApplyList = 250;
	int32 ErrorCode = 50;
}

message FriendAddedNotify {
	FriendInfo Info = 220;
}

message FriendDeletedNotify {
	int32 Id = 86;
}

message FriendApplyReceivedNotify {
	FriendApply FriendApply = 63;
}

message FriendApplyDeletedNotify {
	int32 Id = 165;
}

enum FriendApplyWay {
	FriendApplyWay_Search = 0;
	FriendApplyWay_RecentlyTeam = 1;
}

message FriendApplySendRequest {
	int32 Id = 216;
	int32 Way = 194;
}

message FriendApplySendResponse {
	int32 ErrorCode = 203;
}

enum FriendApplyOperator {
	FriendApplyOperator_Approve = 0;
	FriendApplyOperator_Reject = 1;
}

message FriendApplyHandleRequest {
	repeated int32 Ids = 134;
	int32 Operator = 202;
}

message FriendApplyHandleResponse {
	map<int32, int32> HandledMap = 198;
	int32 ErrorCode = 220;
}

message FriendRemarkRequest {
	int32 Id = 107;
	string Remark = 66;
}

message FriendRemarkResponse {
	int32 ErrorCode = 100;
}

message FriendDeleteRequest {
	int32 Id = 197;
}

message FriendDeleteResponse {
	int32 ErrorCode = 110;
}

message RecentlyTeamInfo {
	PlayerDetails Info = 1;
	int64 TeamTime = 2;
}

message FriendRecentlyTeamRequest {
}

message FriendRecentlyTeamResponse {
	repeated RecentlyTeamInfo Infos = 47;
	int32 ErrorCode = 36;
}

message FriendRecentlyTeamUpdateNotify {
	repeated RecentlyTeamInfo AddInfos = 8;
	map<int32, int64> TimeUpdate = 140;
	repeated int32 RemoveIds = 90;
}

message Function {
	int32 Id = 1;
	int32 Flag = 5;
}

message FuncOpenNotify {
	repeated Function Func = 255;
}

message FuncOpenConfirmNotify {
	bytes FuncInfo = 213;
}

message FuncOpenUpdateNotify {
	repeated Function Func = 182;
}

message FuncShowRequest {
	repeated int32 FuncId = 6;
}

message FuncShowResponse {
	int32 ErrorCode = 199;
}

message GachaConsume {
	int32 Times = 1;
	int32 Consume = 2;
}

message GachaPoolInfo {
	int32 Id = 1;
	int64 BeginTime = 2;
	int64 EndTime = 3;
	repeated string Urls = 4;
}

message GachaInfo {
	int32 Id = 1;
	int32 TodayTimes = 2;
	int32 TotalTimes = 3;
	int32 ItemId = 4;
	repeated GachaConsume GachaConsumes = 5;
	int32 UsePoolId = 6;
	repeated GachaPoolInfo Pools = 7;
	int64 BeginTime = 8;
	int64 EndTime = 9;
	int32 DailyLimitTimes = 10;
	int32 TotalLimitTimes = 11;
	string ResourcesId = 12;
}

message GachaReward {
	int32 ItemId = 1;
	int32 ItemCount = 2;
}

message GachaResult {
	oneof BottomExtraReward_ {
		GachaReward BottomExtraReward = 3;
	}

	GachaReward GachaReward = 1;
	repeated GachaReward ExtraRewards = 2;
	repeated GachaReward TransformRewards = 4;
}

message GachaRecord {
	GachaReward GachaReward = 1;
	int64 GachaTime = 2;
}

message GachaInfoRequest {
	int32 Language = 224;
}

message GachaInfoResponse {
	int32 ErrorCode = 52;
	repeated GachaInfo GachaInfos = 249;
	int32 DailyTotalLeftTimes = 125;
	string RecordId = 42;
}

message GachaRequest {
	int32 GachaId = 191;
	int32 GachaTimes = 34;
}

message GachaResponse {
	int32 ErrorCode = 240;
	repeated GachaResult GachaResults = 244;
}

message GachaResultNotify {
	repeated GachaResult GachaResults = 208;
}

message GachaUsePoolRequest {
	int32 GachaId = 161;
	int32 PoolId = 96;
}

message GachaUsePoolResponse {
	int32 ErrorCode = 84;
}

message GatherItemInfo {
	int32 ItemId = 1;
	int32 ItemNum = 2;
}

message GatherTaskSubmitInfo {
	int32 TaskId = 1;
	repeated GatherItemInfo GatherItemInfos = 2;
}

enum GatherTaskState {
	GatherTaskState_Lock = 0;
	GatherTaskState_Running = 1;
	GatherTaskState_InComplete = 2;
	GatherTaskState_Done = 3;
	GatherTaskState_TakeReward = 4;
}

message TaskDoneInfo {
	int32 taskId = 1;
	int32 state = 2;
}

message GatherTaskRecordNotify {
	repeated TaskDoneInfo TaskDoneInfo = 124;
}

message GatherClueInfoNotify {
	repeated int32 UnLockClueIds = 184;
}

message SubmitItemInfoNotify {
	repeated GatherTaskSubmitInfo GatherTaskSubmitInfos = 105;
}

message GatherActivityRewardRequest {
	int32 GatherTaskId = 222;
}

message GatherActivityRewardResponse {
	int32 ErrorCode = 198;
}

message GuideInfoRequest {
}

message GuideInfoResponse {
	repeated int32 GuideGroupFinishList = 27;
}

message GuideTriggerRequest {
	int32 GroupId = 130;
}

message GuideTriggerResponse {
	int32 ErrorCode = 86;
	repeated string ErrorParams = 173;
}

message GuideFinishRequest {
	int32 GroupId = 250;
}

message GuideFinishResponse {
	int32 ErrorCode = 227;
	repeated string ErrorParams = 7;
}

message GuideCondDoneNotify {
	int32 GroupId = 46;
}

message HeartbeatRequest {
}

message HeartbeatResponse {
}

message GatewayEchoRequest {
	string Content = 111;
}

message GatewayEchoResponse {
	string Content = 38;
}

enum IllustratedType {
	IllustratedType_Monster = 0;
	IllustratedType_VocalCorpse = 1;
	IllustratedType_ViewPoint = 2;
	IllustratedType_Weapon = 3;
	IllustratedType_Animal = 4;
	IllustratedType_Item = 5;
	IllustratedType_Chip = 6;
	IllustratedType_Photograph = 7;
}

message IllustratedEntry {
	int32 Id = 1;
	uint32 CreateTime = 2;
	int32 Num = 3;
	bool IsRead = 4;
}

message IllustratedClass {
	int32 Type = 1;
	repeated IllustratedEntry IllustratedEntryList = 2;
}

message IllustratedRedDotRequest {
}

message IllustratedRedDotResponse {
	repeated int32 RedDotList = 49;
}

message IllustratedInfoRequest {
	repeated int32 TypeList = 141;
}

message IllustratedInfoResponse {
	int32 ErrorCode = 211;
	repeated string ErrorParams = 37;
	repeated IllustratedClass IllustratedClassList = 214;
}

message IllustratedUnlockRequest {
	int32 Type = 41;
	int32 Id = 213;
}

message IllustratedUnlockResponse {
	int32 ErrorCode = 64;
	repeated string ErrorParams = 21;
	IllustratedEntry Entry = 184;
}

message IllustratedUnlockNotify {
	int32 Type = 85;
	IllustratedEntry Entry = 94;
	bool IsNew = 77;
}

message IllustratedReadRequest {
	int32 Type = 122;
	int32 Id = 189;
}

message IllustratedReadResponse {
	int32 ErrorCode = 222;
	repeated string ErrorParams = 39;
}

message InfluenceInfoRequest {
}

message InfluenceInfoResponse {
	repeated OneInfluenceInfo InfluenceInfos = 119;
}

message OneInfluenceInfo {
	int32 InfluenceId = 1;
	int32 RewardIndex = 2;
	int32 Relation = 3;
}

message InfluenceInfoUpdateNotify {
	repeated OneInfluenceInfo InfluenceInfos = 165;
}

message InfluenceRewardRequest {
	int32 InfluenceId = 76;
}

message InfluenceRewardResponse {
	int32 Code = 143;
	int32 InfluenceId = 14;
	int32 RewardIndex = 119;
	map<int32, int32> RewardItems = 141;
}

message ReadDisplayInfoRequest {
	int32 DisplayId = 237;
}

message ReadDisplayInfoResponse {
	int32 ErrorCode = 69;
}

message InstDataNotify {
	repeated InstEnterInfoPb EnterInfos = 36;
}

message InstEnterInfoPb {
	int32 Id = 1;
	int32 EnterCount = 2;
}

message UpdateEnterInfoNotify {
	repeated InstEnterInfoPb EnterInfos = 140;
}

message EnterInstRequest {
	int32 InstanceId = 158;
	repeated int32 RoleIds = 174;
	int32 EntranceId = 253;
	int32 PosEntityId = 59;
	TransitionOptionPb TransitionOption = 5;
}

message EnterInstResponse {
	int32 ErrorCode = 239;
}

message UnlockInstEntranceRequest {
	int32 EntranceId = 22;
}

message UnlockInstEntranceResponse {
	int32 ErrorCode = 51;
}

message InstEntranceDetailRequest {
	int32 EntranceId = 165;
}

message InstEntranceDetailResponse {
	int32 ErrorCode = 170;
	int32 EntranceId = 46;
	int64 LimitEndTime = 163;
	repeated InstDetailEntry InstDetailEntryList = 183;
}

message InstDetailEntry {
	int32 InstId = 1;
	int64 ResetTime = 2;
	int32 Count = 3;
}

message LeaveInstRequest {
	int32 InstId = 200;
	int32 PosEntityId = 176;
}

message LeaveInstResponse {
	int32 ErrorCode = 160;
}

message InstPlayDataNotify {
	int32 Id = 123;
}

message GetInstExchangeRewardRequest {
}

message GetInstExchangeRewardResponse {
	int32 ErrorCode = 28;
}

message InstSettleNotify {
	bool IsSuccess = 226;
	map<int32, int32> RewardItems = 93;
	bool RewardFailTips = 128;
	int32 Magnification = 210;
}

message InstResultNotify {
	int32 Id = 226;
	bool Succ = 97;
	int32 Reason = 107;
	bool IsRecReward = 248;
}

message ExchangeRewardInfoRequest {
}

message ExchangeRewardInfoResponse {
	map<int32, int32> SharedDict = 96;
	map<int32, int32> ExchangeRewardDict = 36;
}

message ExchangeRewardInfoNotify {
	int32 ExchangeRewardId = 213;
	int32 Count = 206;
}

message ExchangeSharedInfoNotify {
}

message InstTimeoutNotify {
	int64 Timestamp = 160;
}

message SingleInstRechallengeRequest {
	repeated int32 RoleIds = 192;
}

message SingleInstRechallengeResponse {
	int32 ErrorCode = 245;
}

message InterativeDoRequest {
	int64 InterativeId = 147;
	int32 StepId = 204;
	int32 EventGroupId = 194;
	int32 ConditionGroupId = 33;
	int64 EntityId = 27;
}

message InterativeDoResponse {
	int32 ErrorId = 213;
}

message RegisterInterativeConditionRequest {
	string RowKey1 = 31;
	int32 ConditionGroupID = 158;
}

message RegisterInterativeConditionResponse {
}

message InterativeConditionCompleteNotify {
	string RowKey1 = 211;
	int32 ConditionGroupID = 21;
}

message AddCountItemInfo {
	int32 Id = 1;
	int32 Count = 2;
	int32 IncrId = 3;
}

message ItemDecomposeRequest {
	repeated DecomposeItemInfo ItemList = 214;
}

message DecomposeItemInfo {
	int32 Count = 2;
	int32 ItemId = 3;
	int32 IncrId = 4;
}

message ItemDecomposeResponse {
	int32 ErrCode = 60;
}

message ItemDecomposePreviewRequest {
	repeated DecomposeItemInfo ItemList = 92;
}

message ItemDecomposePreviewResponse {
	int32 ErrorCode = 109;
	map<int32, int32> ItemMap = 20;
}

message ItemLockRequest {
	int32 Oper = 24;
	int32 IncrId = 220;
}

message ItemLockResponse {
	int32 ErrCode = 87;
}

message ItemUseRequest {
	int32 Count = 197;
	int32 ItemId = 129;
}

message ItemUseResponse {
	int32 ErrCode = 212;
}

message RewardItemInfo {
	int32 ShowPlanId = 1;
	int32 ItemId = 2;
	int32 Count = 3;
	int32 IncrId = 4;
}

message ItemRewardNotify {
	int32 DropId = 52;
	repeated RewardItemInfo ItemList = 158;
	int32 Reason = 123;
	int32 Magnification = 188;
}

message ItemGiftUseRequest {
	int32 Count = 125;
	repeated int32 SelectedId = 41;
	int32 ItemId = 142;
}

message ItemGiftUseResponse {
	repeated AddCountItemInfo Infos = 175;
	int32 ErrorCode = 25;
}

message ItemGiftUseNotify {
	repeated AddCountItemInfo Infos = 207;
	int32 Id = 255;
}

message NormalItemRequest {
}

message NormalItemResponse {
	repeated NormalItem NormalItemList = 249;
}

message NormalItemUpdateNotify {
	repeated NormalItem NormalItemList = 155;
	bool NoTips = 74;
}

message NormalItemRemoveNotify {
	repeated int32 NormalItemIdList = 80;
}

message NormalItemAddNotify {
	repeated NormalItem NormalItemList = 115;
	bool NoTips = 13;
	int32 Reason = 86;
}

message WeaponItemRequest {
}

message WeaponItemResponse {
	repeated WeaponItem WeaponItemList = 171;
}

message WeaponItemAddNotify {
	repeated WeaponItem WeaponItemList = 146;
	bool AddFromRole = 253;
	int32 Reason = 14;
}

message WeaponItemRemoveNotify {
	repeated int32 WeaponItemIncrIdList = 240;
}

message PhantomItemRequest {
}

message RolePhantomEquipInfo {
	int32 RoleId = 1;
	repeated int32 PhantomItemIncrId = 2;
}

message RolePhantomPropInfo {
	int32 RoleId = 1;
	repeated ArrayIntInt BaseProp = 2;
	repeated ArrayIntInt AddProp = 3;
}

message PhantomItemResponse {
	repeated PhantomItem PhantomItemList = 175;
	repeated RolePhantomEquipInfo EquipInfo = 171;
	repeated RolePhantomPropInfo PropInfo = 97;
	int32 TotalCost = 178;
	repeated int32 UnlockSkins = 205;
}

message PhantomItemAddNotify {
	repeated PhantomItem PhantomItemList = 253;
	int32 Reason = 207;
}

message PhantomItemRemoveNotify {
	repeated int32 PhantomItemIncrIdList = 214;
}

message ItemFuncValueUpdateNotify {
	int32 IncrId = 167;
	int32 FuncValue = 92;
}

message WeaponItem {
	int32 Id = 1;
	int32 IncrId = 2;
	int32 FuncValue = 3;
	int32 WeaponLevel = 4;
	int32 WeaponExp = 5;
	int32 WeaponBreach = 6;
	int32 WeaponResonLevel = 7;
	int32 RoleId = 8;
}

message PhantomItem {
	int32 Id = 1;
	int32 IncrId = 2;
	int32 FuncValue = 3;
	int32 PhantomLevel = 4;
	int32 PhantomExp = 5;
	repeated PhantomPropInfo PhantomMainProp = 6;
	repeated PhantomPropInfo PhantomSubProp = 7;
	int32 FetterGroupId = 8;
	int32 SkinId = 9;
}

message PhantomPropSlot {
	int32 Index = 1;
	repeated PhantomPropInfo PhantomProp = 2;
}

message NormalItem {
	int32 Id = 1;
	int32 Count = 2;
	int64 ExpireTime = 4;
}

message NumItem {
	int32 Id = 1;
	int32 Count = 2;
}

message PhantomPropInfo {
	int32 PhantomPropId = 1;
	int32 Value = 2;
}

message ItemObtainNotify {
	int32 Reason = 226;
	repeated AddCountItemInfo Items = 164;
}

message ItemPkgOpenNotify {
	repeated int32 OpenPkg = 133;
}

message InvalidItemRequest {
}

message InvalidItem {
	int32 ItemId = 1;
	int32 Count = 2;
	int32 IncrId = 3;
}

message InvalidItemResponse {
	bool HasInvalidItem = 159;
}

message ShowInvalidItemRequest {
}

message ShowInvalidItemResponse {
	repeated InvalidItem InvalidItemList = 252;
}

message ValidTimeItemRequest {
}

message ValidTimeItem {
	int32 Id = 1;
	int32 Count = 2;
	int32 IncrId = 3;
	int64 ExpireTime = 4;
}

message ValidTimeItemResponse {
	repeated ValidTimeItem ItemList = 139;
}

message ValidTimeItemUpdateNotify {
	repeated ValidTimeItem ItemList = 29;
}

message RemoveValidTimeItem {
	int32 ItemId = 1;
	int32 IncrId = 2;
}

message ValidTimeItemRemoveNotify {
	repeated RemoveValidTimeItem ItemList = 237;
}

message ValidTimeItemAddNotify {
	repeated ValidTimeItem ItemList = 160;
	int32 Reason = 244;
}

message PbGetRoleListRequest {
}

message PbGetRoleListResponse {
	int32 code = 87;
	repeated roleInfo RoleList = 147;
}

message PbGetRoleListNotify {
	repeated roleInfo RoleList = 219;
}

message PbRoleActiveRequest {
	int32 RoleId = 22;
}

message PbRoleActiveResponse {
	int32 code = 159;
}

message PbRoleActiveNotify {
	roleInfo Role = 14;
}

message PbUpLevelRoleRequest {
	int32 RoleId = 129;
	repeated ArrayIntInt ItemList = 30;
}

message PbUpLevelRoleResponse {
	int32 code = 183;
	int32 RoleId = 134;
	int32 Exp = 17;
	int32 Level = 51;
	map<int32, int32> ItemMap = 10;
}

message PbOverRoleRequest {
	int32 RoleId = 71;
}

message PbOverRoleResponse {
	int32 code = 68;
	int32 RoleId = 59;
	int32 Breakthrough = 71;
}

message PbUpLevelSkillRequest {
	int32 RoleId = 205;
	int32 SkillId = 89;
}

message PbUpLevelSkillResponse {
	int32 code = 233;
	int32 RoleId = 44;
	ArrayIntInt SkillInfo = 56;
}

message PbUplevelStarRequest {
	int32 RoleId = 110;
	int32 Star = 246;
}

message PbUplevelStarResponse {
	int32 code = 169;
	int32 RoleId = 230;
	int32 Star = 214;
}

message PbChangeNameRequest {
	int32 RoleId = 154;
	string Name = 237;
}

message PbChangeNameResponse {
	int32 code = 148;
	int32 RoleId = 244;
	string Name = 90;
}

message PbRolePropsNotify {
	int32 RoleId = 186;
	repeated ArrayIntInt BaseProp = 118;
	repeated ArrayIntInt AddProp = 231;
}

message PbRolePhantomRequest {
	int32 RoleId = 64;
	int32 Pos = 129;
	int32 PhantomId = 102;
}

message PbRolePhantomResponse {
	int32 code = 28;
	int32 RoleId = 55;
	int32 Pos = 45;
	int32 PhantomId = 43;
}

message ArrayIntInt {
	int32 Key = 1;
	int32 Value = 2;
}

message ArrayIntDouble {
	int32 Key = 1;
	double Value = 2;
}

message ArraySkillNode {
	int32 SkillNodeId = 1;
	bool IsActive = 2;
	int32 SkillId = 3;
}

message ResonInfo {
	int32 ResonId = 1;
	bool IsOpen = 2;
	int32 Increase = 3;
}

message roleInfo {
	int32 RoleId = 1;
	string Name = 2;
	int32 Level = 3;
	int32 Exp = 4;
	int32 Breakthrough = 5;
	repeated ArrayIntInt Skills = 6;
	repeated ArrayIntInt Phantom = 7;
	int32 Star = 8;
	int32 Favor = 10;
	repeated ResonInfo Reson = 11;
	int32 CurModel = 12;
	repeated int32 Models = 13;
	repeated ArrayIntInt BaseProp = 14;
	repeated ArrayIntInt AddProp = 15;
	uint32 CreateTime = 17;
	repeated ArraySkillNode SkillNodeState = 19;
	int32 ResonantChainGroupIndex = 20;
}

message PbRoleExpNotify {
	int32 RoleId = 53;
	int32 Exp = 162;
	int32 Level = 186;
}

message PbRoleResonLockFinishNotify {
	int32 RoleId = 120;
	int32 ResonId = 165;
}

message PbRoleScenePropsNotify {
	int32 RoleId = 24;
	repeated ArrayIntInt BaseProp = 50;
	repeated ArrayIntInt AddProp = 149;
}

message PbRoleSkillLevelNotify {
	int32 RoleId = 187;
	ArrayIntInt SkillInfo = 213;
}

message SkillEffect {
	int32 Level = 1;
	repeated OneSkillEffect EffectDescList = 3;
}

message OneSkillEffect {
	int32 Id = 1;
	repeated string Desc = 3;
}

message RoleLevelUpViewRequest {
	int32 RoleId = 216;
	int32 MaxItemId = 88;
	repeated ArrayIntInt ItemList = 119;
}

message RoleLevelUpViewResponse {
	int32 Code = 241;
	int32 Level = 102;
	repeated ArrayIntInt LevelExpInfo = 114;
	int32 Exp = 81;
	int32 AddExp = 74;
	repeated ArrayIntDouble FinalProp = 190;
	repeated ArrayIntInt CostList = 37;
	repeated ArrayIntInt OverflowList = 221;
	repeated ArrayIntInt ItemList = 121;
}

message RoleBreakThroughViewRequest {
	int32 RoleId = 121;
}

message RoleBreakThroughViewResponse {
	int32 Code = 122;
	int32 LevelLimit = 217;
	int32 UnLockSkillId = 52;
	repeated ArrayIntInt CostList = 171;
	repeated ArrayIntInt RewardList = 214;
	repeated ArrayIntDouble FinalProp = 96;
	bool IsConditionFinish = 202;
}

message RoleSkillLevelUpViewRequest {
	int32 RoleId = 80;
	int32 SkillId = 15;
}

message RoleSkillLevelUpViewResponse {
	int32 Code = 254;
	repeated SkillEffect SkillEffectList = 178;
	repeated ArrayIntInt CostList = 89;
}

message RoleSkillViewRequest {
	int32 RoleId = 49;
	int32 SkillId = 137;
}

message RoleSkillViewResponse {
	int32 Code = 131;
	repeated SkillEffect SkillEffectList = 142;
	repeated SkillEffect PreSkillEffectList = 128;
	bool IsConditionFinish = 113;
}

message RoleChangeNameNotify {
	int32 RoleId = 100;
	string Name = 159;
}

message RoleTrialOpenNotify {
	repeated int32 RoleIds = 70;
}

message RoleTrialCloseNotify {
	repeated int32 RoleIds = 25;
}

message RoleActivateSkillRequest {
	int32 RoleId = 188;
	int32 SkillNodeId = 137;
}

message RoleActivateSkillResponse {
	int32 code = 80;
	int32 RoleId = 103;
	ArrayIntInt SkillInfo = 60;
}

message RoleSkillNodeNotify {
	int32 RoleId = 229;
	repeated ArraySkillNode SkillNodeState = 18;
}

message ResonantChainUnlockRequest {
	int32 RoleId = 23;
}

message ResonantChainUnlockResponse {
	int32 ErrCode = 56;
	int32 RoleId = 184;
	int32 ResonantChainGroupIndex = 175;
}

message RoleSexChangeRequest {
	int32 Sex = 153;
}

message RoleSexChangeResponse {
	int32 ErrorCode = 139;
	int32 Sex = 117;
}

message RoleElementChangeRequest {
	int32 ElementType = 166;
}

message RoleElementChangeResponse {
	int32 ErrorCode = 89;
}

message RoleChangeNotify {
	int32 SourceRoleId = 29;
	roleInfo RoleInfo = 85;
}

message RoleChangeUnlockNotify {
	repeated int32 UnlockRoleIds = 143;
}

message MaxMessageIdPush {
}

message ItemExchangeInfo {
	int32 ItemId = 1;
	int32 TodayTimes = 2;
	int32 TotalTimes = 3;
	int32 DailyLimit = 4;
	int32 TotalLimit = 5;
}

message ItemExchangeInfoRequest {
}

message ItemExchangeInfoResponse {
	repeated ItemExchangeInfo ItemExchangeInfos = 65;
}

message ItemExchangeRequest {
	int32 ItemId = 148;
	int32 ExchangeTimes = 138;
}

message ItemExchangeResponse {
	int32 ErrorCode = 171;
	int32 ItemId = 74;
	int32 ItemCount = 86;
}

message EnterLevelPlayNotify {
	int32 Id = 165;
	bool CanGetReward = 186;
	int32 State = 194;
}

message LeaveLevelPlayNotify {
	int32 Id = 31;
}

message LevelPlayInfo {
	int32 Id = 1;
	bool IsFirst = 2;
	int32 State = 3;
	int64 UpdateTime = 4;
	int32 GetRewardCount = 5;
}

message LevelPlayInfoNotify {
	repeated LevelPlayInfo LevelPlayInfo = 161;
}

message LevelPlayFirstNotify {
	int32 Id = 48;
}

message LevelPlayStateNotify {
	int32 Id = 213;
	int32 State = 161;
}

message LevelPlayOpenTimeNotify {
	int32 Id = 216;
	int64 OpenTime = 151;
}

message LevelPlayRewardRequest {
	int64 EntityId = 198;
}

message LevelPlayRewardResponse {
	int32 ErrorCode = 229;
}

message LevelPlayRewardInfo {
	int32 Id = 1;
	bool GetReward = 2;
}

message LevelPlayRewardNotify {
	repeated LevelPlayRewardInfo LevelPlayRewards = 219;
}

message LevelPlayRewardCountResetNotify {
	repeated int32 LevelPlayIds = 252;
}

message LivenessInfo {
	int32 LivenessCount = 1;
	repeated int32 RewardedLiveness = 2;
	repeated LivenessTask Tasks = 3;
	int64 DayEnd = 4;
}

message LivenessTask {
	int32 Id = 1;
	int32 Current = 2;
	int32 Target = 3;
	bool IsFinished = 4;
	bool IsTaken = 5;
	bool IsConditionUnlock = 6;
}

message LivenessRequest {
}

message LivenessResponse {
	LivenessInfo LivenessInfo = 5;
}

message LivenessCountUpdateNotify {
	int32 LivenessCount = 95;
}

message LivenessUpdateNotify {
	LivenessInfo LivenessInfo = 91;
}

message LivenessRefreshNotify {
	LivenessInfo LivenessInfo = 249;
}

message LivenessTaskTakeRequest {
	repeated int32 TaskIds = 210;
}

message LivenessTaskTakeResponse {
	repeated int32 TaskIds = 236;
	int32 ErrorCode = 178;
}

message LivenessTakeRequest {
	repeated int32 Ids = 50;
}

message LivenessTakeResponse {
	repeated int32 Ids = 89;
	int32 ErrorCode = 192;
}

message LoadEquipData {
	int32 Pos = 1;
	int32 EquipIncID = 2;
}

message RoleLoadEquipData {
	int32 RoleID = 1;
	int32 Pos = 2;
	int32 EquipIncID = 3;
}

message LoadEquipInfoRequest {
	int32 RoleID = 146;
}

message LoadEquipInfoResponse {
	int32 ErrorCode = 161;
	int32 RoleID = 155;
	repeated LoadEquipData EquipList = 30;
}

message EquipTakeOnRequest {
	RoleLoadEquipData Data = 165;
}

message EquipTakeOnResponse {
	int32 ErrorCode = 205;
	repeated RoleLoadEquipData DataList = 153;
}

message EquipTakeOnNotify {
	repeated RoleLoadEquipData DataList = 93;
}

message AceBlackProductAccountInfo {
	string TdmDeviceId = 1;
	bool IsRoot = 2;
	bool IsSimulator = 3;
}

message CreateCharacterRequest {
	int32 Sex = 1;
	string Name = 2;
}

message CreateCharacterResponse {
	int32 Code = 1;
	string Name = 2;
	int32 PlayerId = 3;
	int32 CreateTime = 4;
}

message DevLoginCheckData {
	int32 ProtoVersion = 1;
	string ProtoMd5 = 2;
	int32 ConfigVersion = 3;
	string ConfigMd5 = 4;
	string BranchName = 5;
}

message LoginRequest {
	oneof DevLoginCheckData_ {
		DevLoginCheckData DevLoginCheckData = 9;
	}

	int32 Id = 1;
	string Account = 2;
	string LoginTraceId = 3;
	string Token = 4;
	string AppVersion = 5;
	string LauncherVersion = 6;
	string ResourceVersion = 7;
	ClientBasicInfo ClientBasicInfo = 8;
	PublicResourceVersionInfo PublicResourceVersionInfo = 10;
	AceBlackProductAccountInfo AceBlackProductAccountInfo = 11;
}

message LoginResponse {
	int32 Code = 1;
	string ReconnectToken = 3;
	int64 Timestamp = 8;
	string Platform = 9;
	int32 ClientWaitingMode = 10;
	int32 ClientWaitingTime = 11;
	int32 ClientAutoInInterval = 12;
	int32 ClientDisplayTime = 13;
}

message EnterGameRequest {
	int32 SingleInstanceId = 1;
	int32 MultiInstanceId = 2;
	int32 Mode = 3;
	Vector Pos = 4;
}

message EnterGameResponse {
	int32 Code = 1;
	int32 ClientWaitingMode = 2;
	int32 ClientWaitingTime = 3;
	int32 ClientAutoInInterval = 4;
}

message ReconnectRequest {
	int32 PlayerId = 1;
	int32 LastSvrSeqNo = 2;
	string ReconnectToken = 3;
	string ReconnectTraceId = 4;
}

message ReconnectResponse {
	int32 ErrorCode = 1;
	int32 LastRecvSeqNo = 3;
	int64 Timestamp = 4;
	bool IsPermittedSilentLogin = 5;
}

message LoginNotify {
	int32 Id = 1;
}

message LogoutNotify {
	oneof banInfo_ {
		BanLogoutInfo banInfo = 3;
	}

	int32 Code = 1;
	int32 logoutReason = 2;
}

message ProtoKeyRequest {
	bool IsLogin = 1;
	string TraceId = 2;
}

message ProtoKeyResponse {
	int32 Code = 1;
	int32 Type = 2;
	bytes Key = 3;
}

message PushDataCompleteNotify {
}

message ExitGamePush {
}

message PublicResourceVersionInfo {
	int32 PublicJsonVersion = 1;
	int32 PublicMiscVersion = 2;
	int32 PublicUniverseEditorVersion = 3;
}

message CheckPublicResourceVersionRequest {
	PublicResourceVersionInfo PublicResourceVersionInfo = 48;
}

message CheckPublicResourceVersionResponse {
	int32 ErrorId = 125;
	int32 TipLevel = 247;
}

message LordGymInfoRequest {
}

message LordGymInfoResponse {
	repeated int32 UnlockLoadGymIds = 19;
	repeated int32 ReadLoadGymIds = 14;
	repeated LordGymPassRecord LordGymPassRecords = 62;
}

message RoleBrief {
	int32 RoleId = 1;
	int32 Level = 2;
}

message LordGymPassRecord {
	int32 LoadGymId = 1;
	int32 PassTime = 2;
	repeated RoleBrief RoleIds = 3;
}

message LordGymUnlockNotify {
	repeated int32 UnlockLoadGymIds = 78;
}

message LordGymBeginRequest {
	int32 LoadGymId = 146;
}

message LordGymBeginResponse {
	int32 ErrorCode = 254;
}

message LordGymReadRequest {
	int32 LoadGymId = 211;
}

message LordGymReadResponse {
	int32 ErrorCode = 33;
}

message ItemData {
	int32 ItemId = 1;
	int32 ItemIncId = 2;
	int32 count = 3;
}

message LordGymLevelPlayResultNotify {
	bool IsSuccess = 31;
	bool IsNewRecord = 17;
	LordGymPassRecord LordGymPassRecord = 105;
	repeated ItemData ItemDatas = 47;
}

enum MailLevel {
	MailLevel_None = 0;
	MailLevel_General = 1;
	MailLevel_Important = 2;
}

enum MailDeleteReason {
	MailDeleteReason_OverTime = 0;
	MailDeleteReason_OverSize = 1;
	MailDeleteReason_OfflineEvent = 2;
	MailDeleteReason_PublicCancelled = 3;
	MailDeleteReason_PlayerDelete = 4;
}

message PbMailAttachment {
	int32 Id = 1;
	int32 Count = 2;
}

message PbMailInfo {
	string Id = 1;
	int64 ReceivedTime = 2;
	int64 ReadTime = 3;
	int32 State = 4;
	int32 Level = 5;
	string Title = 6;
	string Content = 7;
	string Sender = 8;
	int32 ValidTime = 9;
	int32 ReadValidTime = 10;
	repeated PbMailAttachment Attachments = 11;
	int32 ConfigId = 12;
}

message MailInfosNotify {
	repeated PbMailInfo MailInfos = 95;
}

message MailDeleteNotify {
	string Id = 179;
	int32 Reason = 119;
}

enum MailAddReason {
	MailAddReason_Gm = 0;
	MailAddReason_BagFull = 1;
	MailAddReason_Public = 2;
	MailAddReason_OfflineEventAdd = 3;
	MailAddReason_QuestNpcAction = 4;
	MailAddReason_DailyQuestReward = 5;
	MailAddReason_ReportPlayer = 6;
	MailAddReason_MonthCardRemind = 7;
	MailAddReason_BattlePassSettle = 8;
	MailAddReason_PayRebate = 9;
	MailAddReason_RemoveTemporaryTeleportBySceneDataLayerChange = 10;
	MailAddReason_CdKey = 11;
	MailAddReason_PayRefund = 12;
	MailAddReason_Replenishment = 13;
	MailAddReason_GatherActivitySettle = 14;
	MailAddReason_HarvestActivitySettle = 15;
	MailAddReason_RoleTrialActivitySettle = 16;
	MailAddReason_KuroBbsFirstBind = 17;
	MailAddReason_ParkourActivitySettle = 18;
	MailAddReason_DailyAdventureActivitySettle = 19;
	MailAddReason_PromotionActivity = 23;
}

message MailAddNotify {
	PbMailInfo NewMail = 60;
	int32 Reason = 217;
}

message MailReadRequest {
	string Id = 96;
}

message MailReadResponse {
	string Id = 240;
	int32 State = 230;
	int32 ErrorCode = 122;
}

message MailGetAttachmentRequest {
	repeated string MailIds = 236;
}

message MailGetAttachmentResponse {
	map<string, int32> SuccessIdMap = 222;
	int32 ErrorCode = 173;
}

message MailDeleteRequest {
	repeated string MailIds = 246;
}

message MailDeleteResponse {
	repeated string SuccessIds = 68;
	int32 ErrorCode = 102;
}

message MarkPointInfo {
	float PosX = 1;
	float PosY = 2;
	float PosZ = 3;
	int32 ConfigId = 4;
	int32 MarkId = 5;
	string MarkInfo = 6;
	int32 MapId = 7;
	int32 MarkType = 8;
}

message MarkPointRequestInfo {
	float PosX = 1;
	float PosY = 2;
	float PosZ = 3;
	int32 ConfigId = 4;
	int32 MarkType = 5;
	string MarkInfo = 6;
	bool IsTrace = 7;
	int32 MapId = 8;
	int32 EntityConfigId = 9;
}

message TreasureBoxParam {
	repeated MarkPointRequestInfo TreasureBox = 1;
	int64 DetectionSlotId = 2;
}

message MarkTreasureBoxInfo {
	repeated MarkPointInfo MarkPointInfo = 1;
}

message MapMarkInfoRequest {
}

message MapMarkInfoResponse {
	int32 ErrorCode = 4;
	repeated MarkPointInfo InfoList = 20;
	repeated MapMarkShowInfo ShowMarkIds = 159;
}

message MapUnlockFieldInfoRequest {
}

message MapUnlockFieldInfoResponse {
	int32 ErrorCode = 218;
	repeated int32 FieldId = 97;
}

enum MapMarkShowFlag {
	MapMarkShowFlag_Hide = 0;
	MapMarkShowFlag_ShowNormal = 1;
	MapMarkShowFlag_ShowDisable = 2;
}

message MapMarkShowInfo {
	int32 MarkId = 1;
	bool IsShow = 2;
	uint32 ShowFlag = 3;
}

message MapMarkShowIdInfoUpdateNotify {
	int32 MarkId = 144;
	bool IsShow = 161;
	bool NeedFocus = 139;
	uint32 ShowFlag = 129;
}

message TemporaryTeleportParam {
	int64 TemporaryTeleportId = 1;
}

message PbMapMarkType {
	enum ENUMS {
		ENUMS_None = 0;
		ENUMS_Custom = 1;
		ENUMS_Quest = 2;
		ENUMS_Building = 3;
		ENUMS_TemporaryTeleport = 4;
		ENUMS_SoundBox = 5;
		ENUMS_TreasureBox = 6;
		ENUMS_TreasureBoxPoint = 7;
	}


}

message MapMarkRequest {
	oneof Params {
		TemporaryTeleportParam TemporaryTeleportParam = 191;
	}

	MarkPointRequestInfo MarkPointRequestInfo = 13;
	TreasureBoxParam TreasureBoxParam = 126;
}

message MapMarkResponse {
	int32 ErrorCode = 137;
	MarkPointInfo Info = 92;
}

message MapRemoveMarkRequest {
	int32 MarkId = 254;
}

message MapRemoveMarkResponse {
	int32 ErrorCode = 71;
	int32 MarkId = 96;
}

message MapUnlockFieldNotify {
	int32 FieldId = 155;
}

message MapTraceInfoRequest {
}

message MapTraceInfoResponse {
	int32 ErrorCode = 210;
	repeated int32 MarkIdList = 249;
}

message MapTraceRequest {
	int32 MarkId = 76;
}

message MapTraceResponse {
	int32 ErrorCode = 90;
	int32 MarkId = 24;
}

message MapCancelTraceRequest {
	int32 MarkId = 189;
}

message MapCancelTraceResponse {
	int32 ErrorCode = 116;
	int32 MarkId = 129;
}

message MapReplaceMarkRequest {
	int32 MarkId = 47;
	int32 ConfigId = 131;
}

message MapReplaceMarkResponse {
	int32 ErrorCode = 3;
	int32 MarkId = 83;
	int32 ConfigId = 48;
}

message MapCancelTraceNotify {
	int32 MarkId = 161;
}

message MapTraceNotify {
	int32 MarkId = 154;
}

message MapRemoveAllMarkRequest {
	int32 MarkType = 22;
}

message MapRemoveAllMarkResponse {
	int32 ErrorCode = 52;
	repeated int32 MarkIdList = 6;
}

message MapMarkInfoNotify {
	repeated MarkPointInfo InfoList = 188;
	repeated MapMarkShowInfo ShowMarkIds = 228;
	repeated int32 UnlockMarkIds = 10;
}

message UnlockMarkNotify {
	int32 MarkId = 18;
}

enum MapOpenType {
	MapOpenType_HotKey = 0;
	MapOpenType_Mouse = 1;
	MapOpenType_Other = 2;
}

message MapOpenPush {
	int32 OpenType = 242;
}

message MapMarkInfoUpdateRequest {
	int32 MarkId = 8;
	float PosZ = 236;
}

message MapMarkInfoUpdateResponse {
	int32 ErrorCode = 154;
}

message RemoveMarkInfoNotify {
	int32 MarkId = 161;
}

message AddMarkInfoNotify {
	MarkPointInfo Info = 232;
	MarkTreasureBoxInfo TreasureBoxMarkInfo = 164;
}

enum MatchFailReason {
	MatchFailReason_TimeOut = 0;
	MatchFailReason_NotAccept = 1;
	MatchFailReason_ServerError = 2;
}

enum MatchTeamState {
	MatchTeamState_WaiteConfirm = 0;
	MatchTeamState_ReadyConfirm = 1;
	MatchTeamState_EnterInst = 2;
}

enum MatchPlayerLeaveReason {
	MatchPlayerLeaveReason_NotConfirm = 0;
	MatchPlayerLeaveReason_Refuse = 1;
	MatchPlayerLeaveReason_Initiative = 2;
	MatchPlayerLeaveReason_BeKick = 3;
	MatchPlayerLeaveReason_HostLeave = 4;
	MatchPlayerLeaveReason_EnterInstance = 5;
	MatchPlayerLeaveReason_MatchServerDisable = 6;
	MatchPlayerLeaveReason_MatchGM = 7;
}

enum EMatchPlayerUiState {
	EMatchPlayerUiState_Wait = 0;
	EMatchPlayerUiState_Confirm = 2;
	EMatchPlayerUiState_Matching = 3;
	EMatchPlayerUiState_Ready = 4;
	EMatchPlayerUiState_Selecting = 5;
	EMatchPlayerUiState_Teleporting = 6;
	EMatchPlayerUiState_Max = 7;
}

message StartMatchRequest {
	int32 InstId = 126;
	bool IsInviteTeammate = 212;
	int32 InstEnterId = 177;
}

message StartMatchResponse {
	int32 ErrorCode = 237;
}

message StartMatchNotify {
	int32 InstId = 186;
}

message CancelMatchRequest {
}

message CancelMatchResponse {
	int32 ErrorCode = 168;
}

message CancelMatchNotify {
	int32 PlayerId = 96;
}

message MatchFailNotify {
	int32 Reason = 251;
}

message MatchRoleInfo {
	int32 RoleId = 1;
	int32 RoleLevel = 2;
}

message MatchPlayerInfo {
	int32 PlayerId = 1;
	repeated MatchRoleInfo RoleInfo = 2;
	string PlayerName = 3;
	bool IsConfirm = 4;
	bool IsReady = 5;
	int32 MatchUiState = 6;
}

message MatchTeamInfo {
	int32 HostId = 1;
	repeated MatchPlayerInfo PlayerInfos = 2;
	int32 TeamState = 3;
	Vector Location = 4;
	Rotator Rotation = 5;
}

message MatchTeamNotify {
	MatchTeamInfo TeamInfo = 153;
}

message MatchConfirmRequest {
	bool IsAccept = 66;
}

message MatchConfirmResponse {
	int32 ErrorCode = 163;
}

message MatchConfirmNotify {
	int32 ConfirmId = 241;
}

message MatchingNotify {
}

message MatchTeamStateNotify {
	int32 TeamState = 5;
}

message MatchChangeRoleRequest {
	repeated int32 RoleId = 64;
}

message MatchChangeRoleResponse {
	int32 ErrorCode = 121;
}

message MatchChangeRoleNotify {
	int32 PlayerId = 126;
	repeated MatchRoleInfo RoleInfo = 171;
}

message MatchChangeReadyRequest {
	bool IsReady = 81;
}

message MatchChangeReadyResponse {
	int32 ErrorCode = 109;
}

message MatchChangeReadyNotify {
	int32 PlayerId = 251;
	bool IsReady = 63;
}

message LeaveMatchTeamRequest {
}

message LeaveMatchTeamResponse {
	int32 ErrorCode = 200;
}

message LeaveMatchTeamNotify {
	int32 PlayerId = 129;
	int32 LeaveReason = 182;
}

message EnterMatchTeamNotify {
	MatchPlayerInfo PlayerInfo = 1;
}

message KickMatchTeamPlayerRequest {
	int32 PlayerId = 75;
}

message KickMatchTeamPlayerResponse {
	int32 ErrorCode = 136;
}

message SetMatchTeamMatchFlagRequest {
	bool IsMatch = 66;
}

message SetMatchTeamMatchFlagResponse {
	int32 ErrorCode = 134;
}

message TeamMatchFlagNotify {
	bool MatchFlag = 85;
	int32 InstId = 192;
}

message EnterMatchInstRequest {
}

message EnterMatchInstResponse {
	int32 ErrorCode = 71;
}

message TeamChallengeRequest {
	int32 InstId = 9;
	bool IsInviteTeammate = 14;
	int32 InstEnterId = 133;
}

message TeamChallengeResponse {
	int32 ErrorCode = 241;
}

message TeamMatchInviteRequest {
	int32 InstId = 185;
}

message TeamMatchInviteResponse {
	int32 ErrorCode = 153;
}

message TeamMatchInviteNotify {
	int32 HostId = 206;
	int32 InstId = 162;
}

message TeamMatchAcceptInviteRequest {
	bool IsAccept = 96;
	int32 HostId = 181;
	int32 InstId = 240;
}

message TeamMatchAcceptInviteResponse {
	int32 ErrorCode = 20;
}

message TeamMatchAcceptInviteNotify {
	bool IsAccept = 117;
	int32 PlayerId = 198;
}

message MatchChangePlayerUiStateRequest {
	int32 MatchUiState = 163;
}

message MatchChangePlayerUiStateResponse {
	int32 ErrorCode = 115;
}

message MatchChangePlayerUiStateNotify {
	int32 PlayerId = 127;
	int32 MatchUiState = 106;
}

message MessageDecodeFailNotify {
	int32 Code = 87;
	uint32 Conv = 246;
	string ChannelId = 107;
	int32 SeqNo = 140;
}

message MonsterGachaDataChangeNotify {
	MonsterGachaDataPb MonsterGachaDataPb = 211;
}

message MonthCardRequest {
}

message MonthCardResponse {
	int32 Days = 26;
	bool IsDailyGot = 251;
	int32 ErrorCode = 61;
}

message MonthCardDailyRewardNotify {
	int32 ItemId = 213;
	int32 Count = 78;
	int32 Days = 4;
}

message MonthCardUseNotify {
	int32 ItemId = 135;
	int32 Count = 59;
	int32 Days = 95;
	int32 DailyRewardItemId = 249;
	int32 DailyRewardItemCount = 160;
	int32 ExtendedDays = 111;
}

message MutiplayerInfo {
	int32 PlayerId = 1;
	string Name = 2;
	int32 IconId = 3;
	int32 Level = 4;
	string GuildName = 5;
	string GuildIntro = 6;
}

message MutiplayerTeamRefreshNearListRequest {
}

message MutiplayerTeamRefreshNearListResponse {
	int32 ErrorCode = 151;
	int32 NextRefreshTime = 84;
	repeated MutiplayerInfo InfoList = 112;
	repeated string ErrorParams = 246;
}

message NetTestData {
	double DataDouble = 1;
	float DataFloat = 2;
	int32 DataInt32 = 3;
	sint32 DataSInt32 = 4;
	uint32 DataUInt32 = 5;
	int64 DataInt64 = 6;
	sint64 DataSInt64 = 7;
	uint64 DataUInt64 = 8;
	fixed32 DataFixed32 = 9;
	fixed64 DataFixed64 = 10;
	sfixed32 DataSFixed32 = 11;
	sfixed64 DataSFixed64 = 12;
	bool DataBool = 13;
	string DataString = 14;
	bytes DataBytes = 15;
}

message NetTestDataPush {
	NetTestData Data = 218;
}

message NetTestDataNotify {
	NetTestData Data = 171;
}

message NetTestDataRequest {
	NetTestData Data = 191;
}

message NetTestDataResponse {
	NetTestData Data = 229;
}

message NewBieCourseRewardNotify {
	repeated int32 HadTakeReward = 212;
}

message NewBieCourseRewardRequest {
	int32 Level = 129;
}

message NewBieCourseRewardResponse {
	int32 ErrorCode = 130;
}

message NewJourneyTask {
	int32 TaskIdx = 1;
	bool CanJump = 2;
	bool Complete = 3;
}

message NewJourneyRequest {
	repeated int32 TaskIds = 249;
}

message NewJourneyResponse {
	repeated NewJourneyTask NewJourneyTask = 192;
}

message ParkourChallenge {
	int32 ChallengeId = 1;
	int32 MaxScore = 3;
	int32 MinDuration = 4;
	repeated int32 TakenScoreIndex = 5;
}

message ParkourChallengeRequest {
}

message ParkourChallengeResponse {
	repeated ParkourChallenge Challenges = 123;
	repeated int32 OpenIds = 227;
}

message ParkourChallengeOpenNotify {
	int32 ChallengeId = 1;
	bool IsOpen = 26;
}

message ParkourChallengeTakeRequest {
	int32 ChallengeId = 179;
	int32 ScoreIndex = 117;
}

message ParkourChallengeTakeResponse {
	int32 ErrorCode = 151;
	map<int32, int32> Rewards = 77;
}

message ParkourChallengeEndNotify {
	int32 ChallengeId = 104;
	int32 Score = 131;
	int32 Duration = 175;
	bool IsComplete = 227;
}

message ParkourChallengeTransRequest {
	int32 ChallengeId = 205;
}

message ParkourChallengeTransResponse {
	int32 ErrorCode = 249;
}

message PayItemInfo {
	int32 Id = 1;
	int32 PayId = 2;
	int32 ItemId = 3;
	int32 ItemCount = 4;
	int32 BonusItemCount = 5;
	int32 SpecialBonusItemCount = 6;
	bool CanSpecialBonus = 7;
	string StageImage = 8;
	string ProductId = 9;
	string Amount = 10;
}

message PayGiftInfo {
	int32 Id = 1;
	int32 PayId = 2;
	int32 ItemId = 3;
	int32 ItemCount = 4;
	int32 Sort = 5;
	int32 BuyLimit = 6;
	int32 BoughtCount = 7;
	string StageImage = 8;
	int64 BeginTime = 9;
	int64 EndTime = 10;
	string ProductId = 11;
	string Amount = 12;
	int32 TabId = 13;
	int32 Type = 14;
}

message PayInfoRequest {
	string Version = 22;
}

message PayInfoResponse {
	repeated PayItemInfo Infos = 153;
	string Version = 112;
	int32 ErrorCode = 82;
}

message PayItemRequest {
	int32 Id = 4;
	string Version = 109;
}

message PayItemResponse {
	string ReceiptId = 22;
	int32 ErrorCode = 58;
	string CallbackUrl = 234;
}

message PayItemSuccessNotify {
	int32 Id = 254;
	string ReceiptId = 170;
	int32 ItemId = 242;
	int32 ItemCount = 148;
}

message ResetSpecialBonusNotify {
	repeated int32 Ids = 99;
}

message PayGiftInfoRequest {
	string Version = 204;
}

message PayGiftInfoResponse {
	repeated PayGiftInfo Infos = 135;
	string Version = 241;
	int32 ErrorCode = 14;
}

message PayGiftRequest {
	int32 Id = 64;
	string Version = 49;
}

message PayGiftResponse {
	string ReceiptId = 255;
	int32 ErrorCode = 120;
	string CallbackUrl = 126;
}

message PayGiftSuccessNotify {
	int32 Id = 159;
	string ReceiptId = 104;
	int32 ItemId = 12;
	int32 ItemCount = 116;
	PayGiftInfo PayGiftInfo = 165;
}

enum PayShopUpdateType {
	PayShopUpdateType_None = 0;
	PayShopUpdateType_Daily = 1;
	PayShopUpdateType_Weekly = 2;
	PayShopUpdateType_Monthly = 3;
	PayShopUpdateType_Forever = 4;
}

message PayShopPrice {
	int32 Id = 1;
	int32 Count = 2;
	int32 PromotionCount = 3;
}

enum PayShopItemType {
	PayShopItemType_Normal = 0;
	PayShopItemType_Direct = 1;
}

message PayShopItem {
	int32 Id = 1;
	int32 ItemId = 3;
	int32 ItemCount = 4;
	bool Locked = 5;
	int32 BuyLimit = 6;
	int32 BoughtCount = 7;
	PayShopPrice Price = 8;
	int64 BeginTime = 9;
	int64 EndTime = 10;
	int64 BeginPromotionTime = 11;
	int64 EndPromotionTime = 12;
	int32 UpdateType = 13;
	int64 UpdateTime = 14;
	int32 ShopItemType = 15;
	int64 TagBeginTime = 17;
	int64 TagEndTime = 18;
	bool CanBuyGoods = 22;
}

message PayShopInfo {
	int32 Id = 1;
	repeated PayShopItem Items = 2;
	int64 UpdateTime = 3;
}

message PayGiftShopInfo {
	repeated PayGiftInfo Gifts = 1;
	string Version = 2;
}

message PayShopInfoNotify {
	repeated PayShopInfo Infos = 248;
	string Version = 204;
	PayGiftShopInfo PayGiftShopInfo = 251;
}

message PayShopInfoRequest {
	string Version = 202;
}

message PayShopInfoResponse {
	repeated PayShopInfo Infos = 213;
	string Version = 207;
	int32 ErrorCode = 209;
	PayGiftShopInfo PayGiftShopInfo = 224;
}

message PayShopUpdateRequest {
	int32 Id = 60;
}

message PayShopUpdateResponse {
	PayShopInfo Info = 6;
	int32 ErrorCode = 15;
}

message PayShopItemUpdateRequest {
	repeated int32 ShopItemIds = 158;
}

message PayShopItemUpdateResponse {
	repeated PayShopItem Items = 179;
	int32 ErrorCode = 247;
}

message PayShopBuyRequest {
	int32 Id = 46;
	int32 Count = 134;
	string Version = 191;
}

message PayShopBuyResponse {
	int32 Id = 73;
	int32 Count = 59;
	int32 ErrorCode = 100;
}

message PayShopUnlockNotify {
	repeated int32 UnlockList = 200;
}

message PayShopDirectBuyRequest {
	int32 Id = 65;
	string Version = 241;
}

message PayShopDirectBuyResponse {
	string ReceiptId = 156;
	int32 ErrorCode = 162;
	string CallbackUrl = 143;
}

message PayShopDirectBuyNotify {
	string ReceiptId = 105;
	int32 ShopItemId = 241;
	int32 ItemId = 138;
	int32 ItemCount = 34;
}

message PayShopConditionFinishNotify {
	repeated PayShopItem Items = 138;
}

message PhantomConsumeItem {
	int32 IncId = 1;
	int32 Count = 2;
	int32 ItemId = 3;
}

message PhantomLevelUpRequest {
	int32 IncId = 94;
	repeated PhantomConsumeItem ConsumeList = 163;
}

message PhantomLevelUpResponse {
	int32 ErrorCode = 94;
	PhantomItem UpdateInfo = 99;
	map<int32, int32> ItemMap = 126;
}

message PhantomEquipInfoNotify {
	repeated RolePhantomEquipInfo EquipInfo = 29;
}

message PhantomPutOnRequest {
	int32 IncId = 211;
	int32 RoleId = 176;
	int32 Pos = 155;
}

message PhantomPutOnResponse {
	int32 ErrorCode = 130;
	repeated RolePhantomEquipInfo EquipInfoList = 233;
}

message PhantomReturnPreviewRequest {
	repeated int32 PhantomItemIncrId = 18;
}

message PhantomReturnPreviewResponse {
	int32 ErrorCode = 13;
	map<int32, int32> ItemMap = 215;
}

message PhantomReturnRequest {
	repeated int32 PhantomItemIncrId = 185;
}

message PhantomReturnResponse {
	int32 ErrorCode = 115;
	map<int32, int32> ItemMap = 13;
}

message PhantomRecommendRequest {
	int32 RoleId = 45;
}

message PhantomRecommendResponse {
	int32 ErrorCode = 144;
	int32 RoleId = 16;
	repeated int32 MonsterIdList = 127;
	int32 MainPropId = 232;
	int32 FetterGroupId = 24;
}

message PhantomAutoPutRequest {
	int32 RoleId = 250;
	repeated int32 PhantomItemIncrId = 140;
}

message PhantomAutoPutResponse {
	int32 ErrorCode = 189;
	repeated RolePhantomEquipInfo EquipInfoList = 47;
}

message PhantomItemUpdateNotify {
	repeated PhantomItem UpdateInfo = 8;
}

message RolePhantomPropUpdateNotify {
	repeated RolePhantomPropInfo PropInfo = 205;
}

message PhantomIdentifyRequest {
	int32 IncrId = 226;
	int32 Count = 161;
}

message PhantomIdentifyResponse {
	int32 ErrorCode = 218;
	PhantomItem UpdateInfo = 243;
}

message PhantomUpdateNotify {
	int32 TotalCost = 123;
}

message PhantomSkinAddNotify {
	repeated int32 SkinIds = 65;
}

message PhantomSkinChangeRequest {
	int32 IncrId = 183;
	int32 SkinId = 70;
	bool ChangeDefault = 188;
}

message PhantomSkinChangeResponse {
	int32 ErrorCode = 176;
}

message PhantomUnlockNotify {
	repeated int32 UnlockQualityItemList = 202;
	repeated int32 UnlockMonsterItemList = 185;
}

message PhantomRefiningRequest {
	repeated int32 IncrIdList = 91;
}

message PhantomRefiningResponse {
	int32 ErrorCode = 139;
	repeated AddCountItemInfo Items = 237;
	repeated AddCountItemInfo ExtraItems = 254;
	repeated PhantomItem CostPhantoms = 92;
}

message PassiveSkillInfo {
	int64 SkillId = 1;
	int64 SkillCdEndTime = 2;
}

message RolePassiveSkillInfo {
	int32 RoleId = 1;
	repeated PassiveSkillInfo PassiveSkillInfoList = 2;
}

message PassiveSkillNotify {
	repeated RolePassiveSkillInfo RolePassiveSkillInfoList = 96;
}

message UpdatePlayerPassiveSkillRequest {
	int32 RoleId = 95;
	int64 PassiveSkillId = 173;
	int64 CdEndTime = 110;
}

message UpdatePlayerPassiveSkillResponse {
	int32 ErrCode = 96;
}

message PlayerVarNotify {
	map<string, VarDefinePb> VarInfos = 68;
}

enum MotionType {
	MotionType_Spurt = 0;
	MotionType_Pullback = 1;
	MotionType_BeLand = 2;
	MotionType_MotionJump = 3;
	MotionType_AirSprint = 4;
	MotionType_BackFlip = 5;
	MotionType_StepAcross = 6;
	MotionType_ClimbTop = 7;
}

message PlayerMotionRequest {
	int32 Motion = 194;
}

message PlayerMotionResponse {
	int32 ErrorId = 241;
}

message PressRequest {
	int32 PayloadSize = 8;
	int32 NotifyCount = 180;
	bytes Payload = 39;
}

message PressResponse {
	bytes Payload = 164;
}

message PressNotify {
	bytes Payload = 111;
}

message PressGameRequest {
	int32 PayloadSize = 131;
	int32 NotifyCount = 207;
	bytes Payload = 150;
}

message PressGameResponse {
	bytes Payload = 134;
}

message PressGameNotify {
	bytes Payload = 140;
}

message ProgressBarFinishRequest {
	int64 EntityId = 78;
}

message ProgressBarFinishResponse {
	int32 ErrorCode = 54;
}

message JSPatchNotify {
	string Content = 193;
}

enum QuestState {
	QuestState_InActive = 0;
	QuestState_Ready = 1;
	QuestState_Progress = 2;
	QuestState_Finish = 3;
	QuestState_Delete = 4;
}

message QuestInfo {
	int32 QuestId = 1;
	int32 Status = 2;
}

message QuestListNotify {
	repeated QuestInfo Quests = 242;
}

message TraceQuestNotify {
	int32 QuestId = 159;
}

message TraceQuestRequest {
	int32 TraceType = 144;
	int32 QuestId = 182;
	int32 Operate = 187;
}

message TraceQuestResponse {
	int32 ErrorId = 217;
}

enum ActionTime {
	ActionTime_Enter = 0;
	ActionTime_Complete = 1;
}

message QuestFinishActionRequest {
	int32 QuestId = 100;
	int32 NodeId = 102;
	int32 ActionId = 225;
	int32 ActTime = 185;
}

message QuestFinishActionResponse {
	int32 ErrorId = 179;
}

message QuestActionRequest {
	int32 QuestId = 9;
	int32 NodeId = 148;
	int32 ActionId = 27;
	int32 ActTime = 164;
}

message QuestActionResponse {
	int32 ErrorId = 194;
}

message QuestReadyListNotify {
	repeated int32 QuestId = 239;
}

message QuestShowListNotify {
	repeated int32 QuestId = 35;
}

message QuestNpcMoveOverRequest {
	int64 EntityId = 208;
}

message QuestNpcMoveOverResponse {
	int32 ErrorId = 112;
}

message QuestStateUpdateNotify {
	int32 QuestId = 96;
	int32 State = 244;
}

message QuestFinishActionEndRequest {
	repeated int32 QuestId = 169;
}

message QuestFinishActionEndResponse {
	int32 ErrorId = 160;
}

message QuestFinishListNotify {
	repeated int32 QuestId = 80;
}

message DailyQuestUnlockAreaNotify {
	repeated int32 UnlockAreaIds = 233;
	repeated int32 UnlockInfluenceIds = 222;
	int32 CurrChoosedArea = 132;
	int32 CurrChoosedInfluence = 9;
	bool IsInit = 184;
}

message DailyQuestStateNotify {
	repeated int32 GetReward = 23;
	map<int32, int32> AllQuest = 124;
}

message DailyQuestChangePreferRequest {
	int32 TargetArea = 179;
	int32 TargetInfluence = 224;
}

message DailyQuestChangePreferResponse {
	int32 ErrorId = 132;
}

message DailyQuestGetRewardRequest {
	repeated int32 QuestId = 99;
}

message DailyQuestGetRewardResponse {
	int32 ErrorId = 114;
	repeated DailyQuestReward Rewards = 228;
}

message DailyQuestReward {
	int32 ItemId = 1;
	int32 ItemCount = 2;
}

message DailyQuestCancelNotify {
	repeated int32 QuestIds = 223;
}

message RoleQuestAcceptRequest {
	int32 QuestId = 48;
}

message RoleQuestAcceptResponse {
	int32 ErrorId = 22;
}

message RoleQuestStateNotify {
	int32 UnlockPoint = 126;
	int32 MaxUnlockPoint = 98;
	repeated int32 InProgress = 21;
	repeated int32 Unlock = 1;
	repeated int32 Over = 188;
	int64 LastAddPointTime = 235;
}

message RoleQuestNewUnlockNotify {
	repeated int32 QuestIds = 88;
}

message RoleQuestPointStateRequest {
}

message RoleQuestPointStateResponse {
	int32 CurrPoint = 241;
	int32 MaxPoint = 82;
	int64 LastAddPointTime = 254;
}

message DestroyQuestsNotify {
	repeated int32 QuestIds = 227;
}

message AutoQuestNotify {
	bool IsAuto = 72;
}

message QuestRedDotRequest {
	int32 QuestId = 115;
	int32 Operate = 226;
}

message QuestRedDotResponse {
	int32 ErrorId = 243;
}

message QuestRedDotNotify {
	repeated int32 QuestId = 188;
}

enum ApplyRechallengeReason {
	ApplyRechallengeReason_Settle = 0;
	ApplyRechallengeReason_Dead = 1;
}

message ApplyRechallengeRequest {
	int32 Reason = 212;
}

message ApplyRechallengeResponse {
	int32 ErrorCode = 170;
}

message ReceiveRechallengeNotify {
	int32 PlayerId = 23;
}

message ReceiveRechallengeRequest {
}

message ReceiveRechallengeResponse {
	int32 ErrorCode = 72;
}

message InviteRechallengeRequest {
}

message InviteRechallengeResponse {
	int32 ErrorCode = 96;
}

message InviteRechallengeNotify {
	int32 InviterPlayerId = 219;
}

message ReceiveRechallengePlayerIdsNotify {
	repeated int32 PlayerIds = 45;
}

message PlayerDeadNotify {
	int32 PlayerId = 94;
	int32 DelaySeconds = 125;
	bool IsAutoRevive = 72;
	int32 ReviveId = 113;
	bool IsLogin = 2;
	bool IsShowRevive = 212;
}

message ReviveRoleInformation {
	int64 EntityId = 1;
	GameplayAttributeData CurHpAttribute = 2;
}

message PlayerReviveNotify {
	int32 PlayerId = 49;
	int32 ReviveType = 93;
	Vector Location = 2;
	Rotator Rotator = 254;
	repeated ReviveRoleInformation ReviveRoleInfos = 14;
	bool NeedRollbackSubLevel = 34;
	repeated string RollbackSubLevel = 154;
	int32 TeleportId = 145;
}

message ReviveRequest {
	bool UseItem = 145;
}

message ReviveResponse {
	int32 ErrorCode = 73;
}

message AddReviveRegionRequest {
	int32 ReviveId = 117;
}

message AddReviveRegionResponse {
	int32 ErrorCode = 223;
}

message RemoveReviveRegionRequest {
	int32 ReviveId = 224;
}

message RemoveReviveRegionResponse {
	int32 ErrorCode = 195;
}

enum RogueConstVar {
	RogueConstVar_Zero = 0;
}

enum RoguelikeGainDataType {
	RoguelikeGainDataType_Unkonw = 0;
	RoguelikeGainDataType_Phantom = 1;
	RoguelikeGainDataType_Shop = 2;
	RoguelikeGainDataType_Role = 3;
	RoguelikeGainDataType_CommonBuff = 4;
	RoguelikeGainDataType_RoleBuff = 5;
	RoguelikeGainDataType_Event = 6;
}

message AffixEntry {
	int32 Id = 1;
	bool IsUnlock = 2;
	map<int32, int32> ElementDict = 3;
}

message DiscountInfo {
	map<int32, int32> BuffPrice = 1;
	int32 Discounted = 2;
}

message RogueGainEntry {
	oneof IsSell_ {
		bool IsSell = 7;
	}

	int32 Type = 1;
	int32 Index = 2;
	int32 ConfigId = 3;
	map<int32, int32> ElementDict = 4;
	repeated AffixEntry AffixEntryList = 5;
	DiscountInfo DiscountInfo = 6;
	bool IsSelect = 8;
	bool IsNew = 9;
	int32 Cost = 10;
}

message RoguelikeCurrencyNotify {
}

message RoguelikeCurrencyUpdateNotify {
}

message RoguelikeInfoNotify {
	oneof PhantomEntry_ {
		RogueGainEntry PhantomEntry = 89;
	}

	RogueGainEntry RoleEntry = 191;
	repeated RogueGainEntry BuffEntryList = 217;
	map<int32, int32> ElementDict = 167;
}

message RoguelikeRefreshGainRequest {
	int32 BindId = 224;
}

message RoguelikeRefreshGainResponse {
	int32 ErrorCode = 105;
	repeated string ErrorParams = 167;
	RoguelikeChooseData RoguelikeChooseData = 162;
}

message RoguelikeChooseDataRequest {
	int32 Index = 53;
}

message RoguelikeChooseData {
	int32 Index = 1;
	int32 Type = 2;
	int32 MaxTime = 3;
	int32 UseTime = 4;
	int32 EventId = 5;
	repeated RogueGainEntry RogueGainEntryList = 6;
	int32 Layer = 7;
	bool IsSelect = 8;
}

message RoguelikeChooseDataResponse {
	int32 ErrorCode = 253;
	repeated string ErrorParams = 2;
	RoguelikeChooseData RoguelikeChooseData = 173;
}

message RoguelikeChooseDataNotify {
	repeated RoguelikeChooseData RoguelikeChooseDataList = 69;
}

message RoguelikeChooseDataResultRequest {
	int32 BindId = 108;
	int32 Index = 24;
}

message RoguelikeChooseDataResultResponse {
	int32 ErrorCode = 39;
	repeated string ErrorParams = 201;
	RoguelikeChooseDataNotify RoguelikeChooseDataNotify = 152;
	repeated RogueGainEntry RogueGainEntryList = 240;
	bool IsSelect = 144;
}

message RoguelikeEventGainNotify {
	repeated RogueGainEntry RogueGainEntryList = 76;
}

message RoguelikeLastInfoRequest {
}

message RoguelikeLastInfo {
	int32 InstId = 2;
	int32 CurLayer = 3;
	int32 MaxLayer = 4;
}

message RoguelikeLastInfoResponse {
	int32 ErrorCode = 8;
	bool HasData = 227;
	repeated RoguelikeLastInfo RoguelikeLastInfos = 122;
}

message RoguelikeStartRequest {
	bool ContinueLastProgress = 121;
	int32 InstId = 59;
	repeated int32 RoleIds = 30;
}

message RoguelikeStartResponse {
	int32 ErrorCode = 197;
}

message RoguelikeQuitRequest {
}

message RoguelikeQuitResponse {
	int32 ErrorCode = 32;
}

message RoguelikeResultInfo {
	oneof PhantomEntry_ {
		RogueGainEntry PhantomEntry = 10;
	}

	bool IsNewRecord = 1;
	uint32 Time = 2;
	int32 CurLayer = 3;
	int32 MaxLayer = 4;
	int32 KillEnemyCount = 5;
	int32 GetGainCount = 6;
	map<int32, int32> Rewards = 8;
	RogueGainEntry RoleEntry = 9;
	bool IsDeadTrigger = 11;
	int32 InstId = 12;
	int32 TotalCostTime = 13;
}

message RoguelikeResultNotify {
	RoguelikeResultInfo RoguelikeResultInfo = 88;
}

message RoguelikeResultRequest {
	int32 InstId = 176;
}

message RoguelikeResultResponse {
	int32 ErrorCode = 242;
	RoguelikeResultInfo RoguelikeResultInfo = 171;
}

message RoguelikeSubLevelNotify {
	string LoadSubLevel = 196;
	string UnLoadSubLevel = 58;
	float X = 166;
	float Y = 86;
	float Z = 193;
	float A = 1;
}

message RoguelikeGotoNextRoomRequest {
}

message RoguelikeGotoNextRoomResponse {
	int32 ErrorCode = 32;
}

enum RoguelikeRoomType {
	RoguelikeRoomType_Normal = 0;
	RoguelikeRoomType_Special = 1;
	RoguelikeRoomType_Boss = 2;
}

message RoguelikeRoomInfoNotify {
	int32 CurLayer = 38;
	int32 MaxLayer = 243;
	int32 RoguelikeRoomTypeId = 151;
	int32 SkyBoxId = 179;
}

message RoguelikeTalentInfoRequest {
}

enum RogueTalentState {
	RogueTalentState_Unlock = 0;
	RogueTalentState_Active = 1;
}

message RoguelikeTalentInfoResponse {
	int32 ErrorCode = 175;
	map<int32, int32> TalentSkillDict = 236;
}

message RoguelikeTalentLevelUpRequest {
	int32 SkillId = 81;
}

message RoguelikeTalentLevelUpResponse {
	int32 ErrorCode = 203;
	int32 Level = 224;
}

message RoguelikeTalentUnlockNotify {
	int32 SkillId = 96;
}

message RoguelikeToken {
	int32 Id = 1;
	bool IsReceive = 2;
}

message SeasonReward {
	int32 Id = 1;
	bool IsReceive = 2;
}

message SeasonData {
	int32 SeasonId = 1;
	int64 StartTime = 2;
	int64 EndTime = 3;
	repeated RoguelikeToken RoguelikeTokenList = 4;
	repeated SeasonReward SeasonRewardList = 5;
	int32 TokenItemCount = 6;
}

message RoguelikeSeasonDataRequest {
	int32 SeasonId = 247;
}

message RoguelikeSeasonDataResponse {
	int32 ErrorCode = 41;
	SeasonData SeasonData = 179;
}

message RoguelikeTokenReceiveRequest {
	int32 SeasonId = 122;
	int32 Id = 218;
}

message RoguelikeTokenReceiveResponse {
	int32 ErrorCode = 99;
	map<int32, int32> ItemMap = 83;
}

message RoguelikeSeasonRewardReceiveRequest {
	int32 SeasonId = 132;
	repeated int32 Index = 75;
}

message RoguelikeSeasonRewardReceiveResponse {
	int32 ErrorCode = 169;
	map<int32, int32> ItemMap = 122;
}

message RoguelikeGiveUpGainRequest {
	int32 BindId = 164;
}

message RoguelikeGiveUpGainResponse {
	int32 BindId = 52;
	int32 ErrorCode = 119;
	map<int32, int32> ItemMap = 76;
}

message CheckGearRequest {
	int64 EntityId = 218;
}

message CheckGearResponse {
	int32 ErrorCode = 22;
}

enum SceneStepStatus {
	SceneStepStatus_Accepted = 0;
	SceneStepStatus_Finished = 1;
	SceneStepStatus_Failed = 2;
}

message SceneStepConditionProgress {
	int32 ConditionId = 1;
	int32 ProgressNum = 2;
}

message SceneStepPlayerProgress {
	int32 PlayerId = 1;
	repeated SceneStepConditionProgress Progress = 2;
}

message SceneStepInfo {
	int32 StepId = 1;
	int32 Status = 2;
	repeated SceneStepConditionProgress Progress = 3;
	repeated SceneStepPlayerProgress MultiPlayerProgress = 4;
}

message SceneStepGroupInfo {
	int32 StepGroupId = 1;
	repeated SceneStepInfo Steps = 2;
}

message SceneStepGroupInfoNotify {
	repeated SceneStepGroupInfo StepGroupInfo = 153;
}

message SceneStepInfoNotify {
	int32 StepGroupId = 146;
	SceneStepInfo StepInfo = 51;
}

message TargetGearHitRequest {
	int64 EntityId = 9;
}

message TargetGearHitResponse {
	int32 ErrorCode = 9;
}

message ThrowDamageRequest {
	int64 EntityId = 69;
	int64 CalculateId = 247;
}

message ThrowDamageResponse {
	int32 ErrorCode = 246;
}

message ThrowDamageNotify {
	int64 EntityId = 154;
	int32 Durability = 122;
}

message ThrowDamageRecoveryNotify {
	int64 EntityId = 126;
	int32 Durability = 178;
}

message GetRewardTreasureBoxRequest {
	int64 EntityId = 101;
}

message GetRewardTreasureBoxResponse {
	int32 ErrorCode = 66;
}

message MobileButtonSetting {
	int32 Id = 1;
	float Size = 2;
	float Transparency = 3;
	float ScreenX = 4;
	float ScreenY = 5;
	int32 ButtonLevel = 6;
	int32 PanelLevel = 7;
}

message SettingNotify {
	repeated MobileButtonSetting MobileButtonSettings = 59;
}

message MobileButtonSettingUpdateRequest {
	repeated MobileButtonSetting MobileButtonSettings = 130;
}

message MobileButtonSettingUpdateResponse {
	int32 ErrorCode = 230;
}

message LanguageSettingUpdateRequest {
	int32 Language = 56;
}

message LanguageSettingUpdateResponse {
	int32 ErrorCode = 234;
}

message ShopItemInfo {
	int32 Id = 1;
	int32 BoughtCount = 2;
	int32 Lock = 3;
}

message ShoppMoneyInfo {
	int32 MoneyId = 1;
	int32 MoneyNum = 2;
}

message UnlockInfo {
	int32 ShopId = 1;
	int32 Id = 2;
}

message ShopItemInfoNew {
	int32 Id = 1;
	int32 BoughtCount = 2;
	bool Lock = 3;
	int32 ItemId = 4;
	int32 ItemNum = 5;
	string CondText = 6;
	repeated ShoppMoneyInfo MoneyList = 7;
	uint32 BeginTime = 8;
	uint32 EndTime = 9;
	int32 LimitNum = 10;
	repeated ShoppMoneyInfo OriginalMoneyList = 11;
	string Label = 12;
	string SwitchText = 13;
	string PurchaseText = 14;
}

message ShopInfo {
	int32 shopId = 1;
	uint32 UpdateTime = 2;
	repeated ShopItemInfoNew ItemInfoList = 3;
}

message ShopInfoRequest {
	string VersionStr = 156;
}

message ShopInfoResponse {
	int32 ErrorCode = 181;
	string VersionStr = 18;
	repeated ShopInfo ShopList = 23;
}

message ShopInfoNotify {
	string VersionStr = 190;
	repeated ShopInfo ShopList = 13;
}

message ShopBuyRequest {
	string VersionStr = 172;
	int32 ShopId = 158;
	int32 Id = 209;
	int32 Num = 13;
	int32 MoneyId = 128;
	int64 InteractEntityId = 87;
}

message ShopBuyResponse {
	int32 ErrorCode = 109;
	int32 ShopId = 40;
	int32 Id = 226;
	int32 BoughtCount = 146;
}

message ShopUpdateRequest {
	int32 ShopId = 83;
}

message ShopUpdateResponse {
	int32 ErrorCode = 42;
	ShopInfo Info = 201;
}

message ShopUnlockNotify {
	repeated UnlockInfo unlockList = 4;
}

enum SneakState {
	SneakState_Open = 0;
	SneakState_Close = 1;
}

enum SneakFinishType {
	SneakFinishType_SneakSuccess = 0;
	SneakFinishType_SneakFail = 1;
}

message SneakGameStateNotify {
	int32 SneakId = 127;
	int32 State = 92;
	repeated int64 EntityIds = 100;
}

message SneakFinishRequest {
	int32 SneakId = 12;
	int32 FinishType = 10;
}

message SneakFinishResponse {
	int32 ErrorCode = 108;
}

message SpecialItemNotify {
	int32 EquipItemId = 60;
}

message SpecialItemEquipRequest {
	int32 ItemId = 16;
}

message SpecialItemEquipResponse {
	int32 ErrorCode = 222;
}

message SpecialItemUnEquipRequest {
}

message SpecialItemUnEquipResponse {
	int32 ErrorCode = 44;
}

message SynthesisInfoRequest {
}

message SynthesisInfoResponse {
	int32 Code = 163;
	repeated OneSynthesisInfo SynthesisInfoList = 47;
	repeated OneSynthesisConfig SynthesisConfigs = 150;
	SynthesisLevelInfo LevelInfo = 117;
	int64 LimitRefreshTime = 190;
}

message SynthesisLevelInfo {
	int32 Level = 1;
	int32 TotalProficiency = 2;
}

message OneSynthesisInfo {
	int32 Id = 1;
	int32 Count = 2;
	int32 LastRoleId = 3;
	int32 LimitCount = 4;
	int32 LimitSynthesisCount = 5;
	int64 LimitBeginTime = 6;
	int64 LimitEndTime = 7;
}

message OneSynthesisConfig {
	int32 Id = 1;
	int64 LimitBeginTime = 2;
	int64 LimitEndTime = 3;
}

message SynthesisItemRequest {
	int32 Id = 101;
	int32 RoleId = 48;
	int32 Count = 131;
	int64 InteractEntityId = 210;
}

message SynthesisItemResponse {
	int32 Code = 47;
	int32 Id = 247;
	repeated SingleItemInfo ItemInfos = 207;
	int32 ActiveSkillType = 132;
	repeated SingleItemInfo ExtraItemInfos = 147;
	int32 RoleId = 140;
}

message SynthesisInfoUpdateNotify {
	repeated OneSynthesisInfo SynthesisInfoList = 150;
	repeated int32 HideSynthesisIdList = 104;
}

message SynthesisLevelRewardRequest {
}

message SynthesisLevelRewardResponse {
	int32 Code = 156;
	SynthesisLevelInfo LevelInfo = 202;
}

message SynthesisLevelUpdateNotify {
	oneof LevelInfo_ {
		SynthesisLevelInfo LevelInfo = 20;
	}

}

message SynthesisFormulaUnlockRequest {
	int32 Id = 169;
}

message SynthesisFormulaUnlockResponse {
	int32 Code = 58;
	int32 Id = 192;
}

message TemporaryTeleportInfo {
	int32 MarkId = 1;
	int64 TemporaryTeleportId = 2;
	int32 MapId = 3;
	int32 InstId = 4;
	Vector Pos = 5;
	Rotator Rot = 6;
	Vector PlayerTeleportPos = 7;
}

message TemporaryTeleportAllInfoNotify {
	repeated TemporaryTeleportInfo AllTemporaryTeleportInfo = 224;
}

message AddTemporaryTeleportInfoNotify {
	TemporaryTeleportInfo TemporaryTeleportInfo = 253;
}

message RemoveTemporaryTeleportNotify {
	int64 TemporaryTeleportId = 25;
}

message TemporaryTeleportChangeNotify {
	TemporaryTeleportInfo TemporaryTeleportInfo = 42;
}

message RemoveTemporaryTeleportRequest {
	int64 TemporaryTeleportId = 197;
}

message RemoveTemporaryTeleportResponse {
	int32 ErrCode = 143;
}

message TeleportToTargetRequest {
	int64 temporaryTeleportId = 33;
	Rotator Rot = 41;
}

message TeleportToTargetResponse {
	int32 errCode = 78;
}

message ThirdPartySharedNotify {
	repeated int32 SharedIds = 23;
}

message ThirdPartyShareRequest {
	int32 SharedId = 27;
}

message ThirdPartyShareResponse {
	int32 ErrorCode = 197;
}

message TimelineTraceStartRequest {
	int64 EntityId = 148;
	int32 Index = 93;
}

message ControlPointData {
	int32 ControlPointIndex = 1;
	bool LeftEnable = 2;
	bool RightEnable = 3;
}

message TimelineTraceStartResponse {
	int32 Code = 14;
	int32 Index = 77;
	int32 ControlPoint = 191;
	repeated int64 EntityIds = 75;
	repeated ControlPointData PointDatas = 90;
}

message TimelineTraceControlRequest {
	int64 EntityId = 101;
	bool Forward = 191;
}

message TimelineTraceControlResponse {
	int32 Code = 126;
	int32 ControlPoint = 249;
}

message TimelineTraceExitRequest {
	int64 EntityId = 21;
}

message TimelineTraceExitResponse {
	int32 Code = 6;
}

message TimeCheckRequest {
	int64 ClientTime = 27;
	float Dilation = 48;
	float RDilation = 149;
	float RDilationInst = 26;
}

message TimeCheckNotify {
	int64 ClientTime = 101;
	int64 ServerTime = 46;
	int64 ServerStopTime = 126;
	int64 SceneStopTime = 72;
}

message TimeCheckResponse {
	int32 Code = 122;
	int64 ClientTime = 178;
	int64 ServerTime = 27;
	int64 ServerStopTime = 135;
	int64 SceneStopTime = 77;
}

message TowerInfo {
	int32 CurrentSeason = 1;
	int32 DataSeason = 2;
	repeated TowerDifficultyPb TowerDifficulties = 3;
	int64 BeginTime = 4;
	int64 EndTime = 5;
}

message TowerDifficultyPb {
	int32 Difficulty = 1;
	repeated int32 RewardIndex = 2;
	repeated TowerAreaPb TowerAreas = 3;
	int32 MaxStar = 4;
}

message TowerAreaPb {
	int32 AreaNum = 1;
	repeated TowerFloorPb TowerFloors = 2;
}

message TowerFloorPb {
	int32 TowerConfigId = 1;
	int32 Star = 2;
	repeated TowerRolePb Formation = 4;
}

message TowerRolePb {
	int32 RoleId = 1;
	int32 LeaveSkillId = 2;
}

message TowerRecommendRole {
	int32 RoleId = 1;
	int32 LeaveSkillId = 2;
	int32 Level = 3;
}

message TowerRecommendFormation {
	repeated TowerRecommendRole Formation = 1;
	int32 Usage = 2;
}

message TowerRequest {
}

message TowerResponse {
	TowerInfo TowerInfo = 90;
}

message TowerSeasonUpdateRequest {
}

message TowerSeasonUpdateResponse {
	oneof TowerInfo_ {
		TowerInfo TowerInfo = 136;
	}

	int32 MaxUnlockDifficulty = 238;
}

message TowerFormationRecommendRequest {
	int32 TowerConfigId = 61;
}

message TowerFormationRecommendResponse {
	int32 ErrorCode = 177;
	bool NeedUpdateSeason = 179;
	int32 TowerConfigId = 166;
	repeated TowerRecommendFormation Formations = 14;
}

message TowerRewardRequest {
	int32 Difficulty = 102;
	int32 RewardIndex = 194;
}

message TowerRewardResponse {
	int32 ErrorCode = 126;
	bool NeedUpdateSeason = 247;
}

message TowerStartRequest {
	int32 TowerConfigId = 124;
	repeated TowerRolePb Formation = 194;
}

message TowerStartResponse {
	int32 ErrorCode = 186;
	bool NeedUpdateSeason = 193;
}

message TowerResetRequest {
	int32 TowerConfigId = 90;
}

message TowerResetResponse {
	int32 ErrorCode = 85;
	int32 TowerConfigId = 53;
	bool NeedUpdateSeason = 130;
}

message TowerApplyFloorDataRequest {
	bool Apply = 107;
}

message TowerApplyFloorDataResponse {
	int32 ErrorCode = 1;
	bool NeedUpdateSeason = 217;
}

message TowerEndNotify {
	bool NeedUpdateSeason = 104;
	TowerFloorPb CurrentFloorData = 248;
	bool Success = 52;
}

message TowerFloorUpdateNotify {
	repeated TowerFloorPb TowerFloors = 122;
}

message TowerDifficultyUpdateNotify {
	repeated TowerDifficultyPb TowerDifficulties = 42;
}

message TowerInfoUpdateNotify {
	TowerInfo TowerInfo = 141;
}

message TowerGuideActivityRewardRequest {
	int32 TowerGuideId = 231;
}

message TowerGuideActivityRewardResponse {
	int32 ErrorCode = 155;
}

message TowerGuideActivityInfoRequest {
}

message TowerGuideActivityInfoResponse {
	repeated int32 TowerGuideId = 34;
}

message TurntableCompleteRequest {
	int64 EntityId = 64;
}

message TurntableCompleteResponse {
	int32 ErrCode = 107;
	int64 EntityId = 182;
}

message TutorialInfo {
	int32 Id = 1;
	uint32 CreateTime = 2;
	bool GetAward = 3;
}

message TutorialInfoRequest {
}

message TutorialInfoResponse {
	repeated TutorialInfo UnLockList = 71;
}

message TutorialUnlockNotify {
	repeated TutorialInfo UnLockList = 67;
}

message TutorialReceiveRequest {
	int32 Id = 62;
}

message TutorialReceiveResponse {
	int32 ErrorCode = 224;
	repeated string ErrorParams = 75;
	map<int32, int32> ItemMap = 105;
}

message TutorialUnlockRequest {
	int32 Id = 18;
}

message TutorialUnlockResponse {
	int32 ErrorCode = 172;
	repeated string ErrorParams = 130;
	TutorialInfo UnLockInfo = 117;
}

message OneWeaponItemInfo {
	int32 IncId = 1;
	int32 WeaponLevel = 2;
	int32 WeaponExp = 3;
	int32 WeaponBreach = 4;
	int32 WeaponResonLevel = 5;
	int32 RoleId = 6;
}

message WeaponConsumeItem {
	int32 IncId = 1;
	int32 Count = 2;
	int32 ItemId = 3;
}

message WeaponLevelUpRequest {
	int32 IncId = 177;
	repeated WeaponConsumeItem ConsumeList = 243;
}

message WeaponLevelUpResponse {
	int32 ErrorCode = 22;
	int32 IncId = 56;
	int32 WeaponLevel = 52;
	int32 WeaponExp = 78;
	map<int32, int32> ItemMap = 195;
}

message WeaponBreachRequest {
	int32 IncId = 103;
}

message WeaponBreachResponse {
	int32 ErrorCode = 96;
	int32 IncId = 58;
	int32 WeaponBreach = 226;
}

message WeaponResonUpRequest {
	int32 IncId = 27;
	repeated int32 ConsumeList = 15;
	repeated WeaponConsumeItem ConsumeItemList = 81;
}

message WeaponResonUpResponse {
	int32 ErrorCode = 194;
	int32 IncId = 129;
	int32 ReaonLevel = 94;
}

message WeaponAllInfoNotify {
	repeated OneWeaponItemInfo AllWeapon = 152;
}

message WeaponAddNotify {
	OneWeaponItemInfo WeaponInfo = 132;
}

message WeaponRemoveNotify {
	int32 IncId = 73;
}

message WorldLevelDownRequest {
}

message WorldLevelDownResponse {
	int32 ErrorCode = 167;
	int32 OriginWorldLevel = 9;
	int32 CurWorldLevel = 159;
	int32 WorldLevelTimeStamp = 200;
}

message WorldLevelRegainRequest {
}

message WorldLevelRegainResponse {
	int32 ErrorCode = 237;
	int32 OriginWorldLevel = 114;
	int32 CurWorldLevel = 209;
	int32 WorldLevelTimeStamp = 165;
}

enum WorldEnterPermission {
	WorldEnterPermission_ConfirmJoin = 0;
	WorldEnterPermission_DirectJoin = 1;
	WorldEnterPermission_ForbidJoin = 2;
	WorldEnterPermission_OnlyFriendJoin = 3;
}

enum WorldEnterWay {
	WorldEnterWay_LobbyJoin = 0;
	WorldEnterWay_QueryJoin = 1;
}

enum AgreeJoinWay {
	AgreeJoinWay_ClientActive = 0;
	AgreeJoinWay_ClientTimeOut = 1;
}

message WorldEnterPermissionsRequest {
	int32 Type = 98;
}

message WorldEnterPermissionsResponse {
	int32 ErrorCode = 19;
	int32 Type = 138;
}

message ApplyJoinWorldRequest {
	int32 PlayerId = 100;
	int32 Ways = 252;
}

message ApplyJoinWorldResponse {
	int32 ErrorCode = 132;
	repeated string ErrorParams = 51;
}

message ApplyJoinWorldNotify {
	int32 PlayerId = 12;
	int64 RefuseTimestamp = 148;
	string PlayerName = 116;
	int32 HeadId = 26;
	int32 Level = 10;
}

message AgreeJoinResultRequest {
	int32 PlayerId = 201;
	bool Result = 169;
	int32 Way = 203;
}

message AgreeJoinResultResponse {
	int32 ErrorCode = 162;
	string PlayerName = 5;
}

message AgreeJoinResultNotify {
	int32 ErrorCode = 246;
	string PlayerName = 86;
}

message ApplyerEnterSceneNotify {
	int32 ErrorCode = 142;
	int32 PlayerId = 132;
}

message AllApplyJoinNotify {
	repeated ApplyJoinWorldNotify ApplyList = 223;
}

message LobbyListRequest {
	bool isFriend = 210;
}

message LobbyListResponse {
	int32 ErrorCode = 129;
	repeated PlayerDetails ItemList = 231;
}

message LobbyQueryPlayersRequest {
	int32 PlayerId = 161;
}

message LobbyQueryPlayersResponse {
	int32 ErrorCode = 91;
	PlayerDetails Item = 190;
}

message WorldTeamPlayerInfo {
	int32 PlayerId = 1;
	string PlayerName = 2;
	int32 HeadId = 3;
	int32 Level = 4;
	string Signature = 5;
	WorldTeamPlayerFightInfo FightInfo = 6;
	int32 PingState = 7;
	PlayerDetails Item = 8;
}

enum WorldTeamLeaveReason {
	WorldTeamLeaveReason_Initiative = 0;
	WorldTeamLeaveReason_BeKick = 1;
	WorldTeamLeaveReason_Dissolve = 2;
	WorldTeamLeaveReason_Logout = 3;
	WorldTeamLeaveReason_ToOwnBigWorld = 4;
}

enum WorldTeamPlayerChangeType {
	WorldTeamPlayerChangeType_Name = 0;
	WorldTeamPlayerChangeType_Head = 1;
	WorldTeamPlayerChangeType_Level = 2;
	WorldTeamPlayerChangeType_Signature = 3;
}

enum ENetPingState {
	ENetPingState_UNKNOWN = 0;
	ENetPingState_GREAT = 1;
	ENetPingState_GOOD = 2;
	ENetPingState_POOR = 3;
	ENetPingState_MAX = 4;
}

enum EPlayerTeleportState {
	EPlayerTeleportState_Default = 0;
	EPlayerTeleportState_Teleporting = 1;
	EPlayerTeleportState_TeleportTimeOut = 2;
}

message WorldTeamPlayerInfoChangeNotify {
	int32 PlayerId = 187;
	int32 ChangeType = 72;
	int32 IntValue = 237;
	string StringValue = 227;
}

message JoinWorldTeamNotify {
	int32 OwnerId = 212;
	repeated WorldTeamPlayerInfo PlayerInfos = 20;
}

message PlayerLeaveWorldTeamNotify {
	int32 PlayerId = 20;
	int32 Reason = 172;
}

message PlayerEnterWorldTeamNotify {
	WorldTeamPlayerInfo PlayerInfo = 74;
}

message LeaveWorldTeamRequest {
	int32 PlayerId = 54;
}

message LeaveWorldTeamResponse {
	int32 ErrorCode = 7;
}

message KickWorldTeamRequest {
	int32 PlayerId = 199;
}

message KickWorldTeamResponse {
	int32 ErrorCode = 192;
}

message RobotDestinationPush {
	Vector Location = 120;
}

message RobotDestinationNotify {
	Vector Location = 28;
}

message WorldTeamRoleInfo {
	int32 RoleId = 1;
	int32 RoleLevel = 2;
}

message WorldTeamPlayerFightInfo {
	int32 CurRoleId = 2;
	repeated WorldTeamRoleInfo RoleInfos = 3;
}

message UpdateWorldTeamPlayerFightInfoNotify {
	int32 PlayerId = 193;
	WorldTeamPlayerFightInfo FightInfo = 5;
}

message PlayerNetStatePush {
	int32 RttMs = 155;
}

message PlayerNetStateNotify {
	int32 PlayerId = 43;
	int32 PingState = 35;
}

message PlayerTeleportStateNotify {
	int32 PlayerId = 249;
	int32 TeleportState = 140;
	EntitySimplyMoveInfo CurRolePosInfo = 34;
}